	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x42af8);
	push_byte(0x0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00a8e);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00aa3);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x2);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00ae0);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x3);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00b4a);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x8);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00b87);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x9);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00c7c);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0xa);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00d7c);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x10);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00de5);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x11);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00e01);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x15);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00e1d);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x16);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01035);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x17);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0108f);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x18);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01123);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x19);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0117d);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1a);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01211);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1b);
	push_byte(0x2);
	shl();
	add();
	push_offset(L012dc);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1c);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01513);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1d);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01660);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1e);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01758);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x1f);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01775);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x20);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0183c);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x21);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0186a);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x22);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01898);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x23);
	push_byte(0x2);
	shl();
	add();
	push_offset(L018c6);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x24);
	push_byte(0x2);
	shl();
	add();
	push_offset(L018f4);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x25);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01922);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x26);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01950);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x27);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0197e);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x28);
	push_byte(0x2);
	shl();
	add();
	push_offset(L019ac);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x29);
	push_byte(0x2);
	shl();
	add();
	push_offset(L019cc);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x2a);
	push_byte(0x2);
	shl();
	add();
	push_offset(L019fa);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x2b);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01a28);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x30);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01a56);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x31);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01a84);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x32);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01ab2);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x33);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01ae0);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x34);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01b0e);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x35);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01b3c);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x38);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01b6a);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x39);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01b98);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x3a);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01bc6);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x3f);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01be6);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x40);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01c6a);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x48);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01ca2);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x7b);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01ccc);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x7e);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01cf4);
	move(0x2);
	push_dword(0x42af8);
	push_byte(0x7f);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01d0a);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x80);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01dbe);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x81);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01e18);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x82);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01e53);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x83);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01e9c);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x90);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01f0b);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x91);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01f57);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x92);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01fc2);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x93);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02014);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x94);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0209e);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x95);
	push_byte(0x2);
	shl();
	add();
	push_offset(L020e0);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x98);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02141);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x99);
	push_byte(0x2);
	shl();
	add();
	push_offset(L021e6);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xa0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L022e6);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xa8);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02307);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xaa);
	push_byte(0x2);
	shl();
	add();
	push_offset(L023ea);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xac);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0240e);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xd0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03088);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0245a);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe1);
	push_byte(0x2);
	shl();
	add();
	push_offset(L024bf);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe2);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0250f);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe3);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0256b);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe4);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0261d);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe5);
	push_byte(0x2);
	shl();
	add();
	push_offset(L026b1);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe6);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02757);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe7);
	push_byte(0x2);
	shl();
	add();
	push_offset(L027e3);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xe8);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02826);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xea);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0286f);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xeb);
	push_byte(0x2);
	shl();
	add();
	push_offset(L028b4);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xec);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02be7);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02ef1);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf3);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02f10);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf4);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03261);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf5);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03280);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf6);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03323);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf7);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03342);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf8);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03386);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xf9);
	push_byte(0x2);
	shl();
	add();
	push_offset(L033c0);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xfa);
	push_byte(0x2);
	shl();
	add();
	push_offset(L033f0);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xfc);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0344d);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xfd);
	push_byte(0x2);
	shl();
	add();
	push_offset(L034e1);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xfb);
	push_byte(0x2);
	shl();
	add();
	push_offset(L03515);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xfe);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0352b);
	move(0x2);
	push_dword(0x42af8);
	push_word(0xff);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0068a);
	move(0x2);
	push_dword(0x43fe8);
	push_offset(L006e6);
	move(0x2);
	push_dword(0x43fec);
	push_offset(L00736);
	move(0x2);
	push_dword(0x43ff0);
	push_offset(L0089b);
	move(0x2);
	push_dword(0x43ff4);
	push_offset(L00790);
	move(0x2);
	push_dword(0x43ff8);
	push_offset(L007e3);
	move(0x2);
	push_dword(0x43ffc);
	push_offset(L006e6);
	move(0x2);
	push_dword(0x44000);
	push_offset(L0089b);
	move(0x2);
	push_dword(0x44004);
	push_offset(L008b8);
	move(0x2);
	push_dword(0x44008);
	push_offset(L00938);
	move(0x2);
	push_dword(0x4400c);
	push_offset(L00a33);
	move(0x2);
	push_dword(0x44010);
	push_offset(L01689);
	move(0x2);
	push_dword(0x44014);
	push_offset(L025b2);
	move(0x2);
	push_dword(0x44018);
	push_offset(L02675);
	move(0x2);
	push_dword(0x4401c);
	push_offset(L026f4);
	move(0x2);
	push_dword(0x44020);
	push_offset(L027af);
	move(0x2);
	push_dword(0x44024);
	push_offset(L02980);
	move(0x2);
	push_dword(0x44028);
	push_offset(L02d36);
	move(0x2);
	push_dword(0x4402c);
	push_offset(L032ee);
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0068a:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	cmd_7a();
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L006a3:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_dword(0x9faa8);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L006e6:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	push_word(0xff);
	ternary();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x120);
	add();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00736:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x120);
	add();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	push_word(0xff);
	lt();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	move_arg(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00790:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_dword(0x400000);
	lt();
	push_dword(0x9faa8);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_base_offset(0x8);
	load(0x2);
	add();
	push_dword(0x400000);
	sub();
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	ternary();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L007e3:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L00803:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00866);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	geq();
	push_offset(L00866);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00790);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02980);
	call();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	move_arg(0x2);
	push_offset(L00878);
	jmp();

L00866:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	push_byte(0x0);
	move(0x2);

L00878:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	lt();
	push_offset(L00803);
	jc(0x0);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L0089b:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L00790);
	call();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L008b8:
	load_base();
	push_word(0x214);
	add();
	store_base();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x20c);
	move_arg(0x2);
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x214);
	move_arg(0x2);
	push_base_offset(0x204);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	geq();
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	lt();
	bool_and();
	move(0x2);
	push_base_offset(0x204);
	load(0x2);
	push_offset(L0092c);
	jc(0x0);
	push_byte(0x0);
	push_offset(L0092c);
	jc(0x0);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x1);
	sub();
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x100);
	push_string("無効な%s [ %d ] が指定されました\n\n値の有効範囲は [ %d ～ %d ] です");
	cmd_6f();
	push_base_offset(0x200);
	push_base_offset(0x100);
	push_offset(L00a33);
	call();
	push_base_offset(0x200);
	usr1(0x80);

L0092c:
	push_base_offset(0x204);
	load(0x2);
	load_base();
	push_word(0x214);
	sub();
	store_base();
	ret();

L00938:
	load_base();
	push_word(0x218);
	add();
	store_base();
	push_base_offset(0x214);
	move_arg(0x2);
	push_base_offset(0x218);
	move_arg(0x2);
	push_base_offset(0x210);
	push_base_offset(0x218);
	load(0x2);
	push_byte(0x0);
	neq();
	move(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_offset(L00985);
	jc(0x0);
	push_byte(0x0);
	push_offset(L00a27);
	jc(0x0);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x10c);
	push_string("%sにNULLポインタを指定することはできません");
	cmd_6f();
	push_base_offset(0x20c);
	push_base_offset(0x10c);
	push_offset(L00a33);
	call();
	push_base_offset(0x20c);
	usr1(0x80);
	push_offset(L00a27);
	jmp();

L00985:
	push_byte(0x0);
	push_offset(L00a27);
	jc(0x1);
	push_base_offset(0x218);
	load(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x9faa8);
	load(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	geq();
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_word(0xb10);
	load(0x2);
	add();
	lt();
	bool_and();
	push_offset(L00a27);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	geq();
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	add();
	lt();
	bool_and();
	push_offset(L00a27);
	jc(0x0);
	push_base_offset(0x210);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_offset(L00a27);
	jc(0x0);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x10c);
	push_string("%sに無効なポインタが指定されています");
	cmd_6f();
	push_base_offset(0x20c);
	push_base_offset(0x10c);
	push_offset(L00a33);
	call();
	push_base_offset(0x20c);
	usr1(0x80);
	push_offset(L00a27);
	jmp();

L00a27:
	push_base_offset(0x210);
	load(0x2);
	load_base();
	push_word(0x218);
	sub();
	store_base();
	ret();

L00a33:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00a7d);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc4);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_string("[ スクリプト：%s - 行番号：%d ]\n\n%s");
	cmd_6f();
	push_offset(L00a88);
	jmp();

L00a7d:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();

L00a88:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00a8e:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00aa3:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x30);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00ae0:
	load_base();
	push_word(0x204);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x204);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L00b26);
	jc(0x1);
	push_base_offset(0x204);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	leq();
	push_offset(L00b26);
	jc(0x0);
	push_base_offset(0x204);
	load(0x2);
	push_base_offset(0x200);
	push_string("スタックエリア上の無効なデータオフセット [ 0x%08X ] が指定されています");
	cmd_6f();
	push_base_offset(0x100);
	push_base_offset(0x200);
	push_offset(L00a33);
	call();
	push_base_offset(0x100);
	cmd_79();

L00b26:
	push_dword(0x400000);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	add();
	push_base_offset(0x204);
	load(0x2);
	sub();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_word(0x204);
	sub();
	store_base();
	ret();

L00b4a:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x30);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00b87:
	load_base();
	push_word(0x210);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L00c40);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x400000);
	push_word(0x6100);
	add();
	lt();
	bool_and();
	push_offset(L00bd3);
	jc(0x0);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x208);
	push_string("無効なデータアドレス [ 0x%08X ] からデータの読み出しを行おうとしています");
	cmd_6f();
	push_offset(L00c2b);
	jmp();

L00bd3:
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x400000);
	lt();
	push_offset(L00c03);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_word(0xb10);
	load(0x2);
	lt();
	push_offset(L00c40);
	jc(0x0);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x208);
	push_string("プログラムエリア上の無効なデータアドレス [ 0x%08X ] からデータの読み出しを行おうとしています");
	cmd_6f();
	push_offset(L00c2b);
	jmp();

L00c03:
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x400000);
	sub();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	lt();
	push_offset(L00c40);
	jc(0x0);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x208);
	push_string("スタックエリア上の無効なデータアドレス [ 0x%08X ] からデータの読み出しを行おうとしています");
	cmd_6f();

L00c2b:
	push_byte(0x0);
	push_offset(L00c40);
	jc(0x0);
	push_base_offset(0x108);
	push_base_offset(0x208);
	push_offset(L00a33);
	call();
	push_base_offset(0x108);
	cmd_79();

L00c40:
	push_base_offset(0x20c);
	load(0x2);
	push_offset(L00790);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x8);
	load(0x2);
	load(0x0);
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	ternary();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_word(0x210);
	sub();
	store_base();
	ret();

L00c7c:
	load_base();
	push_word(0x214);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L00d32);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x400000);
	push_word(0x6100);
	add();
	lt();
	bool_and();
	push_offset(L00cd1);
	jc(0x0);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x208);
	push_string("無効なデータアドレス [ 0x%08X ] からデータの読み出しを行おうとしています");
	cmd_6f();
	push_offset(L00d19);
	jmp();

L00cd1:
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x400000);
	lt();
	push_offset(L00cf1);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x208);
	push_string("プログラムエリア上の無効なデータアドレス [ 0x%08X ] へデータを書き込もうとしています");
	cmd_6f();
	push_offset(L00d19);
	jmp();

L00cf1:
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x400000);
	sub();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	lt();
	push_offset(L00d32);
	jc(0x0);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x208);
	push_string("スタックエリア上の無効なデータアドレス [ 0x%08X ] へデータを書き込もうとしています");
	cmd_6f();

L00d19:
	push_byte(0x0);
	push_offset(L00d73);
	jc(0x0);
	push_base_offset(0x108);
	push_base_offset(0x208);
	push_offset(L00a33);
	call();
	push_base_offset(0x108);
	cmd_79();
	push_offset(L00d73);
	jmp();

L00d32:
	push_base_offset(0x20c);
	load(0x2);
	push_offset(L00790);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00d5d);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	move(0x0);
	push_offset(L00d73);
	jmp();

L00d5d:
	push_base_offset(0x4);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	move(0x2);

L00d73:
	push_byte(0x0);
	load_base();
	push_word(0x214);
	sub();
	store_base();
	ret();

L00d7c:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L00790);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00dc7);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	move(0x0);
	push_offset(L00ddd);
	jmp();

L00dc7:
	push_base_offset(0x4);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);

L00ddd:
	push_byte(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L00de5:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00e01:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	move_arg(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00e1d:
	load_base();
	push_byte(0x44);
	add();
	store_base();
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x40);
	move_arg(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L01023);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x40);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L00eca);
	jc(0x1);
	push_dword(0x43f2c);
	load(0x2);
	call();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6d38);
	add();
	push_word(0x100);
	push_byte(0x18);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_word(0x520);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xbe0);
	push_byte(0x1);
	move(0x2);

L00eca:
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01023);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x3c);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x38);
	memcpy();
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_word(0xb14);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	push_word(0xb14);
	load(0x2);
	sub();
	push_byte(0x38);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	push_word(0xb14);
	load(0x2);
	move(0x2);
	push_word(0xb10);
	push_word(0xb18);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8548);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x3c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(0x43f4c);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00fc6);
	jc(0x0);
	push_string("処理を続行できない為、終了します");
	usr1(0x80);
	push_base_offset(0x44);
	push_byte(0x4);
	move(0x2);
	push_offset(L0102a);
	jmp();

L00fc6:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_base_offset(0x3c);
	push_byte(0x30);
	add();
	load(0x2);
	sub();
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);

L01023:
	push_base_offset(0x44);
	push_byte(0x0);
	move(0x2);

L0102a:
	push_base_offset(0x44);
	load(0x2);
	load_base();
	push_byte(0x44);
	sub();
	store_base();
	ret();

L01035:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L01087);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L01087:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0108f:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	bool_and();
	bool_or();
	push_offset(L0111b);
	jc(0x1);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L0111b);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L0111b:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01123:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L01175);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L01175:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0117d:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	bool_and();
	bool_or();
	push_offset(L01209);
	jc(0x1);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L01209);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L01209:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01211:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L012d4);
	jc(0x0);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_byte(0x10);
	add();
	move(0x2);
	push_offset(L006e6);
	call();
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	move_arg(0x2);

L012d4:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L012dc:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x4);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L014f6);
	jc(0x1);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_byte(0x10);
	sub();
	move(0x2);
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x8);
	load(0x2);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L01470);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	move(0x2);
	push_word(0xb10);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	move(0x2);
	push_word(0xae0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	cmd_6a();
	push_word(0xadc);
	push_word(0xae0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x38);
	memclr();
	push_dword(0x45c10);
	push_word(0x100);
	memclr();
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x8540);
	add();
	load(0x2);
	bool_or();
	push_offset(L01470);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8548);
	add();
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);

L01470:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0149f);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);

L0149f:
	push_dword(0x48884);
	load(0x2);
	push_offset(L014eb);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x1377ac);
	push_word(0x10c);
	add();
	load(0x2);
	eq();
	push_offset(L014eb);
	jc(0x1);
	push_dword(0x45c10);
	push_dword(0x488c8);
	cmd_6a();
	push_dword(0x48888);
	push_byte(0x1);
	move(0x2);
	push_word(0xacc);
	push_byte(0x1);
	move(0x2);
	push_dword(0x48884);
	push_byte(0x0);
	move(0x2);

L014eb:
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_offset(L01508);
	jmp();

L014f6:
	push_word(0xaa4);
	push_dword(0x9fab8);
	push_dword(0x24630);
	add();
	load(0x2);
	move(0x2);

L01508:
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01513:
	load_base();
	push_word(0x114);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_word(0xae0);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	cmd_6a();
	push_word(0xadc);
	push_word(0xae0);
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	push_dword(0x43f4c);
	load(0x2);
	call();
	push_offset(L01590);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x110);
	push_string("指定されたユーザー定義関数 [ %s ] は読み込まれているライブラリ中に存在しません");
	cmd_6f();
	push_base_offset(0x110);
	cmd_79();
	push_offset(L01657);
	jmp();

L01590:
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_byte(0x10);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_base_offset(0xc);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0xc);
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x45c10);
	push_word(0x100);
	memclr();

L01657:
	push_byte(0x0);
	load_base();
	push_word(0x114);
	sub();
	store_base();
	ret();

L01660:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_dword(0x9fab8);
	push_word(0x524);
	add();
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x520);
	add();
	push_byte(0x1);
	move(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01689:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_word(0x100);
	lt();
	push_offset(L01742);
	jc(0x1);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_word(0x6d38);
	add();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x18);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_offset(L0174d);
	jmp();

L01742:
	push_string("これ以上、例外処理情報を登録することができません");
	cmd_79();
	push_base_offset(0x8);
	push_byte(0x4);
	move(0x2);

L0174d:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01758:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01689);
	call();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01775:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01826);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_word(0x6d38);
	add();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x18);
	mul();
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L017ef);
	jc(0x1);
	push_dword(0x43f2c);
	load(0x2);
	call();

L017ef:
	push_dword(0x9fab8);
	push_word(0x520);
	add();
	load(0x2);
	push_offset(L0181b);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x524);
	add();
	load(0x2);
	push_offset(L00736);
	call();
	push_dword(0x9fab8);
	push_word(0x520);
	add();
	push_byte(0x0);
	move(0x2);

L0181b:
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_offset(L01831);
	jmp();

L01826:
	push_string("例外処理情報が登録されていない状態で削除要求が発行されました");
	cmd_79();
	push_base_offset(0x8);
	push_byte(0x4);
	move(0x2);

L01831:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0183c:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0186a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	sub();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01898:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	mul();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L018c6:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	div();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L018f4:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	mod();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01922:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	and();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01950:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	or();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0197e:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	xor();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L019ac:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	not();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L019cc:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	shl();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L019fa:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	shr();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01a28:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	sar();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01a56:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	eq();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01a84:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	neq();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01ab2:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	leq();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01ae0:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	geq();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01b0e:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01b3c:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	gt();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01b6a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	bool_and();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01b98:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	bool_or();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01bc6:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	bool_zero();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01be6:
	load_base();
	push_word(0x108);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	move(0x2);

L01bfc:
	push_offset(L006e6);
	call();
	push_base_offset(0x104);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x108);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L01bfc);
	jc(0x0);
	push_base_offset(0x108);
	push_byte(0x0);
	move(0x2);

L01c32:
	push_base_offset(0x104);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00736);
	call();
	push_base_offset(0x108);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L01c32);
	jc(0x0);
	push_byte(0x0);
	load_base();
	push_word(0x108);
	sub();
	store_base();
	ret();

L01c6a:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	memcpy();
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01ca2:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	cmd_6a();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01ccc:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L006a3);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006a3);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01cf4:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01d0a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006a3);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006a3);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	push_string("framework._bs");
	cmd_69();
	push_offset(L01db6);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0xc4);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x30);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_dword(0x9faa8);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	load(0x2);
	add();
	move(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L01db6);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L01db6:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01dbe:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_string("転送先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L01e10);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_string("転送元となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L01e10);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	memcpy();

L01e10:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01e18:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_string("対象となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L01e4b);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	memclr();

L01e4b:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01e53:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_string("対象となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L01e94);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	memset();

L01e94:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01e9c:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_string("比較するメモリ領域１");
	push_offset(L00938);
	call();
	push_offset(L01efa);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_string("比較するメモリ領域２");
	push_offset(L00938);
	call();
	push_offset(L01efa);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	memcmp();
	push_base_offset(0x10);
	move_arg(0x2);

L01efa:
	push_base_offset(0x10);
	load(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L01f0b:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_string("格納先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L01f4f);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L01f4f);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();

L01f4f:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01f57:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_string("格納先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L01fba);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_string("前方の文字列");
	push_offset(L00938);
	call();
	push_offset(L01fba);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_string("後方の文字列");
	push_offset(L00938);
	call();
	push_offset(L01fba);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_6b();

L01fba:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01fc2:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_string("格納先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L0200c);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L0200c);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_base_offset(0x8);
	load(0x2);
	cmd_6d();

L0200c:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L02014:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_string("格納先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L02096);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L02096);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_string("置換前の文字列");
	push_offset(L00938);
	call();
	push_offset(L02096);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_string("置換後の文字列");
	push_offset(L00938);
	call();
	push_offset(L02096);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_67();

L02096:
	push_byte(0x0);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L0209e:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L020cf);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	cmd_68();
	push_base_offset(0x8);
	move_arg(0x2);

L020cf:
	push_base_offset(0x8);
	load(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L020e0:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_string("比較対象となる文字列１");
	push_offset(L00938);
	call();
	push_offset(L02130);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_string("比較対象となる文字列２");
	push_offset(L00938);
	call();
	push_offset(L02130);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_69();
	push_base_offset(0xc);
	move_arg(0x2);

L02130:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L02141:
	load_base();
	push_word(0x210);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x204);
	move_arg(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_string("格納先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L021dd);
	jc(0x1);
	push_base_offset(0x204);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_string("桁数");
	push_offset(L008b8);
	call();
	push_offset(L021dd);
	jc(0x1);
	push_base_offset(0x204);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L021cf);
	jc(0x1);
	push_base_offset(0x204);
	load(0x2);
	push_base_offset(0x200);
	push_string("%%0%dd");
	cmd_6f();
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x100);
	push_base_offset(0x200);
	cmd_6f();
	push_base_offset(0x100);
	cmd_68();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x100);
	push_base_offset(0x210);
	load(0x2);
	add();
	push_base_offset(0x204);
	load(0x2);
	sub();
	cmd_6a();
	push_offset(L021dd);
	jmp();

L021cf:
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_string("%d");
	cmd_6f();

L021dd:
	push_byte(0x0);
	load_base();
	push_word(0x210);
	sub();
	store_base();
	ret();

L021e6:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_string("格納先となるメモリ領域");
	push_offset(L00938);
	call();
	push_offset(L022d5);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L022d5);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_word(0x100);
	push_string("オフセット");
	push_offset(L008b8);
	call();
	push_offset(L022d5);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	push_word(0x100);
	push_string("取得文字数");
	push_offset(L008b8);
	call();
	push_offset(L022d5);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);

L0226f:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	lt();
	push_offset(L022c6);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L022c6);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	add();
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	move(0x0);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0226f);
	jmp();

L022c6:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_byte(0x0);
	move(0x0);

L022d5:
	push_base_offset(0x8);
	load(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L022e6:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	sys1(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L02307:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L023d9);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	load(0x0);
	push_byte(0x2b);
	eq();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	add();
	push_base_offset(0x10);
	load(0x2);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0x10);
	load(0x2);
	load(0x0);
	push_byte(0x2d);
	eq();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	load(0x0);
	push_byte(0x2d);
	eq();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	add();
	push_base_offset(0x10);
	load(0x2);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L0237d:
	push_base_offset(0x10);
	load(0x2);
	load(0x0);
	push_byte(0x30);
	geq();
	push_base_offset(0x10);
	load(0x2);
	load(0x0);
	push_byte(0x39);
	leq();
	bool_and();
	push_offset(L023c0);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xa);
	mul();
	push_base_offset(0x10);
	load(0x2);
	load(0x0);
	add();
	push_byte(0x30);
	sub();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0237d);
	jmp();

L023c0:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);

L023d9:
	push_base_offset(0x14);
	load(0x2);
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L023ea:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	ternary();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0240e:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_dword(-0x10000000);
	and();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	shl();
	push_byte(0x4);
	sar();
	add();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L0245a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_word(0x300);
	push_string("ローカルワーク番号");
	push_offset(L008b8);
	call();
	push_offset(L024b7);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x86cc);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L024b7);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L024b7:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L024bf:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_word(0x300);
	push_string("ローカルワーク番号");
	push_offset(L008b8);
	call();
	push_offset(L024ed);
	jc(0x0);
	push_byte(0x0);
	push_offset(L00736);
	call();
	push_offset(L02507);
	jmp();

L024ed:
	push_dword(0x9fab8);
	push_dword(0x86cc);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00736);
	call();

L02507:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0250f:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	push_string("グローバルワーク番号");
	push_offset(L008b8);
	call();
	push_offset(L02563);
	jc(0x1);
	push_word(0x2c0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L02563);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L02563:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0256b:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	push_string("グローバルワーク番号");
	push_offset(L008b8);
	call();
	push_offset(L02598);
	jc(0x0);
	push_byte(0x0);
	push_offset(L00736);
	call();
	push_offset(L025aa);
	jmp();

L02598:
	push_word(0x2c0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00736);
	call();

L025aa:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L025b2:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0xc);
	push_dword(0x9fab8);
	push_dword(0x85cc);
	add();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x7);
	and();
	shl();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	not();
	and();
	push_base_offset(0x4);
	load(0x2);
	or();
	move(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L0261d:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_word(0x800);
	push_string("ローカルフラグ番号");
	push_offset(L008b8);
	call();
	push_offset(L0266d);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L025b2);
	call();
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L0266d);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L0266d:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L02675:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x85cc);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x7);
	and();
	sar();
	push_byte(0x1);
	and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L026b1:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_word(0x800);
	push_string("ローカルフラグ番号");
	push_offset(L008b8);
	call();
	push_offset(L026df);
	jc(0x0);
	push_byte(0x0);
	push_offset(L00736);
	call();
	push_offset(L026ec);
	jmp();

L026df:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02675);
	call();
	push_offset(L00736);
	call();

L026ec:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L026f4:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0xc);
	push_word(0x1c0);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x7);
	and();
	shl();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	not();
	and();
	push_base_offset(0x4);
	load(0x2);
	or();
	move(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L02757:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_word(0x800);
	push_string("グローバルフラグ番号");
	push_offset(L008b8);
	call();
	push_offset(L027a7);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L026f4);
	call();
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L027a7);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L027a7:
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L027af:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x1c0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x7);
	and();
	sar();
	push_byte(0x1);
	and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L027e3:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_word(0x800);
	push_string("グローバルフラグ番号");
	push_offset(L008b8);
	call();
	push_offset(L02811);
	jc(0x0);
	push_byte(0x0);
	push_offset(L00736);
	call();
	push_offset(L0281e);
	jmp();

L02811:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L027af);
	call();
	push_offset(L00736);
	call();

L0281e:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L02826:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x10);
	push_string("ローカルストリングス番号");
	push_offset(L008b8);
	call();
	push_offset(L02867);
	jc(0x1);
	push_dword(0x400000);
	push_word(0x6100);
	add();
	push_word(0x1000);
	sub();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	shl();
	add();
	push_word(0x100);
	sub();
	push_offset(L00736);
	call();

L02867:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0286f:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x10);
	push_string("ローカルショートストリングス番号");
	push_offset(L008b8);
	call();
	push_offset(L028ac);
	jc(0x1);
	push_dword(0x400000);
	push_word(0x6100);
	add();
	push_word(0x100);
	sub();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	shl();
	add();
	push_offset(L00736);
	call();

L028ac:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L028b4:
	load_base();
	push_word(0x810);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x10);
	push_string("ローカルショートストリングス番号");
	push_offset(L008b8);
	call();
	push_offset(L02977);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_string("参照元となる文字列");
	push_offset(L00938);
	call();
	push_offset(L02977);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	cmd_68();
	push_base_offset(0x810);
	move_arg(0x2);
	push_base_offset(0x810);
	load(0x2);
	push_byte(0x10);
	lt();
	push_offset(L02934);
	jc(0x0);
	push_byte(0x0);
	push_offset(L02977);
	jc(0x0);
	push_byte(0x7);
	push_byte(0xf);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x80c);
	push_string("参照元となる文字列 [ %s ] は半角%d文字（全角%d文字）を超えています");
	cmd_6f();
	push_base_offset(0x40c);
	push_base_offset(0x80c);
	push_offset(L00a33);
	call();
	push_base_offset(0x40c);
	usr1(0x80);
	push_offset(L02977);
	jmp();

L02934:
	push_dword(0x400000);
	push_word(0x6100);
	add();
	push_word(0x100);
	sub();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	shl();
	add();
	push_offset(L00790);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	cmd_6a();
	push_byte(0x0);
	push_offset(L02977);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_dword(0x43efc);
	load(0x2);
	call();

L02977:
	push_byte(0x0);
	load_base();
	push_word(0x810);
	sub();
	store_base();
	ret();

L02980:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02b75);
	jc(0x1);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	cmd_68();
	push_base_offset(0x10);
	move_arg(0x2);

L029b5:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	geq();
	push_offset(L02b5b);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x2);
	add();
	push_base_offset(0x10);
	load(0x2);
	leq();
	push_offset(L02b23);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x25);
	eq();
	push_offset(L02b23);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x30);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x39);
	leq();
	bool_and();
	push_offset(L02a35);
	jc(0x1);
	push_base_offset(0xc);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x30);
	sub();
	move(0x2);
	push_offset(L02ac7);
	jmp();

L02a35:
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x61);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x66);
	leq();
	bool_and();
	push_offset(L02a80);
	jc(0x1);
	push_base_offset(0xc);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x61);
	sub();
	push_byte(0xa);
	add();
	move(0x2);
	push_offset(L02ac7);
	jmp();

L02a80:
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x41);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x46);
	leq();
	bool_and();
	push_offset(L02b23);
	jc(0x1);
	push_base_offset(0xc);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	load(0x0);
	push_byte(0x41);
	sub();
	push_byte(0xa);
	add();
	move(0x2);

L02ac7:
	push_dword(0x400000);
	push_word(0x6100);
	add();
	push_word(0x100);
	sub();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	shl();
	add();
	push_offset(L00790);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_base_offset(0x4);
	load(0x2);
	cmd_68();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x18);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	move(0x2);
	push_offset(L029b5);
	jmp();

L02b23:
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	load(0x0);
	move(0x0);
	push_base_offset(0x18);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L029b5);
	jmp();

L02b5b:
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	load(0x0);
	move(0x0);

L02b75:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L02b8e:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x64);
	mul();
	push_byte(0x64);
	mul();
	push_word(0x3e8);
	mul();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x64);
	mul();
	push_word(0x3e8);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x3e8);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x14);
	load(0x2);
	push_string("%08X");
	cmd_6f();
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L02be7:
	load_base();
	push_word(0x138);
	add();
	store_base();
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x134);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x130);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x128);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x124);
	move_arg(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_string("登録済み文字列の出力先");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L02d2d);
	jc(0x1);
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x0);
	push_byte(0x64);
	push_string("第一管理番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02d2d);
	jc(0x1);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x64);
	push_string("第二管理番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02d2d);
	jc(0x1);
	push_base_offset(0x128);
	load(0x2);
	push_byte(0x0);
	push_byte(0x64);
	push_string("第三管理番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02d2d);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	push_word(0x3e8);
	push_string("第四管理番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02d2d);
	jc(0x1);
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_offset(L02b8e);
	call();
	push_base_offset(0x120);
	push_word(0x7c0);
	load(0x2);
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x138);
	move_arg(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L02cfa);
	jc(0x1);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x120);
	push_byte(0x9);
	add();
	cmd_6a();
	push_offset(L02d21);
	jmp();

L02cfa:
	push_byte(0x0);
	push_offset(L02d21);
	jc(0x0);
	push_base_offset(0x124);
	load(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x100);
	push_string("指定された管理番号 [ %d , %d , %d , %d ] に文字列は登録されていません");
	cmd_6f();
	push_base_offset(0x100);
	usr1(0x80);

L02d21:
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00736);
	call();

L02d2d:
	push_byte(0x0);
	load_base();
	push_word(0x138);
	sub();
	store_base();
	ret();

L02d36:
	load_base();
	push_word(0x118);
	add();
	store_base();
	push_base_offset(0x118);
	move_arg(0x2);
	push_base_offset(0x114);
	push_byte(0x0);
	move(0x2);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_byte(0x0);
	push_offset(L02ee5);
	jc(0x0);
	push_word(0xae0);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	cmd_6a();
	push_word(0xadc);
	push_word(0xae0);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x118);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(0x43f4c);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02ee5);
	jc(0x1);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_byte(0x10);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x8540);
	add();
	load(0x2);
	bool_or();
	push_offset(L02ede);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x8548);
	add();
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L02ede:
	push_base_offset(0x114);
	push_byte(0x1);
	move(0x2);

L02ee5:
	push_base_offset(0x114);
	load(0x2);
	load_base();
	push_word(0x118);
	sub();
	store_base();
	ret();

L02ef1:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02d36);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L02f10:
	load_base();
	push_word(0x148);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x40);
	move_arg(0x2);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_byte(0x0);
	push_offset(L03075);
	jc(0x0);
	push_word(0xae0);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	cmd_6a();
	push_word(0xadc);
	push_word(0xae0);
	move(0x2);
	push_base_offset(0x3c);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x38);
	memcpy();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	sub();
	push_byte(0x1);
	eq();
	push_offset(L02fd0);
	jc(0x1);
	push_word(0xb10);
	push_base_offset(0x3c);
	push_byte(0x2c);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_offset(L02fe6);
	jmp();

L02fd0:
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	move(0x2);

L02fe6:
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(0x43f4c);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0301d);
	jc(0x0);
	push_string("処理を続行できない為、終了します");
	usr1(0x80);
	push_base_offset(0x148);
	push_byte(0x4);
	move(0x2);
	push_offset(L0307c);
	jmp();

L0301d:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	push_base_offset(0x3c);
	push_byte(0x34);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_base_offset(0x3c);
	push_byte(0x34);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);

L03075:
	push_base_offset(0x148);
	push_byte(0x0);
	move(0x2);

L0307c:
	push_base_offset(0x148);
	load(0x2);
	load_base();
	push_word(0x148);
	sub();
	store_base();
	ret();

L03088:
	load_base();
	push_word(0x110);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xad4);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_byte(0x0);
	push_offset(L0324e);
	jc(0x0);
	push_word(0xae0);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	cmd_6a();
	push_word(0xadc);
	push_word(0xae0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L0313c);
	jc(0x1);
	push_dword(0x43f2c);
	load(0x2);
	call();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6d38);
	add();
	push_word(0x100);
	push_byte(0x18);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_word(0x520);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xbe0);
	push_byte(0x1);
	move(0x2);

L0313c:
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_word(0xb14);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	push_word(0xb14);
	load(0x2);
	sub();
	push_byte(0x38);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	push_word(0xb14);
	load(0x2);
	move(0x2);
	push_word(0xb10);
	push_word(0xb18);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8544);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8548);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_dword(0x85c8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(0x43f4c);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03206);
	jc(0x0);
	push_string("処理を続行できない為、終了します");
	usr1(0x80);
	push_base_offset(0x110);
	push_byte(0x4);
	move(0x2);
	push_offset(L03255);
	jmp();

L03206:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);

L0324e:
	push_base_offset(0x110);
	push_byte(0x0);
	move(0x2);

L03255:
	push_base_offset(0x110);
	load(0x2);
	load_base();
	push_word(0x110);
	sub();
	store_base();
	ret();

L03261:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0xaa4);
	push_dword(0x9fab8);
	push_dword(0x24630);
	add();
	load(0x2);
	move(0x2);
	push_byte(0x4);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L03280:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_dword(0x10000);
	push_string("シーン番号");
	push_offset(L008b8);
	call();
	push_offset(L032e3);
	jc(0x1);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L032da);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("scene._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_offset(L032e3);
	jmp();

L032da:
	push_offset(L03261);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L032e3:
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L032ee:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03314);
	jc(0x1);
	push_dword(0x45c10);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_offset(L0331d);
	jmp();

L03314:
	push_dword(0x45c10);
	push_word(0x100);
	memclr();

L0331d:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L03323:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L032ee);
	call();
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L03342:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03370);
	jc(0x1);
	push_dword(0x45c10);
	push_base_offset(0x4);
	load(0x2);
	cmd_69();
	push_offset(L00736);
	call();
	push_offset(L0337e);
	jmp();

L03370:
	push_dword(0x45c10);
	load(0x0);
	push_byte(0x0);
	eq();
	push_offset(L00736);
	call();

L0337e:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L03386:
	load_base();
	push_word(0x204);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x104);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L033b7);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("%d");
	cmd_6f();
	push_base_offset(0x204);
	push_base_offset(0x100);
	push_offset(L00a33);
	call();
	push_base_offset(0x204);
	usr1(0x80);

L033b7:
	push_byte(0x0);
	load_base();
	push_word(0x204);
	sub();
	store_base();
	ret();

L033c0:
	load_base();
	push_word(0x104);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L033e7);
	jc(0x0);
	push_base_offset(0x104);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L00a33);
	call();
	push_base_offset(0x104);
	usr1(0x80);

L033e7:
	push_byte(0x0);
	load_base();
	push_word(0x104);
	sub();
	store_base();
	ret();

L033f0:
	load_base();
	push_word(0x10c);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_offset(L0089b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L006e6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_word(0x400);
	push_byte(0x1);
	add();
	push_string("データサイズ");
	push_offset(L008b8);
	call();
	push_offset(L03444);
	jc(0x1);
	push_base_offset(0x10c);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00a33);
	call();
	push_base_offset(0x10c);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_7b();

L03444:
	push_byte(0x0);
	load_base();
	push_word(0x10c);
	sub();
	store_base();
	ret();

L0344d:
	load_base();
	push_word(0x930);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x92c);
	move_arg(0x2);
	push_base_offset(0x928);
	push_byte(0x0);
	sys1(0x3d);
	push_base_offset(0x928);
	push_base_offset(0x61c);
	push_string("%sScript\\CVTD\\");
	cmd_6f();
	push_base_offset(0x61c);
	cmd_6d();
	push_base_offset(0x61c);
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);

L0347a:
	push_base_offset(0x310);
	push_string("変換済みファイル");
	push_string("*");
	push_string("コンパイル済みスクリプトファイルの選択");
	push_base_offset(0x61c);
	push_byte(0x0);
	sys1(0x3b);
	push_base_offset(0x930);
	move_arg(0x2);
	push_base_offset(0x930);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L034cc);
	jc(0x1);
	push_base_offset(0x310);
	cmd_6d();
	push_base_offset(0x310);
	push_base_offset(0x61c);
	push_base_offset(0x4);
	load(0x2);
	memcmp();
	push_offset(L034bd);
	jc(0x0);
	push_string("対象外のファイルが指定されました");
	usr1(0x80);
	push_offset(L0347a);
	jmp();

L034bd:
	push_base_offset(0x92c);
	load(0x2);
	push_base_offset(0x310);
	push_base_offset(0x4);
	load(0x2);
	add();
	cmd_6a();

L034cc:
	push_base_offset(0x930);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00736);
	call();
	push_byte(0x0);
	load_base();
	push_word(0x930);
	sub();
	store_base();
	ret();

L034e1:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x3c0);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L0350d);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L0350d:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L03515:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L0089b);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0352b:
	load_base();
	push_word(0x724);
	add();
	store_base();
	push_offset(L006e6);
	call();
	push_base_offset(0x624);
	move_arg(0x2);
	push_base_offset(0x624);
	load(0x2);
	push_offset(L00790);
	call();
	push_base_offset(0x620);
	move_arg(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x61c);
	push_base_offset(0x310);
	push_base_offset(0x620);
	load(0x2);
	sys1(0x2b);
	push_base_offset(0x310);
	push_base_offset(0x61c);
	push_base_offset(0x724);
	push_string("%s%s");
	cmd_6f();
	push_base_offset(0x724);
	push_string("bs5.h");
	cmd_69();
	push_offset(L035b6);
	jc(0x0);
	push_offset(L006e6);
	call();
	push_dword(0x9fab8);
	push_word(0xc4);
	add();
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_base_offset(0x624);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_base_offset(0x620);
	load(0x2);
	move(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L035b6);
	jc(0x1);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L035b6:
	push_byte(0x0);
	load_base();
	push_word(0x724);
	sub();
	store_base();
	ret();
