	load_base();
	push_word(0x1a4);
	add();
	store_base();
	sys1(0x46);
	push_dword(0x42768);
	push_byte(0x5);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x5);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3e1a0);
	push_byte(0x24);
	push_byte(0x3c);
	mul();
	memclr();
	push_base_offset(0x18c);
	push_word(0x500);
	push_byte(0x2);
	sar();
	push_word(0x500);
	push_byte(0x1);
	sar();
	push_word(0x500);
	push_byte(0x2);
	sar();
	push_byte(0x3);
	mul();
	push_word(0x500);
	push_byte(0x2);
	sar();
	push_word(0x500);
	push_byte(0x1);
	sar();
	push_word(0x500);
	push_byte(0x2);
	sar();
	push_byte(0x3);
	mul();
	push_word(0x500);
	push_byte(0x2);
	sar();
	push_word(0x500);
	push_byte(0x1);
	sar();
	push_word(0x500);
	push_byte(0x2);
	sar();
	push_byte(0x3);
	mul();
	cmd_0c(0x2, 0x9);
	push_base_offset(0x168);
	push_word(0x2d0);
	push_byte(0x2);
	sar();
	push_word(0x2d0);
	push_byte(0x2);
	sar();
	push_word(0x2d0);
	push_byte(0x2);
	sar();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_word(0x2d0);
	push_byte(0x2);
	sar();
	push_byte(0x3);
	mul();
	push_word(0x2d0);
	push_byte(0x2);
	sar();
	push_byte(0x3);
	mul();
	push_word(0x2d0);
	push_byte(0x2);
	sar();
	push_byte(0x3);
	mul();
	cmd_0c(0x2, 0x9);

L000bf:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L0047c);
	jc(0x0);
	sys1(0x4);
	push_base_offset(0x19c);
	move_arg(0x2);
	push_base_offset(0x140);
	push_byte(0x24);
	push_byte(0x4);
	mul();
	memclr();
	push_base_offset(0x198);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	move(0x2);

L000e9:
	push_base_offset(0x20);
	sys1(0x49);
	push_offset(L002fa);
	jc(0x1);
	push_base_offset(0x1a0);
	push_byte(0x0);
	move(0x2);

L000fa:
	push_base_offset(0x1c);
	push_dword(0x3e1a0);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x3c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L002e0);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	eq();
	push_offset(L002e0);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L001bf);
	jc(0x0);
	push_base_offset(0x18);
	push_base_offset(0x20);
	load(0x2);
	grp1(0x16);
	push_offset(L000e9);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x18);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x18);
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x1e);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x38);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x38);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x190);
	push_dword(-0x1);
	move(0x2);
	push_offset(L0029d);
	jmp();

L001bf:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x40);
	gt();
	push_offset(L002e0);
	jc(0x0);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x38);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x38);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x40);
	eq();
	push_offset(L0020c);
	jc(0x1);
	push_base_offset(0x198);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x190);
	push_byte(0x0);
	move(0x2);
	push_offset(L0029d);
	jmp();

L0020c:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_dword(0x42868);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	sub();
	load(0x2);
	ternary();
	push_base_offset(0x190);
	move_arg(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x190);
	load(0x2);
	push_dword(-0x1);
	ternary();
	push_base_offset(0x190);
	move_arg(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_dword(-0x1);
	neq();
	push_offset(L0029d);
	jc(0x1);
	push_base_offset(0x18);
	push_base_offset(0x20);
	load(0x2);
	grp1(0x16);
	push_offset(L000e9);
	jc(0x1);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x18);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x18);
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x53);
	push_base_offset(0x194);
	push_byte(0x1);
	move(0x2);

L0029d:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L000e9);
	jc(0x1);
	push_base_offset(0x1a4);
	push_base_offset(0x20);
	load(0x2);
	grp3(0xf5);
	push_base_offset(0x140);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xb0);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1a4);
	load(0x2);
	move(0x2);
	push_offset(L000e9);
	jmp();

L002e0:
	push_base_offset(0x1a0);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x24);
	lt();
	push_offset(L000fa);
	jc(0x0);

L002fa:
	push_base_offset(0x1a0);
	push_byte(0x0);
	move(0x2);

L00301:
	push_base_offset(0x1c);
	push_dword(0x3e1a0);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x3c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00447);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L00447);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L003a8);
	jc(0x0);
	push_base_offset(0x140);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00447);
	jc(0x1);
	push_base_offset(0xb0);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	lt();
	push_offset(L00447);
	jc(0x0);
	sys1(0x4);
	push_base_offset(0x1a4);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x20);
	add();
	push_base_offset(0x1a4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1a4);
	load(0x2);
	push_word(0xc8);
	add();
	move(0x2);
	push_offset(L00447);
	jmp();

L003a8:
	push_base_offset(0x19c);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	geq();
	push_offset(L00447);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x3c);
	memclr();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x40);
	eq();
	push_offset(L00447);
	jc(0x0);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_dword(0x42868);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	sub();
	load(0x2);
	ternary();
	push_base_offset(0x190);
	move_arg(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x190);
	load(0x2);
	push_dword(-0x1);
	ternary();
	push_base_offset(0x190);
	move_arg(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_dword(-0x1);
	neq();
	push_offset(L00447);
	jc(0x1);
	push_base_offset(0x190);
	load(0x2);
	push_dword(0x7fff0000);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);

L00447:
	push_base_offset(0x1a0);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x24);
	lt();
	push_offset(L00301);
	jc(0x0);
	push_base_offset(0x198);
	load(0x2);
	push_base_offset(0x194);
	load(0x2);
	bool_or();
	push_offset(L000bf);
	jc(0x1);
	push_base_offset(0x198);
	load(0x2);
	grp1(0x0);
	push_offset(L000bf);
	jmp();

L0047c:
	push_dword(0x42768);
	push_byte(0x5);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x42768);
	push_byte(0x5);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	load_base();
	push_word(0x1a4);
	sub();
	store_base();
	ret();
