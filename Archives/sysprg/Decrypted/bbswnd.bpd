	load_base();
	push_word(0x13fc);
	add();
	store_base();
	push_base_offset(0x13f8);
	move_arg(0x2);
	push_base_offset(0x13fc);
	move_arg(0x2);
	push_base_offset(0x13c8);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c4);
	push_byte(0x0);
	move(0x2);
	push_string("sysprg.arc");
	push_string("overlap._bp");
	sys1(0x40);
	push_base_offset(0x12ec);
	move_arg(0x2);
	push_base_offset(0x12e8);
	push_byte(0x3);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x2);
	add();
	mul();
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x12e4);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x8);
	add();
	move(0x2);
	push_base_offset(0x12e0);
	push_byte(0x6);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x2);
	add();
	mul();
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x12dc);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x8);
	add();
	move(0x2);
	push_base_offset(0x12d8);
	push_byte(0x26);
	push_byte(0xf);
	push_byte(0x2);
	add();
	mul();
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x12d4);
	push_byte(0x40);
	move(0x2);
	push_word(0x1c00);
	push_byte(0x18);
	add();
	push_base_offset(0x12e8);
	load(0x2);
	push_base_offset(0x12e4);
	load(0x2);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x1c00);
	push_byte(0x19);
	add();
	push_base_offset(0x12e0);
	load(0x2);
	push_base_offset(0x12dc);
	load(0x2);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x1c00);
	push_byte(0x1a);
	add();
	push_base_offset(0x12d8);
	load(0x2);
	push_base_offset(0x12d4);
	load(0x2);
	push_byte(0x2);
	grp1(0x11);
	push_base_offset(0x12d0);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	push_byte(0x5);
	sub();
	move(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x12d0);
	load(0x2);
	ternary();
	push_base_offset(0x12d0);
	move_arg(0x2);
	push_base_offset(0x12cc);
	push_dword(0x9fa50);
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	sub();
	sub();
	move(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x12cc);
	load(0x2);
	ternary();
	push_base_offset(0x12cc);
	move_arg(0x2);
	push_base_offset(0x5c4);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x12c8);
	move(0x2);
	push_base_offset(0x5c4);
	push_byte(0x1);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0xca8);
	move(0x2);
	push_base_offset(0x5c4);
	push_byte(0x2);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x8d4);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x0);
	add();
	push_byte(0x3);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x4);
	add();
	push_base_offset(0x5c4);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x504);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x504);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x504);
	push_base_offset(0x13f8);
	load(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x1);
	push_word(0x470);
	load(0x2);
	call();
	push_base_offset(0x504);
	push_base_offset(0x12cc);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	push_base_offset(0x13f8);
	load(0x2);
	push_offset(L0183b);
	call();
	push_base_offset(0x3d8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x3d4);
	push_byte(0x0);
	move(0x2);
	push_word(0x434);
	load(0x2);
	push_word(0x1d00);
	push_byte(0x24);
	add();
	push_word(0x1c00);
	push_byte(0x0);
	add();
	ternary();
	push_base_offset(0x3d0);
	move_arg(0x2);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x80);
	push_base_offset(0x3cc);
	move_arg(0x2);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x870);
	grp1(0x85);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x3d0);
	load(0x2);
	grp1(0x86);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1a);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0x88);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x88);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	grp2(0x89);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	grp1(0x87);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x1);
	grp3(0x88);
	push_base_offset(0x3cc);
	load(0x2);
	push_offset(L01255);
	call();
	push_base_offset(0x3cc);
	load(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_offset(L012cf);
	call();
	push_base_offset(0x3cc);
	load(0x2);
	push_base_offset(0x504);
	grp1(0xb7);
	push_base_offset(0x4dc);
	push_base_offset(0x3d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x3cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x3d8);
	push_base_offset(0x3d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	grp1(0x50);
	push_base_offset(0x3c8);
	move_arg(0x2);
	push_base_offset(0x3c8);
	load(0x2);
	push_word(0x2d2);
	push_byte(0x3);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x880);
	grp1(0x56);
	push_base_offset(0x3c8);
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x1);
	add();
	grp1(0x38);
	push_base_offset(0x4d8);
	push_base_offset(0x3d4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x3c8);
	load(0x2);
	move(0x2);
	push_base_offset(0x3d4);
	push_base_offset(0x3d4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	grp1(0x50);
	push_base_offset(0x3c4);
	move_arg(0x2);
	push_base_offset(0x3c4);
	load(0x2);
	push_byte(0x42);
	push_word(0x2ba);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x880);
	grp1(0x56);
	push_base_offset(0x3c4);
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_word(0x1100);
	push_byte(0x55);
	add();
	grp1(0x38);
	push_base_offset(0x4d8);
	push_base_offset(0x3d4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x3c4);
	load(0x2);
	move(0x2);
	push_base_offset(0x3d4);
	push_base_offset(0x3d4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xe8);
	push_base_offset(0x3c4);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x2);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x13f4);
	push_word(0x1c00);
	push_byte(0x1);
	add();
	grp1(0x16);
	push_base_offset(0x3c0);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x8d4);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8d4);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0xe8);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe8);
	push_base_offset(0x3c4);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x3);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x13f4);
	push_word(0x1c00);
	push_byte(0x5);
	add();
	grp1(0x16);
	push_base_offset(0x3c0);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x8d4);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8d4);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0xe8);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe8);
	push_base_offset(0x3c4);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x4);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x13f4);
	push_word(0x1c00);
	push_byte(0x9);
	add();
	grp1(0x16);
	push_base_offset(0x3c0);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x8d4);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8d4);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0xe8);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe8);
	push_base_offset(0x3c4);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_byte(0x5);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x13f4);
	push_word(0x1c00);
	push_byte(0xd);
	add();
	grp1(0x16);
	push_base_offset(0x3c0);
	push_byte(0x3);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x8d4);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8d4);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x13f4);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0xe8);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x0);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0x4);
	push_byte(0x34);
	mul();
	add();
	push_word(0x2d2);
	push_byte(0x1b);
	push_byte(0x65);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x1);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0x5);
	push_byte(0x34);
	mul();
	add();
	push_word(0x338);
	push_byte(0x1b);
	push_byte(0x6f);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x2);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0x6);
	push_byte(0x34);
	mul();
	add();
	push_word(0x3a8);
	push_byte(0x1b);
	push_byte(0x6f);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x3);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0x7);
	push_byte(0x34);
	mul();
	add();
	push_word(0x418);
	push_byte(0x1b);
	push_byte(0x6f);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x4);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0x8);
	push_byte(0x34);
	mul();
	add();
	push_word(0x488);
	push_byte(0x1b);
	push_byte(0x6f);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x5);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0x9);
	push_byte(0x34);
	mul();
	add();
	push_word(0x1a0);
	push_byte(0x1b);
	push_byte(0x65);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x6);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0xa);
	push_byte(0x34);
	mul();
	add();
	push_word(0x206);
	push_byte(0x1b);
	push_byte(0x65);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x8);
	add();
	cmd_0c(0x2, 0x2);
	push_word(0x434);
	load(0x2);
	push_word(0x47e);
	push_word(0x38a);
	ternary();
	push_base_offset(0x13c0);
	move_arg(0x2);
	push_base_offset(0x3c0);
	push_byte(0xb);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x13c0);
	load(0x2);
	push_word(0x287);
	push_byte(0x79);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x9);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0xc);
	push_byte(0x34);
	mul();
	add();
	push_word(0x404);
	push_word(0x287);
	push_byte(0x79);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xe4);
	push_word(0x1c00);
	push_byte(0x11);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0xa);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c0);
	push_byte(0xd);
	push_byte(0x34);
	mul();
	add();
	push_word(0x47e);
	push_word(0x287);
	push_byte(0x79);
	push_byte(0x47);
	push_base_offset(0x3c4);
	push_base_offset(0xe4);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0x4);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0x5);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0x6);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0x7);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0x8);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0x9);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0xa);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0xb);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0xc);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0x3c0);
	push_byte(0xd);
	push_byte(0x34);
	mul();
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	push_byte(0x1);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xdc);
	push_base_offset(0x4d8);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xd8);
	push_base_offset(0x3d4);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x4dc);
	push_base_offset(0xdc);
	push_base_offset(0xd8);
	push_base_offset(0x3d8);
	load(0x2);
	push_word(0x96);
	push_word(0x47c);
	load(0x2);
	call();
	push_base_offset(0x3cc);
	load(0x2);
	grp2(0xb8);
	push_base_offset(0xd4);
	move_arg(0x2);
	push_word(0x46c);
	push_base_offset(0xd4);
	load(0x2);
	move(0x2);
	push_dword(0x42ae4);
	push_base_offset(0x3cc);
	load(0x2);
	move(0x2);
	push_word(0x434);
	load(0x2);
	push_offset(L008cb);
	jc(0x0);
	push_byte(0x0);
	push_offset(L008cb);
	jc(0x1);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L008cb);
	jc(0x0);
	push_byte(0x32);
	push_byte(0x0);
	add();
	push_word(0x4a0);
	load(0x2);
	add();
	push_offset(L01d28);
	call();

L008cb:
	push_word(0x4e0);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xac);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xa0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x9c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x40);
	move(0x2);
	push_base_offset(0x74);
	push_word(0x80);
	move(0x2);
	push_base_offset(0x20);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13d0);
	push_byte(0x0);
	move(0x2);

L00921:
	push_base_offset(0x20);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_base_offset(0x13d0);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x26);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x1c);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_base_offset(0x13d0);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x28);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_base_offset(0x13d0);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x21);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_base_offset(0x13d0);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x22);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x13d0);
	push_base_offset(0x13d0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13d0);
	load(0x2);
	push_byte(0xc);
	lt();
	push_offset(L00921);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_byte(0x26);
	ternary();
	push_base_offset(0x60);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x28);
	ternary();
	push_base_offset(0x58);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	ternary();
	push_base_offset(0x50);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_byte(0x22);
	ternary();
	push_base_offset(0x48);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x60);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x58);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x50);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x48);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_byte(0x26);
	push_base_offset(0x20);
	load(0x2);
	bool_zero();
	sys2(0x10);
	push_byte(0x28);
	push_base_offset(0x1c);
	load(0x2);
	bool_zero();
	sys2(0x10);
	push_byte(0x21);
	push_base_offset(0x18);
	load(0x2);
	bool_zero();
	sys2(0x10);
	push_byte(0x22);
	push_base_offset(0x14);
	load(0x2);
	bool_zero();
	sys2(0x10);

L00a6b:
	push_base_offset(0xac);
	load(0x2);
	push_offset(L00a9f);
	jc(0x1);
	push_base_offset(0x504);
	push_base_offset(0x13f8);
	load(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x1);
	push_word(0x470);
	load(0x2);
	call();
	push_base_offset(0x504);
	push_base_offset(0x12cc);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	push_base_offset(0x13f8);
	load(0x2);
	push_offset(L0183b);
	call();

L00a9f:
	push_base_offset(0xac);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xd4);
	load(0x2);
	push_base_offset(0x504);
	grp2(0xba);

L00ab0:
	push_base_offset(0x78);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x74);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0x60);
	sys1(0x12);
	push_base_offset(0x40);
	move_arg(0x2);
	push_base_offset(0x58);
	sys1(0x12);
	push_base_offset(0x3c);
	move_arg(0x2);
	push_base_offset(0x50);
	sys1(0x12);
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x48);
	sys1(0x12);
	push_base_offset(0x34);
	move_arg(0x2);

L00af0:
	sys1(0x5f);
	push_word(0x460);
	push_byte(0x0);
	move(0x2);
	push_word(0x4f4);
	load(0x2);
	push_offset(L0119c);
	jc(0x0);
	push_word(0x404);
	load(0x2);
	push_offset(L00af0);
	jc(0x0);
	push_base_offset(0x78);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x68);
	move_arg(0x2);
	push_base_offset(0x74);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x64);
	move_arg(0x2);
	push_base_offset(0x60);
	sys1(0x12);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x58);
	sys1(0x12);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x50);
	sys1(0x12);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x48);
	sys1(0x12);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13d8);
	sys1(0x49);
	push_offset(L00bee);
	jc(0x1);
	push_base_offset(0x13d8);
	load(0x2);
	push_byte(0xc);
	eq();
	push_offset(L00b84);
	jc(0x1);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xa8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xa4);
	push_byte(0x2);
	move(0x2);
	push_offset(L00d6d);
	jmp();

L00b84:
	push_base_offset(0x13d8);
	load(0x2);
	push_byte(0xb);
	eq();
	push_offset(L00baa);
	jc(0x1);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xa8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xa4);
	push_byte(0x0);
	move(0x2);
	push_offset(L00d6d);
	jmp();

L00baa:
	push_word(0x434);
	load(0x2);
	push_offset(L00bee);
	jc(0x0);
	push_base_offset(0x13c8);
	push_base_offset(0x13d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x13d8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L0119c);
	jc(0x0);
	push_base_offset(0x13c8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x20);
	push_word(0xae);
	add();
	load(0x1);
	push_base_offset(0x13c4);
	load(0x2);
	ternary();
	push_base_offset(0x13c4);
	move_arg(0x2);
	push_offset(L01188);
	jmp();

L00bee:
	push_base_offset(0x3c0);
	push_byte(0xe);
	push_byte(0x3);
	push_base_offset(0x12ec);
	load(0x2);
	call();
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);

L00c02:
	push_base_offset(0xd0);
	push_base_offset(0xd4);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0xd0);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000007);
	eq();
	push_offset(L00c84);
	jc(0x1);
	push_base_offset(0xa8);
	push_base_offset(0xd0);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa4);
	push_base_offset(0xd0);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0xd0);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0xd0);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00d6d);
	jc(0x0);
	push_offset(L00c02);
	jmp();

L00c84:
	push_base_offset(0xd0);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L00cd9);
	jc(0x1);
	push_base_offset(0xa8);
	push_base_offset(0xd0);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa4);
	push_base_offset(0xd0);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00d6d);
	jc(0x0);
	push_offset(L00c02);
	jmp();

L00cd9:
	push_base_offset(0xd0);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L00d5d);
	jc(0x1);
	push_base_offset(0x13d8);
	push_base_offset(0xd0);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x13d4);
	push_base_offset(0xd0);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x13d8);
	load(0x2);
	push_base_offset(0xa0);
	load(0x2);
	eq();
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x9c);
	load(0x2);
	eq();
	bool_and();
	push_offset(L00c02);
	jc(0x0);
	push_base_offset(0xa0);
	push_base_offset(0x13d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x9c);
	push_base_offset(0x13d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x13d8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00c02);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L01d28);
	call();
	push_offset(L00c02);
	jmp();

L00d5d:
	push_base_offset(0xd0);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00c02);
	jc(0x1);

L00d6d:
	push_base_offset(0xc4);
	push_base_offset(0xd4);
	load(0x2);
	grp1(0xbc);
	push_word(0x4e0);
	push_base_offset(0xc4);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	bool_zero();
	bool_and();
	push_base_offset(0x10);
	load(0x2);
	bool_zero();
	bool_and();
	push_base_offset(0x68);
	load(0x2);
	push_base_offset(0x70);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0x64);
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	eq();
	bool_and();
	move(0x2);
	push_word(0x4e0);
	load(0x2);
	push_offset(L00af0);
	jc(0x0);
	push_word(0x444);
	load(0x2);
	push_offset(L00a6b);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L00a6b);
	jc(0x0);
	push_word(0x460);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L00e2e);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00e2e);
	jc(0x1);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_byte(0x0);
	push_byte(0x0);
	add();
	push_byte(0x0);
	push_byte(0x3);
	add();
	ternary();
	push_offset(L01d28);
	call();

L00e2e:
	push_base_offset(0x10);
	load(0x2);
	push_offset(L00e8b);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00e8b);
	jc(0x1);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00e8b);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L00e8b);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00e8b);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	eq();
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x4);
	neq();
	bool_and();
	push_offset(L00e8b);
	jc(0x0);
	push_byte(0x78);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L00e8b:
	push_base_offset(0x68);
	load(0x2);
	push_base_offset(0x70);
	load(0x2);
	neq();
	push_offset(L00fad);
	jc(0x0);
	push_base_offset(0x64);
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	neq();
	push_offset(L00fed);
	jc(0x0);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	neq();
	push_offset(L00f27);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	neq();
	push_offset(L00f67);
	jc(0x0);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	neq();
	push_offset(L00fad);
	jc(0x0);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	neq();
	push_offset(L00fed);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L0119c);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01033);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L01089);
	jc(0x0);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L0109a);
	jc(0x0);
	push_offset(L00a6b);
	jmp();

L00f27:
	push_base_offset(0x13d4);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x13d4);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x13d4);
	move_arg(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	eq();
	push_offset(L00ab0);
	jc(0x0);
	push_base_offset(0x12cc);
	push_base_offset(0x13d4);
	load(0x2);
	move(0x2);
	push_offset(L01172);
	jmp();

L00f67:
	push_base_offset(0x13d4);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	leq();
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	ternary();
	push_base_offset(0x13d4);
	move_arg(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	eq();
	push_offset(L00ab0);
	jc(0x0);
	push_base_offset(0x12cc);
	push_base_offset(0x13d4);
	load(0x2);
	move(0x2);
	push_offset(L01172);
	jmp();

L00fad:
	push_base_offset(0x13d4);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x5);
	sub();
	move(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x13d4);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x13d4);
	move_arg(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	eq();
	push_offset(L00ab0);
	jc(0x0);
	push_base_offset(0x12cc);
	push_base_offset(0x13d4);
	load(0x2);
	move(0x2);
	push_offset(L01172);
	jmp();

L00fed:
	push_base_offset(0x13d4);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	leq();
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	ternary();
	push_base_offset(0x13d4);
	move_arg(0x2);
	push_base_offset(0x13d4);
	load(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	eq();
	push_offset(L00ab0);
	jc(0x0);
	push_base_offset(0x12cc);
	push_base_offset(0x13d4);
	load(0x2);
	move(0x2);
	push_offset(L01172);
	jmp();

L01033:
	push_base_offset(0xd4);
	load(0x2);
	push_byte(0x0);
	sys1(0xa8);
	push_base_offset(0xa8);
	load(0x2);
	push_base_offset(0xa4);
	load(0x2);
	push_base_offset(0x3cc);
	load(0x2);
	push_word(0x474);
	load(0x2);
	call();
	push_base_offset(0x13c4);
	move_arg(0x2);
	push_base_offset(0x13c8);
	move_arg(0x2);
	push_base_offset(0xd4);
	load(0x2);
	push_byte(0x1);
	sys1(0xa8);
	push_base_offset(0x13c8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L0119c);
	jc(0x0);
	push_base_offset(0x13c8);
	load(0x2);
	push_dword(0x7fffffff);
	eq();
	push_offset(L00a6b);
	jc(0x0);
	push_offset(L01188);
	jmp();

L01089:
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L01033);
	jc(0x1);
	push_offset(L00a6b);
	jmp();

L0109a:
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L010cd);
	jc(0x1);
	push_base_offset(0x12cc);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x12cc);
	move_arg(0x2);
	push_offset(L01172);
	jmp();

L010cd:
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L01106);
	jc(0x1);
	push_base_offset(0x12cc);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	leq();
	push_base_offset(0x12cc);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	ternary();
	push_base_offset(0x12cc);
	move_arg(0x2);
	push_offset(L01172);
	jmp();

L01106:
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L01139);
	jc(0x1);
	push_base_offset(0x12cc);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x5);
	sub();
	move(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x12cc);
	move_arg(0x2);
	push_offset(L01172);
	jmp();

L01139:
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L00a6b);
	jc(0x1);
	push_base_offset(0x12cc);
	push_base_offset(0x12cc);
	load(0x2);
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	leq();
	push_base_offset(0x12cc);
	load(0x2);
	push_base_offset(0x12d0);
	load(0x2);
	ternary();
	push_base_offset(0x12cc);
	move_arg(0x2);
	push_offset(L01172);
	jmp();

L01172:
	push_base_offset(0x3cc);
	load(0x2);
	push_base_offset(0x12cc);
	load(0x2);
	push_offset(L012cf);
	call();
	push_byte(0x0);
	grp1(0x0);
	push_offset(L00a6b);
	jmp();

L01188:
	push_base_offset(0x4dc);
	push_base_offset(0xdc);
	push_base_offset(0xd8);
	push_base_offset(0x3d8);
	load(0x2);
	push_word(0x478);
	load(0x2);
	call();

L0119c:
	push_dword(0x42ae4);
	push_byte(0x0);
	move(0x2);
	push_word(0x460);
	push_byte(0x1);
	move(0x2);
	push_word(0x4e0);
	push_byte(0x0);
	move(0x2);
	push_word(0x46c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xd4);
	load(0x2);
	grp1(0xb9);
	push_byte(0x26);
	push_byte(0x0);
	sys2(0x10);
	push_byte(0x28);
	push_byte(0x0);
	sys2(0x10);
	push_byte(0x21);
	push_byte(0x0);
	sys2(0x10);
	push_byte(0x22);
	push_byte(0x0);
	sys2(0x10);

L011d9:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L011ef);
	jc(0x0);
	push_word(0x508);
	load(0x2);
	push_offset(L011d9);
	jc(0x0);

L011ef:
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01215);
	jc(0x0);
	push_base_offset(0x4dc);
	push_base_offset(0xdc);
	push_base_offset(0xd8);
	push_base_offset(0x3d8);
	load(0x2);
	push_word(0x96);
	push_word(0x480);
	load(0x2);
	call();

L01215:
	push_base_offset(0x3cc);
	load(0x2);
	grp1(0x81);
	push_base_offset(0x3c8);
	load(0x2);
	grp1(0x51);
	push_base_offset(0x3c4);
	load(0x2);
	grp1(0x51);
	push_word(0x1c00);
	push_byte(0x18);
	add();
	grp1(0x12);
	push_word(0x1c00);
	push_byte(0x19);
	add();
	grp1(0x12);
	push_word(0x1c00);
	push_byte(0x1a);
	add();
	grp1(0x12);
	sys1(0x41);
	push_base_offset(0x13c8);
	load(0x2);
	push_base_offset(0x13c4);
	load(0x2);
	load_base();
	push_word(0x13fc);
	sub();
	store_base();
	ret();

L01255:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_word(0xb9);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0126e:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L012c9);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	geq();
	push_offset(L012c9);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x3d);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c00);
	push_byte(0x17);
	add();
	push_byte(0x1);
	push_byte(0x0);
	grp3(0x89);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5f);
	add();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0126e);
	jmp();

L012c9:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L012cf:
	load_base();
	push_word(0x190);
	add();
	store_base();
	push_base_offset(0x18c);
	move_arg(0x2);
	push_base_offset(0x190);
	move_arg(0x2);
	push_base_offset(0x18c);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	lt();
	push_offset(L01834);
	jc(0x1);
	push_base_offset(0x7c);
	push_word(0x1c00);
	push_byte(0x18);
	add();
	grp1(0x16);
	push_base_offset(0x64);
	push_word(0x1c00);
	push_byte(0x19);
	add();
	grp1(0x16);
	push_base_offset(0x4c);
	push_word(0x1c00);
	push_byte(0x1a);
	add();
	grp1(0x16);
	push_base_offset(0x34);
	push_byte(0x9);
	push_byte(0x64);
	mul();
	push_word(0x5a0);
	load(0x2);
	push_byte(0x1);
	sub();
	add();
	push_word(0x5a0);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x30);
	push_byte(0x2);
	push_byte(0x64);
	mul();
	push_word(0x5a0);
	load(0x2);
	push_byte(0x1);
	sub();
	add();
	push_word(0x5a0);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x2);
	push_byte(0x64);
	mul();
	push_word(0x5a0);
	load(0x2);
	push_byte(0x1);
	sub();
	add();
	push_word(0x5a0);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x4);
	push_byte(0x64);
	mul();
	push_word(0x5a4);
	load(0x2);
	push_byte(0x1);
	sub();
	add();
	push_word(0x5a4);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x2);
	push_byte(0x64);
	mul();
	push_word(0x5a4);
	load(0x2);
	push_byte(0x1);
	sub();
	add();
	push_word(0x5a4);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x20);
	push_byte(0x2);
	push_byte(0x64);
	mul();
	push_word(0x5a4);
	load(0x2);
	push_byte(0x1);
	sub();
	add();
	push_word(0x5a4);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x1c);
	push_word(0x8d);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x18);
	push_word(0xbe);
	push_byte(0x10);
	push_word(0x5a0);
	load(0x2);
	sub();
	push_byte(0x1);
	sar();
	add();
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x14);
	push_word(0xfd);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x10);
	push_word(0xbe);
	push_byte(0x10);
	push_word(0x5a0);
	load(0x2);
	sub();
	push_byte(0x1);
	sar();
	add();
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0xc);
	push_byte(0x50);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x8);
	push_word(0xd7);
	push_byte(0x0);
	sub();
	move(0x2);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x2);
	push_byte(0x2);
	grp2(0xf);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a4);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x2);
	push_byte(0x2);
	grp2(0xf);
	push_word(0x434);
	load(0x2);
	push_word(0x1d00);
	push_byte(0x24);
	add();
	push_word(0x1c00);
	push_byte(0x0);
	add();
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x180);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x188);
	push_byte(0x0);
	move(0x2);

L01470:
	push_base_offset(0x18c);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	lt();
	push_offset(L017f0);
	jc(0x1);
	push_word(0x1c00);
	push_byte(0x18);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	add();
	push_base_offset(0x7c);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x7c);
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x1e);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01562);
	jc(0x1);
	push_base_offset(0x17c);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);
	push_offset(L01562);
	jc(0x0);
	push_word(0x1c00);
	push_byte(0x18);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x17c);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x24);
	add();
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	push_word(0xc0);
	push_byte(0x0);
	grp3(0x9c);

L01562:
	push_base_offset(0x190);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	add();
	push_word(0x1c00);
	push_byte(0x18);
	add();
	push_word(0x80);
	push_byte(0x0);
	grp3(0x89);
	push_word(0x1c00);
	push_byte(0x19);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	add();
	push_base_offset(0x64);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x64);
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x1e);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0169e);
	jc(0x1);
	push_base_offset(0x17c);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	sys1(0xdd);
	push_offset(L0169e);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x184);
	move_arg(0x2);
	push_word(0x1c00);
	push_byte(0x19);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x17c);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x24);
	add();
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x184);
	load(0x2);
	push_word(0xc0);
	push_byte(0x0);
	grp3(0x9c);

L0169e:
	push_base_offset(0x190);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	add();
	push_word(0x1c00);
	push_byte(0x19);
	add();
	push_word(0x80);
	push_byte(0x0);
	grp3(0x89);
	push_word(0x1c00);
	push_byte(0x1a);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	add();
	push_base_offset(0x4c);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4c);
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x1e);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0179a);
	jc(0x1);
	push_base_offset(0x17c);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	sys1(0xdd);
	push_offset(L0179a);
	jc(0x0);
	push_word(0x1c00);
	push_byte(0x1a);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x17c);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a4);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x24);
	add();
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_word(0xc0);
	push_byte(0x0);
	grp3(0x9c);

L0179a:
	push_base_offset(0x190);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	add();
	push_word(0x1c00);
	push_byte(0x1a);
	add();
	push_word(0x80);
	push_byte(0x0);
	grp3(0x89);
	push_base_offset(0x188);
	push_base_offset(0x188);
	load(0x2);
	push_byte(0x5f);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_base_offset(0x18c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x180);
	push_base_offset(0x180);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x180);
	load(0x2);
	push_byte(0x5);
	lt();
	push_offset(L01470);
	jc(0x0);

L017f0:
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a0);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0xf);
	push_word(0x90c);
	load(0x2);
	push_word(0x914);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	load(0x2);
	push_word(0x5a4);
	load(0x2);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0xf);

L01834:
	load_base();
	push_word(0x190);
	sub();
	store_base();
	ret();

L0183b:
	load_base();
	push_word(0x1c0);
	add();
	store_base();
	push_base_offset(0x1b4);
	move_arg(0x2);
	push_base_offset(0x1b8);
	move_arg(0x2);
	push_base_offset(0x1bc);
	move_arg(0x2);
	push_base_offset(0x1c0);
	move_arg(0x2);
	push_base_offset(0x1b0);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1b0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1b0);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1b0);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x1a4);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1b0);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x1a4);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x34);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x164);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1b0);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x164);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1b0);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x164);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xa0);
	push_base_offset(0x1c0);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x0);
	add();
	push_byte(0x4);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x8);
	add();
	push_base_offset(0xa0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_byte(0x40);
	mul();
	add();
	push_base_offset(0x1a4);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x164);
	push_byte(0x0);
	add();
	push_base_offset(0x1bc);
	load(0x2);
	push_byte(0x1);
	geq();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x8);
	add();
	push_word(0x290);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0xc);
	add();
	push_word(0x8d);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x1);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x1);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x164);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x164);
	push_byte(0x0);
	add();
	push_base_offset(0x1bc);
	load(0x2);
	push_base_offset(0x1b8);
	load(0x2);
	lt();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x8);
	add();
	push_word(0x24d);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0xc);
	add();
	push_word(0x8d);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x5);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x5);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x164);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x164);
	push_byte(0x0);
	add();
	push_base_offset(0x1bc);
	load(0x2);
	push_byte(0x1);
	geq();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x8);
	add();
	push_word(0x2bc);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0xc);
	add();
	push_word(0x8d);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x9);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x9);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0x9);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x164);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x164);
	push_byte(0x0);
	add();
	push_base_offset(0x1bc);
	load(0x2);
	push_base_offset(0x1b8);
	load(0x2);
	lt();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x8);
	add();
	push_word(0x223);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0xc);
	add();
	push_word(0x8d);
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0xd);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0xd);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1c00);
	push_byte(0xd);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x164);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x164);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1a4);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	load_base();
	push_word(0x1c0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L01ca9);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L01cc5);
	jmp();

L01ca9:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L01cc5);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L01cc5:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1f4);
	add();
	move(0x2);

L01cef:
	sys1(0x4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	geq();
	push_offset(L01d16);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L01d16);
	jc(0x0);
	sys1(0x5f);
	push_offset(L01cef);
	jmp();

L01d16:
	sys1(0x5f);
	push_word(0x450);
	load(0x2);
	push_offset(L01d16);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01d28:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L0207e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L0207e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L0207e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L0207e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L01ed7);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L01e4a);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L01ea8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L01e79);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L01f06);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L01f35);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L01f64);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L01f93);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L01fc2);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L01ff1);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L02020);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L0204f);
	jc(0x0);
	push_offset(L020ee);
	jmp();
	push_offset(L0207e);
	jmp();

L01e4a:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01e79:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01ea8:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01ed7:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01f06:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01f35:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01f64:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01f93:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01fc2:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L01ff1:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L02020:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L0204f:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L0207e);
	jmp();

L0207e:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L020b9);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L020b9);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L020b9:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L020ee:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
