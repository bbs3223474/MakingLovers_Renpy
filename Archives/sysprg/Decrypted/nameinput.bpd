	load_base();
	push_word(0x3d0);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x3c8);
	move_arg(0x2);
	push_byte(0x12);
	push_base_offset(0x3c8);
	load(0x2);
	call();
	push_offset(L00473);
	call();
	push_base_offset(0xb4);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x3c4);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x4);
	add();
	push_base_offset(0xb4);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x74);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x14);
	add();
	push_byte(0x2);
	push_word(0x200);
	or();
	push_byte(0x40);
	or();
	push_word(0x80);
	or();
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x74);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x74);
	push_offset(L00687);
	call();
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x80);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0x880);
	push_byte(0x8);
	add();
	grp1(0x86);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_word(0x100);
	push_byte(0x0);
	push_word(0x790);
	grp1(0x85);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1a);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0x88);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x88);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	grp2(0x89);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	grp1(0x87);
	push_base_offset(0x4c);
	load(0x2);
	push_base_offset(0x74);
	grp1(0xb7);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x1);
	grp1(0x84);
	push_word(0x1f4);
	push_offset(L00a8a);
	call();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x3cc);
	move_arg(0x2);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x48);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x44);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x3c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L00197:
	push_offset(L00473);
	call();
	push_base_offset(0x4c);
	load(0x2);
	grp2(0xb8);
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x74);
	grp2(0xba);
	push_base_offset(0x44);
	load(0x2);
	push_offset(L001c6);
	jc(0x1);
	push_byte(0x1);
	sys2(0x1e);
	push_base_offset(0x44);
	push_byte(0x0);
	move(0x2);

L001c6:
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);

L001cd:
	sys1(0x5f);

L001cf:
	push_base_offset(0x34);
	push_base_offset(0x38);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0x34);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L0021a);
	jc(0x1);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_offset(L002af);
	jmp();

L0021a:
	push_base_offset(0x34);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L0029f);
	jc(0x1);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	push_base_offset(0x40);
	load(0x2);
	eq();
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	push_base_offset(0x3c);
	load(0x2);
	eq();
	bool_and();
	push_offset(L001cf);
	jc(0x0);
	push_base_offset(0x40);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x3c);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L001cf);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L00ada);
	call();
	push_offset(L001cf);
	jmp();

L0029f:
	push_base_offset(0x34);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L001cf);
	jc(0x1);

L002af:
	push_base_offset(0x28);
	push_base_offset(0x38);
	load(0x2);
	grp1(0xbc);
	push_base_offset(0x28);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L001cd);
	jc(0x0);
	push_base_offset(0x38);
	load(0x2);
	grp1(0xb9);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	eq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	eq();
	bool_or();
	push_offset(L00308);
	jc(0x1);
	push_byte(0x0);
	push_byte(0x0);
	add();
	push_offset(L00ada);
	call();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L00308);
	jc(0x0);
	push_byte(0x78);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L00308:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0036e);
	jc(0x1);
	push_word(0x880);
	push_byte(0x9);
	add();
	push_byte(0x0);
	grp1(0x13);
	push_base_offset(0x4c);
	load(0x2);
	push_base_offset(0x74);
	grp1(0xb7);
	push_byte(0x0);
	grp1(0x0);
	push_byte(0x20);
	push_word(0x118);
	add();
	push_word(0x125);
	push_byte(0xa);
	add();
	push_word(0x144);
	push_offset(L00520);
	call();
	push_base_offset(0x3cc);
	move_arg(0x2);
	push_base_offset(0x3cc);
	load(0x2);
	push_dword(0x40000000);
	and();
	push_offset(L0035d);
	jc(0x1);
	push_offset(L00473);
	call();
	push_offset(L0037b);
	jmp();

L0035d:
	push_base_offset(0x44);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x1);
	and();
	move(0x2);
	push_offset(L00197);
	jmp();

L0036e:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L003bc);
	jc(0x1);

L0037b:
	push_word(0x880);
	push_byte(0xa);
	add();
	push_byte(0x0);
	grp1(0x13);
	push_base_offset(0x4c);
	load(0x2);
	push_base_offset(0x74);
	grp1(0xb7);
	push_byte(0x0);
	grp1(0x0);
	push_byte(0x20);
	push_word(0x122);
	add();
	push_word(0x2ef);
	push_byte(0xa);
	add();
	push_word(0x144);
	push_offset(L00520);
	call();
	push_base_offset(0x3cc);
	move_arg(0x2);
	push_base_offset(0x44);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x1);
	and();
	move(0x2);
	push_offset(L00197);
	jmp();

L003bc:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L003e9);
	jc(0x1);
	push_byte(0x78);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_byte(0x20);
	push_word(0x118);
	add();
	push_word(0x6a8);
	cmd_6a();
	push_byte(0x20);
	push_word(0x122);
	add();
	push_word(0x728);
	cmd_6a();
	push_offset(L00197);
	jmp();

L003e9:
	push_string("sysprg.arc");
	push_string("yesnownd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0xd);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x3d0);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x3d0);
	load(0x2);
	push_offset(L00197);
	jc(0x1);
	push_word(0x1f4);
	push_offset(L00a8a);
	call();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x3cc);
	move_arg(0x2);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x4c);
	load(0x2);
	push_word(0x100);
	push_base_offset(0x48);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x3cc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x4c);
	load(0x2);
	grp1(0x81);
	push_byte(0x13);
	push_base_offset(0x3c8);
	load(0x2);
	call();
	sys1(0x41);
	load_base();
	push_word(0x3d0);
	sub();
	store_base();
	ret();

L00473:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x880);
	push_byte(0x9);
	add();
	push_word(0x1b0);
	push_byte(0x53);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x880);
	push_byte(0x9);
	add();
	push_byte(0x0);
	grp1(0x13);
	push_word(0x880);
	push_byte(0x9);
	add();
	push_byte(0x6c);
	push_byte(0x18);
	push_byte(0x20);
	push_word(0x118);
	add();
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x5);
	push_byte(0x5);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x0);
	grp3(0x9c);
	push_word(0x880);
	push_byte(0xa);
	add();
	push_word(0x1b0);
	push_byte(0x53);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x880);
	push_byte(0xa);
	add();
	push_byte(0x0);
	grp1(0x13);
	push_word(0x880);
	push_byte(0xa);
	add();
	push_byte(0x6c);
	push_byte(0x18);
	push_byte(0x20);
	push_word(0x122);
	add();
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x5);
	push_byte(0x5);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x0);
	grp3(0x9c);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00520:
	load_base();
	push_word(0xb8);
	add();
	store_base();
	push_base_offset(0xb0);
	move_arg(0x2);
	push_base_offset(0xb4);
	move_arg(0x2);
	push_base_offset(0xb8);
	move_arg(0x2);
	push_base_offset(0x98);
	push_word(0x80);
	memclr();
	push_base_offset(0xa8);
	push_base_offset(0x98);
	sys2(0xc);
	push_base_offset(0x18);
	push_base_offset(0xa8);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x6);
	geq();
	push_base_offset(0xa8);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x2);
	geq();
	bool_and();
	push_base_offset(0xa8);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x7);
	geq();
	bool_or();
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x20);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	push_byte(0x0);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x790);
	sys1(0x18);
	push_byte(0x64);
	usr1(0x22);
	push_dword(0xffffff);
	usr1(0x25);
	push_base_offset(0xb8);
	load(0x2);
	usr1(0x26);
	push_byte(0x1);
	usr1(0x28);
	push_byte(0x0);
	usr1(0x29);
	push_base_offset(0xb4);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	add();
	push_base_offset(0xb0);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	add();
	push_byte(0xa);
	push_byte(0x2);
	sub();
	push_byte(0x20);
	mul();
	push_byte(0x1);
	sar();
	push_byte(0x1);
	add();
	push_base_offset(0xc);
	load(0x2);
	add();
	push_byte(0x20);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0xa);
	push_byte(0x2);
	sub();
	push_byte(0x1);
	usr1(0x20);

L0061d:
	sys1(0x5f);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	usr1(0x23);
	push_offset(L00644);
	jc(0x1);
	push_word(0x790);
	sys1(0x1a);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	and();
	push_offset(L0061d);
	jc(0x1);

L00644:
	push_byte(0x9);
	sys1(0x11);
	push_offset(L0065d);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x40000000);
	or();
	move(0x2);

L0065d:
	push_base_offset(0x98);
	usr1(0x27);
	usr1(0x21);
	push_base_offset(0x98);
	cmd_68();
	push_offset(L00676);
	jc(0x1);
	push_base_offset(0xb8);
	load(0x2);
	push_base_offset(0x98);
	cmd_6a();

L00676:
	push_word(0x790);
	sys1(0x19);
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_word(0xb8);
	sub();
	store_base();
	ret();

L00687:
	load_base();
	push_word(0x150);
	add();
	store_base();
	push_base_offset(0x150);
	move_arg(0x2);
	push_base_offset(0x14c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14c);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x34);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x13c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x14c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x13c);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x14c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x13c);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x14c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x78);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x14c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x78);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x140);
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x0);
	add();
	push_byte(0x4);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x8);
	add();
	push_base_offset(0x140);
	load(0x2);
	move(0x2);
	push_base_offset(0x78);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x78);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_base_offset(0x78);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x13c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x8);
	add();
	push_word(0xc3);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0xc);
	add();
	push_word(0x12c);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x9);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x13c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x13c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x8);
	add();
	push_word(0x28d);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0xc);
	add();
	push_word(0x12c);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0xa);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x13c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x13c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x8);
	add();
	push_word(0x1d6);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0xc);
	add();
	push_word(0x1ae);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x30);
	add();
	push_word(0x880);
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x13c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x13c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x8);
	add();
	push_word(0x35c);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0xc);
	add();
	push_word(0x213);
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x880);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x13c);
	push_byte(0x30);
	add();
	push_word(0x880);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x13c);
	push_word(0xc4);
	memcpy();
	load_base();
	push_word(0x150);
	sub();
	store_base();
	ret();

L00a8a:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L00aae);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L00aca);
	jmp();

L00aae:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L00aca);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L00aca:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00ada:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L00e30);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L00e30);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L00e30);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L00e30);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L00c89);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L00bfc);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L00c5a);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L00c2b);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L00cb8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L00ce7);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L00d16);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L00d45);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L00d74);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L00da3);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L00dd2);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L00e01);
	jc(0x0);
	push_offset(L00ea0);
	jmp();
	push_offset(L00e30);
	jmp();

L00bfc:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00c2b:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00c5a:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00c89:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00cb8:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00ce7:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00d16:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00d45:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00d74:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00da3:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00dd2:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00e01:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L00e30);
	jmp();

L00e30:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L00e6b);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L00e6b);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L00e6b:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L00ea0:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
