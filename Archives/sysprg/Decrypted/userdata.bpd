	load_base();
	push_byte(0x44);
	add();
	store_base();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x40);
	push_offset(L00069);
	push_offset(L0021c);
	push_offset(L00504);
	push_offset(L00809);
	push_offset(L008e8);
	push_offset(L019e7);
	push_offset(L00046);
	push_offset(L01a5c);
	push_offset(L01bbe);
	push_offset(L01c1d);
	push_offset(L01c73);
	cmd_0c(0x2, 0xb);
	push_base_offset(0x40);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();
	load_base();
	push_byte(0x44);
	sub();
	store_base();
	ret();

L00046:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_string("UserData\\MakingLovers%03d.sud");
	cmd_6f();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00069:
	load_base();
	push_byte(0x34);
	add();
	store_base();
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_word(0x190);
	push_byte(0x1);
	add();
	push_dword(0x25e3c);
	mul();
	sys1(0x20);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x24);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xdb);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x1);
	geq();
	push_offset(L000b8);
	jc(0x1);
	push_base_offset(0x30);
	load(0x2);
	sys1(0x20);
	push_base_offset(0x24);
	move_arg(0x2);

L000b8:
	push_base_offset(0x28);
	load(0x2);
	push_offset(L019e7);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_word(0xb40);
	load(0x2);
	push_offset(L000e5);
	jc(0x0);
	push_base_offset(0x1c);
	push_word(0xeba);
	grp1(0x16);
	push_offset(L00105);
	jc(0x1);
	push_word(0xece);
	push_word(0xeba);
	grp2(0x1f);

L000e5:
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_dword(0x25e3c);
	mul();
	add();
	push_dword(0xeb730);
	push_dword(0x25e3c);
	memcpy();
	push_offset(L00121);
	jmp();

L00105:
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_dword(0x25e3c);
	mul();
	add();
	push_dword(0x9fab8);
	push_dword(0x25e3c);
	memcpy();

L00121:
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_dword(0x25e3c);
	mul();
	add();
	push_dword(0x234b4);
	add();
	push_base_offset(0x20);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_dword(0x25e3c);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1);
	add();
	sys1(0xc4);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L00180);
	jc(0x0);

L0016a:
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_string("ユーザーデータのエンコードに失敗しました");
	cmd_79();
	push_offset(L001fe);
	jmp();

L00180:
	push_base_offset(0x4);
	push_base_offset(0x30);
	load(0x2);
	move(0x2);
	push_byte(0x0);
	sys1(0xd9);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x30);
	push_byte(0x4);
	memcpy();
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x1);
	geq();
	push_offset(L001eb);
	jc(0x1);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	sys1(0xdb);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	sys1(0xc0);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L0016a);
	jc(0x1);

L001eb:
	push_base_offset(0x2c);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x30);
	load(0x2);
	add();
	move(0x2);

L001fe:
	push_base_offset(0x28);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x24);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x34);
	sub();
	store_base();
	ret();

L0021c:
	load_base();
	push_word(0x23c);
	add();
	store_base();
	push_base_offset(0x228);
	move_arg(0x2);
	push_base_offset(0x22c);
	move_arg(0x2);
	push_base_offset(0x230);
	move_arg(0x2);
	push_base_offset(0x234);
	move_arg(0x2);
	push_base_offset(0x238);
	move_arg(0x2);
	push_base_offset(0x23c);
	move_arg(0x2);
	push_base_offset(0x224);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x22c);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L0025c);
	jc(0x0);
	push_string("エンコード済ユーザーデータのサイズにゼロが指定されました");
	cmd_79();
	push_offset(L004f8);
	jmp();

L0025c:
	push_base_offset(0x218);
	push_byte(0x0);
	move(0x2);
	push_dword(0x483f4);
	load(0x2);
	push_offset(L00285);
	jc(0x1);
	push_base_offset(0x214);
	push_word(0xcf);
	push_offset(L00046);
	call();
	push_byte(0x0);
	push_base_offset(0x214);
	sys1(0x35);
	push_base_offset(0x218);
	move_arg(0x2);

L00285:
	push_word(0x5cc);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	push_base_offset(0x22c);
	load(0x2);
	add();
	push_base_offset(0x218);
	load(0x2);
	add();
	sys1(0x20);
	push_base_offset(0x114);
	move_arg(0x2);
	push_base_offset(0x110);
	push_base_offset(0x114);
	load(0x2);
	move(0x2);
	push_base_offset(0x10c);
	push_base_offset(0x114);
	load(0x2);
	push_word(0x5cc);
	add();
	move(0x2);
	push_base_offset(0x108);
	push_base_offset(0x114);
	load(0x2);
	push_word(0x5cc);
	add();
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	move(0x2);
	push_base_offset(0x104);
	push_base_offset(0x114);
	load(0x2);
	push_word(0x5cc);
	add();
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	push_base_offset(0x22c);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0x5cc);
	memclr();
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	add();
	sys1(0xc);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x238);
	load(0x2);
	cmd_6a();
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x60);
	add();
	push_base_offset(0x234);
	load(0x2);
	cmd_6a();
	push_base_offset(0x110);
	load(0x2);
	push_word(0xb0);
	add();
	push_dword(0x9fab8);
	push_word(0xb0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0xb4);
	add();
	push_dword(0x9fab8);
	push_word(0xb4);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0xb8);
	add();
	push_dword(0x10000);
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0xbc);
	add();
	push_base_offset(0x22c);
	load(0x2);
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0xc0);
	add();
	push_base_offset(0x228);
	load(0x2);
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0x5c8);
	add();
	push_base_offset(0x218);
	load(0x2);
	move(0x2);
	push_base_offset(0x21c);
	push_byte(0x0);
	move(0x2);

L00398:
	push_base_offset(0x21c);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	geq();
	push_offset(L00417);
	jc(0x0);
	push_base_offset(0x110);
	load(0x2);
	push_word(0xc8);
	add();
	push_base_offset(0x21c);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_base_offset(0x21c);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	cmd_6a();
	push_base_offset(0x110);
	load(0x2);
	push_word(0xc8);
	add();
	push_base_offset(0x21c);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_base_offset(0x21c);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x8);
	memcpy();
	push_base_offset(0x21c);
	push_base_offset(0x21c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L00398);
	jmp();

L00417:
	push_base_offset(0x110);
	load(0x2);
	push_word(0xc4);
	add();
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	move(0x2);
	push_word(0xecf);
	push_word(0xece);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x1f);
	push_word(0xecd);
	push_word(0xecf);
	push_word(0x1b0);
	push_byte(0x10);
	shl();
	push_word(0x500);
	div();
	push_byte(0x1);
	add();
	push_word(0xf3);
	push_byte(0x10);
	shl();
	push_word(0x2d0);
	div();
	push_byte(0x1);
	add();
	push_byte(0x1);
	grp2(0x1c);
	push_base_offset(0x10c);
	load(0x2);
	push_base_offset(0x220);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	push_word(0xecd);
	grp1(0x15);
	push_word(0xecd);
	grp1(0x12);
	push_word(0xecf);
	grp1(0x12);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x230);
	load(0x2);
	push_base_offset(0x22c);
	load(0x2);
	memcpy();
	push_base_offset(0x218);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L004ad);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x214);
	sys1(0x30);

L004ad:
	push_base_offset(0x100);
	push_base_offset(0x23c);
	load(0x2);
	push_offset(L00046);
	call();
	push_base_offset(0x100);
	push_base_offset(0x114);
	load(0x2);
	push_word(0x5cc);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	push_base_offset(0x22c);
	load(0x2);
	add();
	push_base_offset(0x218);
	load(0x2);
	add();
	sys1(0x32);
	push_base_offset(0x224);
	move_arg(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_offset(L004f1);
	jc(0x0);
	push_string("データの保存に失敗しました\n\nハードディスクの空き容量が不足している可能性があります");
	usr1(0x80);

L004f1:
	push_base_offset(0x114);
	load(0x2);
	sys1(0x21);

L004f8:
	push_base_offset(0x224);
	load(0x2);
	load_base();
	push_word(0x23c);
	sub();
	store_base();
	ret();

L00504:
	load_base();
	push_word(0x7f4);
	add();
	store_base();
	push_base_offset(0x7f4);
	move_arg(0x2);
	push_base_offset(0x7e8);
	push_dword(-0x7fffffff);
	move(0x2);
	push_base_offset(0x7e0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x7f4);
	load(0x2);
	push_offset(L00809);
	call();
	push_offset(L007fd);
	jc(0x1);
	push_base_offset(0x7e0);
	push_word(0xbc);
	add();
	load(0x2);
	sys1(0x20);
	push_base_offset(0x214);
	move_arg(0x2);
	push_word(0x190);
	push_byte(0x1);
	add();
	push_dword(0x25e3c);
	mul();
	sys1(0x20);
	push_dword(0x11196c);
	move_arg(0x2);
	push_base_offset(0x210);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x7e0);
	push_word(0x5c8);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L0057d);
	jc(0x1);
	push_base_offset(0x7e0);
	push_word(0x5c8);
	add();
	load(0x2);
	sys1(0x20);
	push_base_offset(0x210);
	move_arg(0x2);

L0057d:
	push_base_offset(0x20c);
	push_base_offset(0x7f4);
	load(0x2);
	push_offset(L00046);
	call();
	push_base_offset(0x7e8);
	push_dword(-0x7ffffffe);
	move(0x2);
	push_base_offset(0x7e0);
	push_word(0x5c8);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L006a3);
	jc(0x1);
	push_base_offset(0x210);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x20c);
	push_word(0x5cc);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	push_base_offset(0x7e0);
	push_word(0xbc);
	add();
	load(0x2);
	add();
	push_base_offset(0x7e0);
	push_word(0x5c8);
	add();
	load(0x2);
	sys2(0x30);
	push_base_offset(0x7ec);
	move_arg(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L007d0);
	jc(0x1);
	push_dword(0x11196c);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_word(0x5cc);
	add();
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	sys1(0xc5);
	push_base_offset(0x7ec);
	move_arg(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L007d0);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x11196c);
	load(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_dword(0x25e3c);
	mul();
	add();
	push_byte(0x1);
	push_dword(0x25e3c);
	mul();
	sub();
	push_dword(0x25e3c);
	memcpy();
	push_dword(0x48438);
	push_dword(0x11196c);
	load(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_dword(0x25e3c);
	mul();
	add();
	push_byte(0x1);
	push_dword(0x25e3c);
	mul();
	sub();
	push_dword(0x20e74);
	add();
	push_byte(0xd);
	push_byte(0x54);
	mul();
	memcpy();
	push_base_offset(0x10c);
	push_word(0xcf);
	push_offset(L00046);
	call();
	push_base_offset(0x10c);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x7e0);
	push_word(0x5c8);
	add();
	load(0x2);
	sys1(0x32);
	push_offset(L00691);
	jc(0x0);
	push_string("データの復元に失敗しました\n\nハードディスクの空き容量が不足している可能性があります");
	usr1(0x80);
	push_offset(L007d0);
	jmp();

L00691:
	push_dword(0x483f0);
	push_byte(0x1);
	move(0x2);
	push_dword(0x483f8);
	push_byte(0x1);
	move(0x2);

L006a3:
	push_base_offset(0x214);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x20c);
	push_word(0x5cc);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	add();
	push_base_offset(0x7e0);
	push_word(0xbc);
	add();
	load(0x2);
	sys2(0x30);
	push_base_offset(0x7ec);
	move_arg(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L007d0);
	jc(0x1);
	push_dword(0x11196c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	sys1(0xc5);
	push_base_offset(0x7ec);
	move_arg(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L007d0);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x11196c);
	load(0x2);
	push_base_offset(0x7ec);
	load(0x2);
	push_dword(0x25e3c);
	mul();
	add();
	push_byte(0x1);
	push_dword(0x25e3c);
	mul();
	sub();
	push_dword(0x25e3c);
	memcpy();
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x7e0);
	push_word(0xc0);
	add();
	load(0x2);
	add();
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x7f0);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x7e0);
	push_word(0xc0);
	add();
	load(0x2);
	add();
	push_byte(0x4);
	memcpy();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	geq();
	push_offset(L007aa);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	sys1(0x20);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x7e0);
	push_word(0xc0);
	add();
	load(0x2);
	add();
	push_byte(0x4);
	add();
	sys1(0xc1);
	push_base_offset(0x7ec);
	move_arg(0x2);
	push_base_offset(0x7f0);
	push_base_offset(0x7ec);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	eq();
	move(0x2);

L007aa:
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	sys1(0xda);
	push_base_offset(0xc);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x7f0);
	load(0x2);
	push_offset(L007d0);
	jc(0x1);
	push_base_offset(0x7e8);
	push_byte(0x0);
	move(0x2);

L007d0:
	push_base_offset(0x214);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x210);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x7e8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L007fd);
	jc(0x0);
	push_dword(0x11196c);
	load(0x2);
	sys1(0x21);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);

L007fd:
	push_base_offset(0x7e8);
	load(0x2);
	load_base();
	push_word(0x7f4);
	sub();
	store_base();
	ret();

L00809:
	load_base();
	push_word(0x11c);
	add();
	store_base();
	push_base_offset(0x114);
	move_arg(0x2);
	push_base_offset(0x118);
	move_arg(0x2);
	push_base_offset(0x11c);
	move_arg(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x104);
	push_base_offset(0x114);
	load(0x2);
	push_offset(L00046);
	call();
	push_byte(0x0);
	push_base_offset(0x104);
	sys1(0x34);
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_offset(L008dc);
	jc(0x1);
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x104);
	push_byte(0x0);
	push_word(0x5cc);
	sys2(0x30);
	push_base_offset(0x110);
	move_arg(0x2);
	push_base_offset(0x108);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x118);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L008dc);
	jc(0x1);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	sys1(0x20);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x104);
	push_word(0x5cc);
	push_word(0x1b0);
	push_word(0xf3);
	mul();
	push_byte(0x3);
	mul();
	sys2(0x30);
	push_base_offset(0x110);
	move_arg(0x2);
	push_base_offset(0x108);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_offset(L008d5);
	jc(0x1);
	push_base_offset(0x118);
	load(0x2);
	push_word(0x1b0);
	push_word(0xf3);
	push_byte(0x1);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x14);

L008d5:
	push_base_offset(0x4);
	load(0x2);
	sys1(0x21);

L008dc:
	push_base_offset(0x108);
	load(0x2);
	load_base();
	push_word(0x11c);
	sub();
	store_base();
	ret();

L008e8:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e3c);
	memclr();
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xc8);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xd4);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xd8);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xdc);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xe0);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xe4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xe8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xec);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xf0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xf4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x10c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x110);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x114);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x118);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x11c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x520);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x662c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_byte(0x0);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0xc);
	load(0x2);
	cmd_6a();
	push_dword(0x9fab8);
	push_word(0x6d34);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xa95c);
	add();
	push_word(0x500);
	push_byte(0x1);
	sar();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L00ab1:
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcb0c);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcc0c);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	geq();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcd0c);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1d9d4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1d9d4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L00b5f:
	push_dword(0x9fab8);
	push_dword(0x1d9d4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L00b5f);
	jc(0x0);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x40);
	lt();
	push_offset(L00ab1);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0xc);
	add();
	push_word(0x7fff);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd08c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd090);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd090);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd090);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd09c);
	add();
	push_byte(0x0);
	add();
	push_dword(0x9fab8);
	push_dword(0xd090);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd09c);
	add();
	push_byte(0x4);
	add();
	push_dword(0x9fab8);
	push_dword(0xd090);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd09c);
	add();
	push_byte(0x8);
	add();
	push_dword(0x9fab8);
	push_dword(0xd090);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd09c);
	add();
	push_byte(0xc);
	add();
	push_dword(0x9fab8);
	push_dword(0xd08c);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd09c);
	add();
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xd09c);
	add();
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0xc);
	add();
	push_word(0x80);
	push_byte(0x1);
	sub();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x8);
	add();
	push_word(0x7d0);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x2c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x2c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x2c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x40);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x44);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x48);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x4c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x50);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x54);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x58);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x5c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x60);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x64);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_byte(0x68);
	add();
	push_byte(0x8);
	push_word(0x8c);
	mul();
	memclr();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L00ee3:
	push_dword(0x9fab8);
	push_dword(0xc5c0);
	add();
	push_word(0x4c8);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L00ee3);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x4);
	add();
	push_dword(0xffffff);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaa8);
	add();
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcacc);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcaf0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xcafc);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L00fff:
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xce0c);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L00fff);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a544);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e4);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e8);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e8);
	add();
	push_byte(0x4);
	add();
	push_word(0x223);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220f0);
	add();
	push_byte(0x0);
	add();
	push_word(0x118);
	push_byte(0x10);
	sub();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220f0);
	add();
	push_byte(0x4);
	add();
	push_word(0x252);
	push_dword(0x483c8);
	load(0x2);
	sub();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220f8);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x220f8);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22100);
	add();
	push_byte(0x1a);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22104);
	add();
	push_dword(0x483c4);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22108);
	add();
	push_byte(0x1c);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2210c);
	add();
	push_byte(0x3);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22110);
	add();
	push_dword(0x483c8);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	push_word(0x110);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	push_word(0x22c);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2211c);
	add();
	push_byte(0x1a);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22124);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22128);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2212c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22130);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x1);
	add();
	push_byte(0x1a);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x3);
	add();
	push_byte(0x64);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x5);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x6);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x7);
	add();
	push_byte(0x2);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0xa);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x9);
	add();
	push_byte(0xa);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xa);
	add();
	push_word(0xc0);
	move(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	ternary();
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x1);
	add();
	push_byte(0x1a);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x3);
	add();
	push_byte(0x64);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x5);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x6);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x7);
	add();
	push_byte(0x2);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0xa);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x9);
	add();
	push_byte(0xa);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xa);
	add();
	push_word(0xc0);
	move(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	ternary();
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x1);
	add();
	push_byte(0x1a);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x3);
	add();
	push_byte(0x64);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x5);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x6);
	add();
	push_byte(0x0);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x7);
	add();
	push_byte(0x2);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0xa);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x9);
	add();
	push_byte(0xa);
	move(0x0);
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xa);
	add();
	push_word(0xc0);
	move(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	ternary();
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x2217c);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22180);
	add();
	push_byte(0x8);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22184);
	add();
	push_word(0xbb8);
	push_byte(0x8);
	div();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22188);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2218c);
	add();
	push_byte(0x0);
	add();
	push_word(0x40f);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2218c);
	add();
	push_byte(0x4);
	add();
	push_word(0x299);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22194);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01555:
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x54);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x1);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xd);
	lt();
	push_offset(L01555);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x244c8);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x244cc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L015b3:
	push_dword(0x9fab8);
	push_dword(0x212b8);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x1);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L015b3);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x21458);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x1);
	push_dword(0x9fab8);
	push_dword(0x2148c);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22030);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22034);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x22038);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2203c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24668);
	add();
	push_word(0x550);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2466c);
	add();
	push_word(0x558);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24670);
	add();
	push_word(0x55c);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24674);
	add();
	push_word(0x560);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24678);
	add();
	push_word(0x564);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x2467c);
	add();
	push_word(0x568);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24680);
	add();
	push_word(0x56c);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24684);
	add();
	push_word(0x570);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24688);
	add();
	push_word(0x574);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x230a8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234ac);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234b0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234b4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234b8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234c0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234c4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234c8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234cc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234d0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x234d4);
	add();
	push_byte(0x4);
	push_byte(0x40);
	mul();
	memclr();
	push_dword(0x9fab8);
	push_dword(0x235d4);
	add();
	push_dword(0x9fab8);
	push_dword(0x2214c);
	add();
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24098);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24098);
	add();
	push_word(0xb0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x241ac);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x242b0);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24334);
	add();
	push_byte(0x20);
	push_word(0x118);
	add();
	cmd_6a();
	push_dword(0x9fab8);
	push_dword(0x243b4);
	add();
	push_byte(0x20);
	push_word(0x122);
	add();
	cmd_6a();
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L0182b:
	push_dword(0x9fab8);
	push_dword(0x24334);
	add();
	push_byte(0x20);
	push_base_offset(0x8);
	load(0x2);
	mul();
	add();
	push_word(0x6a8);
	push_byte(0x20);
	push_base_offset(0x8);
	load(0x2);
	mul();
	add();
	cmd_6a();
	push_dword(0x9fab8);
	push_dword(0x243b4);
	add();
	push_byte(0x20);
	push_base_offset(0x8);
	load(0x2);
	mul();
	add();
	push_word(0x728);
	push_byte(0x20);
	push_base_offset(0x8);
	load(0x2);
	mul();
	add();
	cmd_6a();
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	lt();
	push_offset(L0182b);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x244b4);
	add();
	push_word(0x7a8);
	cmd_6a();
	push_dword(0x9fab8);
	push_dword(0x244b8);
	add();
	push_word(0x7ac);
	cmd_6a();
	push_dword(0x9fab8);
	push_dword(0x244bc);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x244c0);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L018e1:
	push_dword(0x9fab8);
	push_dword(0x245f4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e24);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	lt();
	push_offset(L018e1);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x24630);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24640);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L01954:
	push_dword(0x9fab8);
	push_dword(0x25e14);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	lt();
	push_offset(L01954);
	jc(0x0);
	push_byte(0x0);
	push_offset(L019e1);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x85cc);
	add();
	push_dword(0x15d8e6);
	push_byte(0x0);
	add();
	push_word(0x100);
	memcpy();
	push_dword(0x9fab8);
	push_dword(0x86cc);
	add();
	push_dword(0x15d8e6);
	push_word(0x100);
	add();
	push_word(0x300);
	push_byte(0x4);
	mul();
	memcpy();
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_word(0x6100);
	add();
	push_word(0x100);
	sub();
	push_dword(0x15d8e6);
	push_word(0xf00);
	add();
	push_word(0x100);
	memcpy();

L019e1:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L019e7:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0xc);
	push_word(0x7d0);
	load(0x2);
	sys1(0x9a);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x10);
	load(0x2);
	move(0x2);

L01a0f:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01a51);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x7d0);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	sys1(0x9d);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_dword(0x25e3c);
	mul();
	add();
	move(0x2);
	push_offset(L01a0f);
	jmp();

L01a51:
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L01a5c:
	load_base();
	push_word(0x158);
	add();
	store_base();
	push_base_offset(0x158);
	move_arg(0x2);
	push_base_offset(0x154);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x158);
	load(0x2);
	push_word(0xb8);
	add();
	load(0x2);
	push_dword(0x10000);
	eq();
	push_offset(L01bb2);
	jc(0x1);
	push_dword(0x400000);
	sys1(0x20);
	push_base_offset(0x144);
	move_arg(0x2);
	push_base_offset(0x148);
	push_byte(0x0);
	move(0x2);

L01a97:
	push_base_offset(0x148);
	load(0x2);
	push_base_offset(0x158);
	load(0x2);
	push_word(0xc4);
	add();
	load(0x2);
	geq();
	push_offset(L01ba4);
	jc(0x0);
	push_base_offset(0x13c);
	push_base_offset(0x158);
	load(0x2);
	push_word(0xc8);
	add();
	push_base_offset(0x148);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x138);
	push_base_offset(0x13c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x138);
	cmd_6d();
	push_base_offset(0x38);
	push_dword(0x9fa4c);
	load(0x2);
	push_base_offset(0x138);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01b70);
	jc(0x0);
	push_base_offset(0x13c);
	load(0x2);
	push_string("framework._bs");
	cmd_69();
	push_base_offset(0x150);
	move_arg(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_string("system.arc");
	push_string("data01xxx.arc");
	ternary();
	push_base_offset(0x140);
	move_arg(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x13c);
	load(0x2);
	sys1(0x34);
	push_offset(L01bab);
	jc(0x1);
	push_base_offset(0x144);
	load(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x13c);
	load(0x2);
	sys1(0x30);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x38);
	push_byte(0x38);
	memclr();
	push_base_offset(0x38);
	push_byte(0x0);
	add();
	push_base_offset(0x13c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x38);
	push_byte(0x20);
	add();
	push_base_offset(0x144);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	sys2(0xe9);
	push_dword(0x9fa4c);
	load(0x2);
	push_base_offset(0x138);
	push_base_offset(0x38);
	sys1(0xd2);

L01b70:
	push_base_offset(0x38);
	push_byte(0x20);
	add();
	push_base_offset(0x158);
	load(0x2);
	push_word(0xc8);
	add();
	push_base_offset(0x148);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x8);
	memcmp();
	push_offset(L01bab);
	jc(0x1);
	push_base_offset(0x148);
	push_base_offset(0x148);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01a97);
	jmp();

L01ba4:
	push_base_offset(0x154);
	push_byte(0x1);
	move(0x2);

L01bab:
	push_base_offset(0x144);
	load(0x2);
	sys1(0x21);

L01bb2:
	push_base_offset(0x154);
	load(0x2);
	load_base();
	push_word(0x158);
	sub();
	store_base();
	ret();

L01bbe:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	sys1(0xc0);
	push_base_offset(0xc);
	move_arg(0x2);
	sys1(0x4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01c07);
	jc(0x0);
	push_string("何らかの要因によりユーザーデータのエンコードに失敗した");
	cmd_79();

L01c07:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	sub();
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L01c1d:
	load_base();
	push_word(0x114);
	add();
	store_base();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x110);
	move_arg(0x2);
	push_base_offset(0x114);
	move_arg(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01c47);
	jc(0x0);
	push_string("エンコード済ユーザーデータのサイズにゼロが指定されました");
	cmd_79();
	push_offset(L01c6c);
	jmp();

L01c47:
	push_base_offset(0x100);
	push_base_offset(0x114);
	load(0x2);
	push_offset(L00046);
	call();
	push_base_offset(0x100);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	sys1(0x32);
	push_offset(L01c6c);
	jc(0x0);
	push_string("データの保存に失敗しました\n\nハードディスクの空き容量が不足している可能性があります");
	usr1(0x80);

L01c6c:
	load_base();
	push_word(0x114);
	sub();
	store_base();
	ret();

L01c73:
	load_base();
	push_word(0x120);
	add();
	store_base();
	push_base_offset(0x118);
	move_arg(0x2);
	push_base_offset(0x11c);
	move_arg(0x2);
	push_base_offset(0x120);
	move_arg(0x2);
	push_base_offset(0x10c);
	push_dword(-0x7fffffff);
	move(0x2);
	push_base_offset(0x108);
	push_base_offset(0x120);
	load(0x2);
	push_offset(L00046);
	call();
	push_byte(0x0);
	push_base_offset(0x108);
	sys1(0x34);
	push_offset(L01d29);
	jc(0x1);
	push_byte(0x0);
	push_base_offset(0x108);
	sys1(0x35);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	sys1(0x20);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x10c);
	push_dword(-0x7ffffffe);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x108);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	sys2(0x30);
	push_base_offset(0x110);
	move_arg(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01d22);
	jc(0x1);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	sys1(0xc1);
	push_base_offset(0x110);
	move_arg(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01d22);
	jc(0x1);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	move(0x2);
	push_base_offset(0x10c);
	push_byte(0x0);
	move(0x2);

L01d22:
	push_base_offset(0x8);
	load(0x2);
	sys1(0x21);

L01d29:
	push_base_offset(0x10c);
	load(0x2);
	load_base();
	push_word(0x120);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x9fab8);
	push_dword(0x20d74);
	add();
	push_byte(0x1);
	push_word(0xb0);
	mul();
	memclr();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01d53:
	push_dword(0x9fab8);
	push_dword(0x20d74);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_word(0x7c4);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	sys1(0xd4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	lt();
	bool_and();
	push_offset(L01d53);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x9fab8);
	push_dword(0x20e24);
	add();
	push_byte(0x1);
	push_byte(0x50);
	mul();
	memclr();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01dc1:
	push_dword(0x9fab8);
	push_dword(0x20e24);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x50);
	mul();
	add();
	push_word(0x7c8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	sys1(0xd4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	lt();
	bool_and();
	push_offset(L01dc1);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x9fab8);
	push_dword(0x24098);
	add();
	push_word(0xb4);
	add();
	push_byte(0x1);
	push_byte(0x60);
	mul();
	memclr();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01e32:
	push_dword(0x9fab8);
	push_dword(0x24098);
	add();
	push_word(0xb4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	push_word(0x7d8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	sys1(0xd4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	lt();
	bool_and();
	push_offset(L01e32);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
