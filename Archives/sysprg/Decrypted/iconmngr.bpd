	load_base();
	push_word(0x204);
	add();
	store_base();
	sys1(0x46);
	push_dword(0x42768);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x204);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x204);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x204);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0xc6c);
	push_byte(0xa);
	push_word(0xc4);
	mul();
	memclr();
	push_word(0xc2c);
	push_byte(0x0);
	add();
	push_byte(0xa);
	move(0x2);
	push_word(0xc2c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc2c);
	push_byte(0x8);
	add();
	push_word(0xc6c);
	move(0x2);
	push_word(0xc2c);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0xc2c);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc2c);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc2c);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc2c);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc2c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0xc2c);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x204);
	push_byte(0xc);
	memcpy();
	push_word(0xc2c);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x204);
	push_byte(0xc);
	memcpy();
	push_word(0xc2c);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc04);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0xc04);
	push_byte(0x4);
	add();
	push_word(0xc2c);
	move(0x2);
	push_word(0xc04);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0xc04);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc04);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc04);
	push_byte(0x14);
	add();
	push_byte(0x2);
	move(0x2);
	push_word(0xc04);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc04);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0xc04);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0xc04);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x14d0);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	memclr();
	push_word(0x1490);
	push_byte(0x0);
	add();
	push_byte(0x2);
	move(0x2);
	push_word(0x1490);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1490);
	push_byte(0x8);
	add();
	push_word(0x14d0);
	move(0x2);
	push_word(0x1490);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x1490);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1490);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1490);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1490);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0x1490);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x1490);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x204);
	push_byte(0xc);
	memcpy();
	push_word(0x1490);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x204);
	push_byte(0xc);
	memcpy();
	push_word(0x1490);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1468);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0x1468);
	push_byte(0x4);
	add();
	push_word(0x1490);
	move(0x2);
	push_word(0x1468);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x1468);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1468);
	push_byte(0x10);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0x1468);
	push_byte(0x14);
	add();
	push_byte(0x2);
	move(0x2);
	push_word(0x1468);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0x1468);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_word(0x1468);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1468);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1e0);
	push_byte(0x7);
	push_byte(0x6);
	push_byte(0x5);
	push_byte(0x3);
	push_byte(0x1b);
	push_byte(0x8);
	push_byte(0x9);
	push_byte(0xf);
	push_byte(0x0);
	push_byte(0x4);
	cmd_0c(0x2, 0xa);
	push_base_offset(0x1b8);
	push_byte(0x1d);
	push_byte(0x1c);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x1b0);
	push_byte(0x1e);
	push_byte(0x6);
	push_byte(0x3);
	push_dword(-0x80000000);
	push_byte(0x4);
	push_byte(0x7);
	push_byte(0xf);
	push_dword(-0x80000000);
	cmd_0c(0x2, 0x8);
	push_base_offset(0x170);
	push_byte(0x4);
	cmd_0c(0x2, 0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	ternary();
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0x12c);
	push_word(0x1000);
	move(0x2);
	push_byte(0x0);
	push_word(0x200);
	push_word(0x200);
	ternary();
	push_base_offset(0x128);
	move_arg(0x2);
	push_base_offset(0x124);
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_dword(0x10000000);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x10);
	shl();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0xffff);
	and();
	or();
	push_byte(0x0);
	cmd_0c(0x2, 0x3);
	push_base_offset(0x114);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0xc4);
	push_byte(0x20);
	push_byte(0x4);
	mul();
	memclr();
	push_word(0xb94);
	push_byte(0x0);
	move(0x2);
	push_word(0x4f0);
	push_byte(0x0);
	move(0x2);
	push_word(0xbb8);
	push_byte(0x0);
	move(0x2);
	push_word(0xbb4);
	push_byte(0x0);
	move(0x2);
	push_word(0xbc8);
	push_byte(0x0);
	move(0x2);
	push_word(0xbc4);
	push_byte(0x0);
	move(0x2);
	push_word(0xbec);
	push_dword(-0x80000000);
	move(0x2);
	push_word(0xbf0);
	push_byte(0x0);
	move(0x2);
	push_word(0xbf4);
	push_byte(0x0);
	move(0x2);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_string("sysprg.arc");
	push_string("iconmngrfnc._bp");
	sys1(0x40);
	push_base_offset(0x44);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("iconmngrcmd._bp");
	sys1(0x40);
	push_base_offset(0x40);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("nudeprcs._bp");
	sys1(0x40);
	push_base_offset(0x3c);
	move_arg(0x2);
	push_offset(L04ee9);
	call();
	push_base_offset(0x38);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_word(0x42e);
	push_word(0x2b9);
	push_word(0x7a5);
	push_offset(L0465c);
	call();
	push_base_offset(0x38);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	push_offset(L047bf);
	call();
	push_offset(L04cff);
	call();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_offset(L0474b);
	call();
	push_dword(0x48424);
	load(0x2);
	push_offset(L003df);
	jc(0x1);
	push_word(0x800);
	sys1(0x18);

L003df:
	push_base_offset(0x24);
	push_word(0xb08);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_dword(0x48424);
	load(0x2);
	move(0x2);
	push_word(0xbfc);
	push_byte(0x0);
	move(0x2);

L003fc:
	sys1(0x5f);
	push_word(0xbe4);
	load(0x2);
	push_offset(L0044c);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	bool_or();
	bool_and();
	push_offset(L0048c);
	jc(0x1);
	push_word(0x7ff);
	sys1(0x18);
	push_word(0xbe4);
	push_byte(0x1);
	move(0x2);
	push_offset(L0048c);
	jmp();

L0044c:
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	bool_or();
	bool_and();
	push_offset(L0048c);
	jc(0x0);
	push_word(0x7ff);
	sys1(0x19);
	push_word(0xbe4);
	push_byte(0x0);
	move(0x2);

L0048c:
	push_word(0xbe0);
	push_byte(0x0);
	move(0x2);
	push_word(0x7dc);
	load(0x2);
	push_offset(L004b2);
	jc(0x1);
	push_word(0xc04);
	push_word(0x1468);
	push_byte(0x1);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_word(0x7dc);
	push_byte(0x0);
	move(0x2);

L004b2:
	push_dword(0x42aa0);
	load(0x2);
	grp2(0xb8);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_word(0xc00);
	push_base_offset(0x2c);
	load(0x2);
	move(0x2);
	push_dword(0x42aa8);
	load(0x2);
	grp2(0xb8);
	push_base_offset(0x28);
	move_arg(0x2);
	push_word(0x1464);
	push_base_offset(0x28);
	load(0x2);
	move(0x2);
	push_base_offset(0xc4);
	push_byte(0x4);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_word(0xc6c);
	push_base_offset(0xc4);
	push_byte(0x1);
	push_byte(0x5);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_word(0x14d0);
	push_base_offset(0xc4);
	push_byte(0x1);
	push_byte(0x6);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_base_offset(0x2c);
	load(0x2);
	push_word(0xc04);
	grp2(0xba);
	push_base_offset(0x28);
	load(0x2);
	push_word(0x1468);
	grp2(0xba);
	push_byte(0x1);
	push_word(0xc04);
	push_byte(0x0);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_base_offset(0x20);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c);
	push_byte(0x1);
	move(0x2);
	push_word(0xb98);
	push_byte(0x0);
	move(0x2);
	push_word(0x4f0);
	push_word(0x4f0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_offset(L00657);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	sys1(0xa8);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x0);
	sys1(0xa8);
	push_word(0x4ec);
	push_byte(0x1);
	move(0x2);

L00573:
	push_word(0xb24);
	load(0x2);
	push_offset(L005b3);
	jc(0x0);
	push_word(0xb98);
	load(0x2);
	push_word(0x7dc);
	load(0x2);
	bool_or();
	push_offset(L005ad);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_offset(L003fc);
	jmp();

L005ad:
	sys1(0x5f);
	push_offset(L00573);
	jmp();

L005b3:
	push_word(0xb5c);
	load(0x2);
	push_offset(L005cb);
	jc(0x1);
	push_word(0xb64);
	load(0x2);
	push_offset(L00615);
	jc(0x0);
	push_offset(L005df);
	jmp();

L005cb:
	push_word(0xb28);
	load(0x2);
	push_offset(L00615);
	jc(0x1);
	push_word(0xb40);
	load(0x2);
	push_offset(L00615);
	jc(0x0);

L005df:
	push_word(0xb98);
	load(0x2);
	push_word(0x7dc);
	load(0x2);
	bool_or();
	push_offset(L0060f);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_offset(L003fc);
	jmp();

L0060f:
	sys1(0x5f);
	push_offset(L005b3);
	jmp();

L00615:
	push_word(0xb98);
	load(0x2);
	push_word(0x7dc);
	load(0x2);
	bool_or();
	push_offset(L00645);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_offset(L003fc);
	jmp();

L00645:
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	sys1(0xa8);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	sys1(0xa8);

L00657:
	push_word(0x4ec);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	bool_or();
	move(0x2);

L0067f:
	push_base_offset(0x130);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xe4);
	move_arg(0x2);
	push_base_offset(0x12c);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xe0);
	move_arg(0x2);
	push_base_offset(0x128);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xdc);
	move_arg(0x2);
	push_base_offset(0x124);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xd8);
	move_arg(0x2);

L006af:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L012fc);
	jc(0x0);
	push_word(0x4e8);
	load(0x2);
	push_offset(L006af);
	jc(0x1);
	push_word(0xb94);
	load(0x2);
	push_offset(L006af);
	jc(0x0);
	push_word(0x924);
	load(0x2);
	push_offset(L00736);
	jc(0x1);
	push_word(0x920);
	load(0x2);
	push_offset(L0072f);
	jc(0x1);
	push_byte(0x63);
	push_byte(0x2);
	push_base_offset(0x3c);
	load(0x2);
	call();
	push_offset(L0072f);
	jc(0x1);
	push_byte(0x20);
	push_word(0x12c);
	add();
	push_byte(0x20);
	push_word(0x12c);
	add();
	load(0x1);
	bool_zero();
	move(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	sys1(0xa8);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x0);
	sys1(0xa8);
	push_byte(0x0);
	push_base_offset(0x3c);
	load(0x2);
	call();
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	sys1(0xa8);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	sys1(0xa8);

L0072f:
	push_word(0x924);
	push_byte(0x0);
	move(0x2);

L00736:
	push_word(0xbe0);
	load(0x2);
	push_offset(L00760);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_offset(L003fc);
	jmp();

L00760:
	push_word(0xb98);
	load(0x2);
	push_word(0x7dc);
	load(0x2);
	bool_or();
	push_offset(L00790);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_offset(L003fc);
	jmp();

L00790:
	push_byte(0x0);
	push_word(0xc04);
	push_byte(0x0);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_base_offset(0xc);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L007a8:
	push_base_offset(0x1f8);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0x1f8);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L00823);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x1f8);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x1f8);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L007a8);
	jc(0x0);
	push_base_offset(0xc4);
	push_base_offset(0x1e0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L007a8);
	jc(0x1);
	push_base_offset(0xc);
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_offset(L0091f);
	jmp();

L00823:
	push_base_offset(0x1f8);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L0090f);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x1f8);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x1f8);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L008a4);
	jc(0x0);
	push_word(0xfa);
	push_offset(L015d6);
	call();
	push_base_offset(0xd4);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x0);
	push_word(0x400);
	push_byte(0x28);
	add();
	push_base_offset(0x10);
	load(0x2);
	add();
	push_base_offset(0xd4);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_offset(L047f4);
	call();
	push_offset(L008c0);
	jmp();

L008a4:
	push_word(0xfa);
	push_offset(L015d6);
	call();
	push_base_offset(0xd4);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xd4);
	load(0x2);
	push_offset(L04a68);
	call();

L008c0:
	push_base_offset(0x20);
	load(0x2);
	push_offset(L008d5);
	jc(0x1);
	push_base_offset(0x20);
	push_byte(0x0);
	move(0x2);
	push_offset(L007a8);
	jmp();

L008d5:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L007a8);
	jc(0x0);
	push_base_offset(0xc4);
	push_base_offset(0x1e0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L007a8);
	jc(0x1);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L01626);
	call();
	push_offset(L007a8);
	jmp();

L0090f:
	push_base_offset(0x1f8);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L007a8);
	jc(0x1);

L0091f:
	push_base_offset(0x8);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L0092a:
	push_base_offset(0x1ec);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0x1ec);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L009a5);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x1ec);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x1ec);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L0092a);
	jc(0x0);
	push_base_offset(0xc4);
	push_base_offset(0x1b8);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0092a);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_offset(L00a3a);
	jmp();

L009a5:
	push_base_offset(0x1ec);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L00a2a);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x1ec);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x1ec);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_offset(L009f0);
	jc(0x1);
	push_base_offset(0x1c);
	push_byte(0x0);
	move(0x2);
	push_offset(L0092a);
	jmp();

L009f0:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L0092a);
	jc(0x0);
	push_base_offset(0xc4);
	push_base_offset(0x1b8);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0092a);
	jc(0x1);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L01626);
	call();
	push_offset(L0092a);
	jmp();

L00a2a:
	push_base_offset(0x1ec);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0092a);
	jc(0x1);

L00a3a:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_word(0xbe4);
	load(0x2);
	push_offset(L00a7e);
	jc(0x1);
	sys1(0x17);
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x7ff);
	sys1(0x1a);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1);
	push_word(0x80);
	or();
	push_word(0x100);
	or();
	push_word(0x2000);
	or();
	and();
	push_byte(0x0);
	neq();
	bool_or();
	move(0x2);

L00a7e:
	push_base_offset(0x130);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xf4);
	move_arg(0x2);
	push_base_offset(0x12c);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xf0);
	move_arg(0x2);
	push_base_offset(0x128);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xec);
	move_arg(0x2);
	push_base_offset(0x124);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0xe8);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_offset(L00b14);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_base_offset(0xf4);
	load(0x2);
	push_base_offset(0xe4);
	load(0x2);
	neq();
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xe0);
	load(0x2);
	neq();
	bool_or();
	push_base_offset(0xec);
	load(0x2);
	push_base_offset(0xdc);
	load(0x2);
	neq();
	bool_or();
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	bool_or();
	bool_and();
	push_offset(L0067f);
	jc(0x0);
	push_base_offset(0xcc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	move(0x2);
	push_base_offset(0xc8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	move(0x2);

L00b14:
	push_word(0x4ec);
	push_base_offset(0xcc);
	load(0x2);
	bool_zero();
	push_base_offset(0xc8);
	load(0x2);
	bool_zero();
	bool_and();
	push_base_offset(0xf4);
	load(0x2);
	push_base_offset(0xe4);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xe0);
	load(0x2);
	eq();
	push_word(0xb64);
	load(0x2);
	bool_or();
	bool_and();
	push_base_offset(0xec);
	load(0x2);
	push_base_offset(0xdc);
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	eq();
	bool_and();
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	bool_or();
	bool_and();
	push_base_offset(0x4);
	load(0x2);
	bool_zero();
	bool_and();
	push_word(0xbb8);
	load(0x2);
	bool_zero();
	bool_and();
	push_word(0xbc8);
	load(0x2);
	bool_zero();
	bool_and();
	push_base_offset(0x18);
	load(0x2);
	bool_zero();
	bool_and();
	push_word(0xbec);
	load(0x2);
	push_dword(-0x80000000);
	eq();
	bool_and();
	move(0x2);
	push_word(0x4ec);
	load(0x2);
	push_word(0xb64);
	load(0x2);
	bool_and();
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xe0);
	load(0x2);
	neq();
	bool_and();
	push_offset(L0067f);
	jc(0x0);
	push_word(0x4ec);
	load(0x2);
	push_offset(L006af);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_offset(L00f38);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	load(0x2);
	push_offset(L00c7d);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L011c5);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	bool_or();
	push_base_offset(0x4);
	load(0x2);
	bool_and();
	push_offset(L011c5);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x1);
	eq();
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	bool_or();
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	bool_and();
	push_offset(L011c5);
	jc(0x0);

L00c7d:
	push_dword(0x483f4);
	load(0x2);
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	bool_and();
	push_offset(L012a9);
	jc(0x0);
	push_base_offset(0xd0);
	push_word(0xbec);
	load(0x2);
	move(0x2);
	push_word(0xbec);
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0xcc);
	load(0x2);
	push_offset(L00cc6);
	jc(0x1);
	push_base_offset(0xd0);
	push_base_offset(0x1e0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);

L00cc6:
	push_base_offset(0xc8);
	load(0x2);
	push_offset(L00ce3);
	jc(0x1);
	push_base_offset(0xd0);
	push_base_offset(0x1b8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);

L00ce3:
	push_base_offset(0xf4);
	load(0x2);
	push_base_offset(0xe4);
	load(0x2);
	neq();
	push_byte(0xc);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xe0);
	load(0x2);
	neq();
	push_byte(0x3);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xec);
	load(0x2);
	push_base_offset(0xdc);
	load(0x2);
	neq();
	push_byte(0x4);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	push_base_offset(0x1b0);
	push_byte(0x20);
	push_byte(0x7c);
	add();
	load(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x242b0);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L00d92);
	jc(0x1);
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	push_base_offset(0x170);
	push_dword(0x9fab8);
	push_dword(0x242b0);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);

L00d92:
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	bool_and();
	push_word(0xb60);
	load(0x2);
	bool_zero();
	bool_and();
	push_byte(0x6);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	push_dword(0x9fab8);
	push_word(0xec);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xf0);
	add();
	load(0x2);
	bool_or();
	bool_and();
	push_word(0xb60);
	load(0x2);
	bool_and();
	push_byte(0x1e);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xe8);
	load(0x2);
	push_base_offset(0xd8);
	load(0x2);
	neq();
	push_word(0xb74);
	load(0x2);
	bool_and();
	push_byte(0x1e);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_word(0xbb8);
	load(0x2);
	push_offset(L00e44);
	jc(0x0);
	push_word(0xbc8);
	load(0x2);
	push_offset(L00e44);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_dword(-0x80000000);
	eq();
	push_offset(L003fc);
	jc(0x0);
	push_base_offset(0xc4);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L003fc);
	jc(0x1);

L00e44:
	push_word(0x510);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_dword(0x42768);
	push_byte(0xb);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_word(0xb68);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_word(0x428);
	load(0x2);
	push_word(0x42c);
	load(0x2);
	bool_or();
	push_offset(L00eda);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0xc);
	eq();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x6);
	eq();
	bool_or();
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	bool_and();
	push_word(0xbb8);
	load(0x2);
	bool_zero();
	bool_and();
	push_word(0xbc8);
	load(0x2);
	bool_zero();
	bool_and();
	bool_or();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x19);
	eq();
	bool_or();
	push_word(0xb60);
	load(0x2);
	push_word(0xbb8);
	load(0x2);
	push_word(0xbc8);
	load(0x2);
	bool_or();
	bool_and();
	bool_or();
	push_offset(L003fc);
	jc(0x1);

L00eda:
	push_word(0x900);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_word(0x904);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_word(0x908);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x220e0);
	add();
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0xc8);
	add();
	load(0x2);
	push_offset(L003fc);
	jc(0x1);
	push_word(0xb58);
	load(0x2);
	push_offset(L003fc);
	jc(0x0);
	push_word(0xbb8);
	load(0x2);
	push_offset(L01078);
	jc(0x0);
	push_word(0xbc8);
	load(0x2);
	push_offset(L01129);
	jc(0x0);

L00f38:
	push_base_offset(0x18);
	load(0x2);
	push_offset(L00fc7);
	jc(0x1);
	push_base_offset(0xcc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xd0);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_dword(0x48428);
	load(0x2);
	push_offset(L00f95);
	jc(0x1);
	push_byte(0x20);
	push_word(0x84);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L00f86);
	jc(0x1);
	push_byte(0x3);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_offset(L00f95);
	jmp();

L00f86:
	push_word(0xc04);
	push_word(0x1468);
	push_base_offset(0x44);
	load(0x2);
	push_offset(L0136c);
	call();

L00f95:
	push_dword(0x4842c);
	load(0x2);
	push_offset(L00fb0);
	jc(0x1);
	push_word(0xc04);
	push_word(0x1468);
	push_base_offset(0x44);
	load(0x2);
	push_offset(L014a7);
	call();

L00fb0:
	push_dword(0x48428);
	push_byte(0x0);
	move(0x2);
	push_dword(0x4842c);
	push_byte(0x0);
	move(0x2);
	push_word(0x800);
	sys1(0x19);

L00fc7:
	push_base_offset(0x110);
	push_word(0xacc);
	load(0x2);
	move(0x2);
	push_word(0xacc);
	push_byte(0x1);
	move(0x2);
	push_word(0x800);
	sys1(0x18);
	push_base_offset(0xcc);
	load(0x2);
	push_base_offset(0xc8);
	load(0x2);
	bool_or();
	push_offset(L0101e);
	jc(0x1);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0xf);
	eq();
	push_offset(L0101e);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x9);
	eq();
	push_byte(0x20);
	push_word(0xca);
	add();
	push_byte(0x8);
	add();
	load(0x0);
	bool_zero();
	bool_and();
	push_byte(0x0);
	push_byte(0xc);
	add();
	push_byte(0x0);
	push_byte(0x0);
	add();
	ternary();
	push_offset(L01626);
	call();

L0101e:
	push_base_offset(0xcc);
	load(0x2);
	push_base_offset(0xc8);
	load(0x2);
	bool_or();
	push_offset(L0102e);
	jc(0x1);

L0102e:
	push_base_offset(0xd0);
	load(0x2);
	push_word(0xc04);
	push_word(0x1468);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x40);
	load(0x2);
	call();
	push_base_offset(0x108);
	move_arg(0x2);
	push_word(0x800);
	sys1(0x19);
	push_word(0xacc);
	push_base_offset(0x110);
	load(0x2);
	move(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L01078);
	jc(0x0);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L01129);
	jc(0x0);
	push_offset(L003fc);
	jmp();

L01078:
	push_word(0xbb8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	ternary();
	push_word(0xc2c);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_word(0xc6c);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0xc6c);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_word(0xc6c);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_dword(0x42aa0);
	load(0x2);
	push_word(0xc04);
	grp1(0xb7);
	push_byte(0x0);
	grp1(0x0);
	push_byte(0x0);
	push_word(0xc04);
	push_byte(0x0);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_word(0xc2c);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0xc04);
	push_word(0x1468);
	push_base_offset(0x44);
	load(0x2);
	push_offset(L0136c);
	call();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_dword(-0x1);
	neq();
	push_offset(L00e44);
	jc(0x0);
	push_offset(L003fc);
	jmp();

L01129:
	push_word(0xbc8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0xc2c);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_word(0xc6c);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0xc6c);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_word(0xc6c);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	move(0x2);
	push_dword(0x42aa0);
	load(0x2);
	push_word(0xc04);
	grp1(0xb7);
	push_byte(0x0);
	grp1(0x0);
	push_byte(0x0);
	push_word(0xc04);
	push_byte(0x0);
	push_base_offset(0x44);
	load(0x2);
	call();
	push_word(0xc2c);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0xc04);
	push_word(0x1468);
	push_base_offset(0x44);
	load(0x2);
	push_offset(L014a7);
	call();
	push_offset(L003fc);
	jmp();

L011c5:
	push_word(0xbcc);
	push_byte(0x1);
	move(0x2);
	push_word(0xbe4);
	load(0x2);
	push_offset(L011e2);
	jc(0x1);
	push_word(0x7ff);
	sys1(0x19);
	push_word(0xbe4);
	push_byte(0x0);
	move(0x2);

L011e2:
	push_word(0xbf0);
	sys1(0x18);
	push_dword(0x9fab8);
	push_dword(0x853c);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L01221);
	jc(0x1);

L01200:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L01280);
	jc(0x0);
	push_word(0xbd0);
	load(0x2);
	push_offset(L01280);
	jc(0x0);
	push_byte(0x0);
	push_offset(L019f7);
	call();
	push_offset(L01200);
	jc(0x1);

L01221:
	push_word(0xbd4);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x110);
	push_word(0xacc);
	load(0x2);
	move(0x2);
	push_word(0xacc);
	push_byte(0x1);
	move(0x2);
	push_byte(0x0);
	sys1(0x50);

L0123d:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L0126b);
	jc(0x0);
	push_word(0xbd0);
	load(0x2);
	push_offset(L0126b);
	jc(0x0);
	push_word(0xb24);
	load(0x2);
	push_offset(L0123d);
	jc(0x0);
	push_word(0xbd8);
	push_byte(0x1);
	move(0x2);
	push_word(0xbdc);
	push_byte(0x0);
	move(0x2);

L0126b:
	push_byte(0x1);
	sys1(0x50);
	push_word(0xacc);
	push_base_offset(0x110);
	load(0x2);
	move(0x2);
	push_word(0xbd4);
	push_byte(0x0);
	move(0x2);

L01280:
	push_word(0xbf0);
	sys1(0x19);
	push_word(0xbcc);
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x8538);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x4f4);
	load(0x2);
	push_offset(L003fc);
	jc(0x1);
	push_offset(L0132e);
	jmp();

L012a9:
	push_dword(0x48434);
	push_dword(0x483f4);
	load(0x2);
	move(0x2);
	push_word(0x444);
	push_byte(0x1);
	move(0x2);
	push_word(0xad0);
	push_byte(0x0);
	move(0x2);
	push_word(0x504);
	push_byte(0x1);
	move(0x2);
	push_word(0x508);
	push_byte(0x1);
	move(0x2);
	push_dword(0x42764);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x4c);

L012e2:
	push_word(0x4f4);
	load(0x2);
	push_offset(L0132e);
	jc(0x0);
	push_word(0x508);
	load(0x2);
	push_offset(L0132e);
	jc(0x1);
	sys1(0x5f);
	push_offset(L012e2);
	jmp();

L012fc:
	push_base_offset(0x2c);
	load(0x2);
	grp1(0xb9);
	push_word(0xc00);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	grp1(0xb9);
	push_word(0x1464);
	push_byte(0x0);
	move(0x2);
	push_word(0xbe4);
	load(0x2);
	push_offset(L0132e);
	jc(0x1);
	push_word(0x7ff);
	sys1(0x19);
	push_word(0xbe4);
	push_byte(0x0);
	move(0x2);

L0132e:
	push_offset(L04f52);
	call();
	push_base_offset(0x38);
	load(0x2);
	push_offset(L04629);
	call();
	sys1(0x41);
	sys1(0x41);
	sys1(0x41);
	push_dword(0x42768);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x42768);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	load_base();
	push_word(0x204);
	sub();
	store_base();
	ret();

L0136c:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x48424);
	load(0x2);
	push_offset(L013ac);
	jc(0x0);
	push_word(0xb60);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xf4);
	add();
	load(0x2);
	bool_or();
	push_offset(L013ec);
	jc(0x1);
	push_word(0xbb8);
	load(0x2);
	push_offset(L013ec);
	jc(0x0);

L013ac:
	push_base_offset(0xc);
	push_dword(-0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	bool_zero();
	push_word(0xbb4);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L04564);
	call();
	push_byte(0x0);
	push_offset(L0458a);
	call();
	push_word(0xbb4);
	push_word(0xbb4);
	load(0x2);
	bool_zero();
	move(0x2);
	push_word(0xbc4);
	push_byte(0x0);
	move(0x2);
	push_offset(L0149c);
	jmp();

L013ec:
	push_word(0xfa);
	push_offset(L015d6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04a68);
	call();
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	bool_zero();
	push_offset(L04564);
	call();
	push_offset(L01b09);
	call();

L01423:
	sys1(0x5f);
	push_word(0x450);
	load(0x2);
	push_offset(L01423);
	jc(0x0);
	push_base_offset(0xc);
	push_dword(-0x1);
	move(0x2);
	push_byte(0x1);
	push_offset(L019f7);
	call();
	push_offset(L01475);
	jc(0x0);
	push_word(0xbb0);
	load(0x2);
	push_offset(L01475);
	jc(0x0);
	push_word(0x7dc);
	load(0x2);
	push_offset(L01471);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x10);
	load(0x2);
	call();
	push_word(0x7dc);
	push_byte(0x0);
	move(0x2);

L01471:
	push_offset(L01423);
	jmp();

L01475:
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01498);
	jc(0x0);
	push_word(0xbb4);
	load(0x2);
	push_offset(L01498);
	jc(0x0);
	push_byte(0x0);
	push_offset(L04564);
	call();

L01498:
	push_offset(L01b9b);
	call();

L0149c:
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L014a7:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x48424);
	load(0x2);
	push_offset(L014e7);
	jc(0x0);
	push_word(0xb60);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xf4);
	add();
	load(0x2);
	bool_or();
	push_offset(L01527);
	jc(0x1);
	push_word(0xbc8);
	load(0x2);
	push_offset(L01527);
	jc(0x0);

L014e7:
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	bool_zero();
	push_word(0xbc4);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L0458a);
	call();
	push_word(0xbb4);
	load(0x2);
	push_offset(L01511);
	jc(0x1);
	push_byte(0x0);
	push_offset(L04564);
	call();

L01511:
	push_word(0xbc4);
	push_word(0xbc4);
	load(0x2);
	bool_zero();
	move(0x2);
	push_word(0xbb4);
	push_byte(0x0);
	move(0x2);
	push_offset(L015d0);
	jmp();

L01527:
	push_word(0xfa);
	push_offset(L015d6);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04a68);
	call();
	push_byte(0x1);
	push_offset(L0458a);
	call();
	push_offset(L01a78);
	call();
	push_offset(L0254c);
	call();
	push_offset(L02975);
	call();
	push_offset(L03f90);
	call();

L0155d:
	sys1(0x5f);
	push_byte(0x1);
	push_offset(L019f7);
	call();
	push_offset(L015a9);
	jc(0x0);
	push_word(0xbc0);
	load(0x2);
	push_offset(L015a9);
	jc(0x0);
	push_word(0x7dc);
	load(0x2);
	push_offset(L01597);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x8);
	load(0x2);
	call();
	push_word(0x7dc);
	push_byte(0x0);
	move(0x2);

L01597:
	push_word(0xba8);
	load(0x2);
	push_byte(0x20);
	push_byte(0xc);
	add();
	load(0x1);
	bool_or();
	push_offset(L0155d);
	jc(0x0);

L015a9:
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L015cc);
	jc(0x0);
	push_word(0xbc4);
	load(0x2);
	push_offset(L015cc);
	jc(0x0);
	push_byte(0x0);
	push_offset(L0458a);
	call();

L015cc:
	push_offset(L01acf);
	call();

L015d0:
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L015d6:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L015fa);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L01616);
	jmp();

L015fa:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L01616);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L01616:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01626:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L0197c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L0197c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L0197c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L0197c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L017d5);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L01748);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L017a6);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L01777);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L01804);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L01833);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L01862);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L01891);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L018c0);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L018ef);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L0191e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L0194d);
	jc(0x0);
	push_offset(L019ec);
	jmp();
	push_offset(L0197c);
	jmp();

L01748:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L01777:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L017a6:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L017d5:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L01804:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L01833:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L01862:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L01891:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L018c0:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L018ef:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L0191e:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L0194d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L0197c);
	jmp();

L0197c:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L019b7);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L019b7);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L019b7:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L019ec:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L019f7:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_word(0xbcc);
	load(0x2);
	push_offset(L01a30);
	jc(0x0);
	push_word(0xb9c);
	load(0x2);
	push_offset(L01a30);
	jc(0x0);
	push_word(0xbac);
	load(0x2);
	push_offset(L01a30);
	jc(0x0);
	push_word(0xbbc);
	load(0x2);
	push_offset(L01a6d);
	jc(0x1);

L01a30:
	push_word(0xbf0);
	sys1(0x1a);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x4);
	load(0x2);
	push_dword(-0x80000000);
	not();
	and();
	push_byte(0x0);
	neq();
	push_word(0x4e8);
	load(0x2);
	bool_zero();
	bool_or();
	push_word(0x4f4);
	load(0x2);
	bool_or();
	push_word(0x504);
	load(0x2);
	bool_or();
	push_word(0x450);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	bool_and();
	bool_or();
	move(0x2);

L01a6d:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01a78:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0xbbc);
	load(0x2);
	push_offset(L01ac9);
	jc(0x0);
	push_word(0xbbc);
	push_byte(0x1);
	move(0x2);
	push_word(0xbf0);
	sys1(0x18);
	push_byte(0x1);
	sys1(0x15);
	push_word(0xb3c);
	load(0x2);
	push_offset(L01ab0);
	jc(0x1);
	push_dword(0x42764);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x4c);

L01ab0:
	push_word(0xb4c);
	load(0x2);
	push_offset(L01ac9);
	jc(0x1);
	push_dword(0x42764);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x4c);

L01ac9:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01acf:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_word(0xbbc);
	load(0x2);
	push_offset(L01b03);
	jc(0x1);
	push_byte(0x0);
	sys1(0x15);
	push_word(0xbf0);
	sys1(0x19);
	push_word(0xbc0);
	push_byte(0x0);
	move(0x2);
	push_word(0xbbc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);

L01b03:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01b09:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_word(0xbac);
	load(0x2);
	push_offset(L01b95);
	jc(0x0);
	push_word(0xbac);
	push_byte(0x1);
	move(0x2);
	push_word(0xbf0);
	sys1(0x18);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01b95);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("environ._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x74);
	add();
	load(0x1);
	push_byte(0xa);
	push_byte(0x1);
	sub();
	push_byte(0x20);
	push_byte(0x12);
	add();
	load(0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xb48);
	load(0x2);
	push_byte(0xa);
	push_byte(0x1);
	sub();
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);

L01b95:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01b9b:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_word(0xbac);
	load(0x2);
	push_offset(L01bf9);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01bdf);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("environ._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);

L01bdf:
	push_word(0xbf0);
	sys1(0x19);
	push_word(0xbb0);
	push_byte(0x0);
	move(0x2);
	push_word(0xbac);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L01bf9:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01bff:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);

L01c1d:
	push_word(0x504);
	load(0x2);
	push_offset(L01c48);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L01c48);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01c48);
	jc(0x1);
	sys1(0x5f);
	push_offset(L01c1d);
	jmp();

L01c48:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01c5d:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);

L01c80:
	push_word(0x504);
	load(0x2);
	push_offset(L01cbc);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L01cbc);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01cbc);
	jc(0x1);
	sys1(0x17);
	push_offset(L01cbc);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L01cbc);
	jc(0x0);
	sys1(0x5f);
	push_offset(L01c80);
	jmp();

L01cbc:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01cd6:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01d7a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L01d50);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	bool_or();
	push_offset(L01d50);
	jc(0x0);
	push_string("循環制御が行われているオブジェクトに対して待機要求が発行されました");
	cmd_79();
	push_offset(L01d7a);
	jmp();

L01d50:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L01d6c);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L01bff);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01d7a);
	jmp();

L01d6c:
	push_base_offset(0x10);
	load(0x2);
	push_offset(L01c5d);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L01d7a:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L01d85:
	load_base();
	push_word(0x1f8);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0x1f4);
	move_arg(0x2);
	push_base_offset(0x1f8);
	move_arg(0x2);
	push_base_offset(0x1f8);
	load(0x2);
	push_offset(L0247f);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memclr();
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_base_offset(0x1f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x1c);
	add();
	push_base_offset(0x1ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x20);
	add();
	push_base_offset(0x1e8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x128);
	add();
	push_base_offset(0x1e4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x12c);
	add();
	push_base_offset(0x1e0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x130);
	add();
	push_base_offset(0x1dc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x134);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x138);
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01eb7);
	jc(0x1);
	push_base_offset(0x1c0);
	push_word(0x150);
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x70);
	memcpy();

L01eb7:
	push_dword(0x227a4);
	push_base_offset(0x1f8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1cc);
	load(0x2);
	push_offset(L01ee7);
	jc(0x1);
	push_base_offset(0x1f8);
	load(0x2);
	push_byte(0x0);
	push_offset(L01cd6);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);

L01ee7:
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1f8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L01d85);
	call();
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L01d85);
	call();
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1f0);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0x1f0);
	load(0x2);
	push_offset(L0247f);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x24);
	add();
	push_base_offset(0x1e8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x28);
	add();
	push_base_offset(0x1e4);
	load(0x2);
	push_base_offset(0x1e8);
	load(0x2);
	push_byte(0x10);
	mul();
	memcpy();
	push_base_offset(0x1c0);
	push_word(0x128);
	add();
	push_base_offset(0x1e0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x12c);
	add();
	push_base_offset(0x1dc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x130);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x134);
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x138);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_dword(0x227a4);
	push_base_offset(0x1f0);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c8);
	load(0x2);
	push_offset(L0211e);
	jc(0x1);
	push_base_offset(0x1f0);
	load(0x2);
	push_byte(0x0);
	push_offset(L01cd6);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);

L0211e:
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1f0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x30);
	load(0x2);
	add();
	push_byte(0x3);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01d85);
	call();
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x2c);
	load(0x2);
	add();
	push_byte(0x4);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L01d85);
	call();
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1c8);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1c8);
	load(0x2);
	add();
	push_offset(L025b9);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x227a4);
	push_byte(0x0);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1c8);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1dc);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1dc);
	load(0x2);
	add();
	push_offset(L025b9);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memclr();
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02398);
	jc(0x1);
	push_base_offset(0x1c0);
	push_word(0x150);
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x70);
	memcpy();

L02398:
	push_dword(0x227a4);
	push_byte(0x0);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1dc);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1dc);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1d4);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d4);
	load(0x2);
	push_offset(L025b9);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1c8);
	load(0x2);
	move(0x2);
	push_dword(0x227a4);
	push_base_offset(0x1d4);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1d4);
	sub();
	store_base();
	ret();

L0247f:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x227a4);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02541);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x450);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_offset(L01cd6);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02541);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02541);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L02541);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	memclr();

L02541:
	push_base_offset(0x10);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L0254c:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L02558:
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02599);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L02599);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);

L02599:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x52);
	lt();
	push_offset(L02558);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L025b9:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x227a4);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0267b);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x450);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_offset(L01cd6);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L0267b);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0267b);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L0267b);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	memclr();

L0267b:
	push_base_offset(0x10);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L02697:
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L026f8);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L026f8);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_word(0x450);
	memclr();
	push_offset(L02712);
	jmp();

L026f8:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	lt();
	push_offset(L02697);
	jc(0x0);

L02712:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0273c:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);

L0275a:
	push_word(0x504);
	load(0x2);
	push_offset(L02785);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L02785);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02785);
	jc(0x1);
	sys1(0x5f);
	push_offset(L0275a);
	jmp();

L02785:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0279a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);

L027bd:
	push_word(0x504);
	load(0x2);
	push_offset(L027f9);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L027f9);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L027f9);
	jc(0x1);
	sys1(0x17);
	push_offset(L027f9);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L027f9);
	jc(0x0);
	sys1(0x5f);
	push_offset(L027bd);
	jmp();

L027f9:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L0283e);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0273c);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L0284c);
	jmp();

L0283e:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0279a);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L0284c:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L028a5);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0273c);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L028a5:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L028c8:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0290c);
	jc(0x1);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L0290c);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);

L0290c:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L028c8);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L0292d:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L02950);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L0273c);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L02950:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L0292d);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L02975:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L02981:
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L029b0);
	jc(0x1);
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);

L029b0:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L02981);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02a1e);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0273c);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L02a1e:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L02a29:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L02a95);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x40);
	lt();
	push_offset(L02aa0);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1a444);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L02a95:
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_offset(L02aab);
	jmp();

L02aa0:
	push_string("バストショット制御向けプリロード対象ビットマップ配列に空きがありません");
	cmd_79();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L02aab:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x368);
	add();
	store_base();
	push_base_offset(0x2e4);
	move_arg(0x2);
	push_base_offset(0x2e8);
	move_arg(0x2);
	push_base_offset(0x2ec);
	move_arg(0x2);
	push_base_offset(0x2f0);
	move_arg(0x2);
	push_base_offset(0x2f4);
	move_arg(0x2);
	push_base_offset(0x2f8);
	move_arg(0x2);
	push_base_offset(0x2fc);
	move_arg(0x2);
	push_base_offset(0x300);
	move_arg(0x2);
	push_base_offset(0x304);
	move_arg(0x2);
	push_base_offset(0x308);
	move_arg(0x2);
	push_base_offset(0x30c);
	move_arg(0x2);
	push_base_offset(0x310);
	move_arg(0x2);
	push_base_offset(0x314);
	move_arg(0x2);
	push_base_offset(0x318);
	move_arg(0x2);
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x320);
	move_arg(0x2);
	push_base_offset(0x324);
	move_arg(0x2);
	push_base_offset(0x328);
	move_arg(0x2);
	push_base_offset(0x32c);
	move_arg(0x2);
	push_base_offset(0x330);
	move_arg(0x2);
	push_base_offset(0x334);
	move_arg(0x2);
	push_base_offset(0x338);
	move_arg(0x2);
	push_base_offset(0x33c);
	move_arg(0x2);
	push_base_offset(0x340);
	move_arg(0x2);
	push_base_offset(0x344);
	move_arg(0x2);
	push_base_offset(0x348);
	move_arg(0x2);
	push_base_offset(0x34c);
	move_arg(0x2);
	push_base_offset(0x350);
	move_arg(0x2);
	push_base_offset(0x354);
	move_arg(0x2);
	push_base_offset(0x358);
	move_arg(0x2);
	push_base_offset(0x35c);
	move_arg(0x2);
	push_base_offset(0x360);
	move_arg(0x2);
	push_base_offset(0x364);
	move_arg(0x2);
	push_base_offset(0x368);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L035a3);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x1a434);
	add();
	load(0x2);
	push_offset(L035a3);
	jc(0x0);
	push_base_offset(0x2e0);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	geq();
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x2f0);
	move_arg(0x2);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L02c25);
	jc(0x0);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x10);
	sub();
	lt();
	push_offset(L02c0f);
	jc(0x0);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	push_byte(0x2);
	mul();
	lt();
	push_offset(L02bef);
	jc(0x0);
	push_base_offset(0x2f8);
	push_word(0x732);
	push_word(0x100);
	sub();
	move(0x2);
	push_base_offset(0x2e0);
	push_byte(0x1);
	move(0x2);
	push_offset(L02c25);
	jmp();

L02bef:
	push_base_offset(0x2f8);
	push_word(0x7b0);
	push_word(0x100);
	sub();
	push_base_offset(0x2f8);
	load(0x2);
	add();
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x10);
	sub();
	sub();
	move(0x2);
	push_offset(L02c25);
	jmp();

L02c0f:
	push_base_offset(0x2f8);
	push_word(0x500);
	push_word(0x100);
	sub();
	push_base_offset(0x2f8);
	load(0x2);
	add();
	push_word(0x80);
	sub();
	move(0x2);

L02c25:
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x368);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L02c4f);
	jc(0x0);
	push_string("バストショット制御コマンド情報配列に空きがありません");
	cmd_79();
	push_offset(L035a3);
	jmp();

L02c4f:
	push_base_offset(0x124);
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x368);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L02c77:
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	lt();
	push_offset(L02cd3);
	jc(0x1);
	push_base_offset(0x1d4);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_word(0xb0);
	memcpy();
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L02cc2);
	jc(0x0);
	push_base_offset(0x120);
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	load(0x2);
	move(0x2);

L02cc2:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L02c77);
	jmp();

L02cd3:
	push_base_offset(0x1d4);
	push_word(0xb0);
	memclr();
	push_base_offset(0x1d4);
	push_byte(0x0);
	add();
	push_base_offset(0x364);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x4);
	add();
	push_base_offset(0x33c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x8);
	add();
	push_base_offset(0x338);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0xc);
	add();
	push_base_offset(0x334);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x10);
	add();
	push_base_offset(0x330);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x14);
	add();
	push_base_offset(0x32c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x18);
	add();
	push_base_offset(0x328);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x1c);
	add();
	push_base_offset(0x324);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x20);
	add();
	push_base_offset(0x320);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x24);
	add();
	push_base_offset(0x31c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x28);
	add();
	push_base_offset(0x318);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x30);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x34);
	add();
	push_base_offset(0x314);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x38);
	add();
	push_base_offset(0x310);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x4c);
	add();
	push_base_offset(0x308);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x50);
	add();
	push_base_offset(0x304);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x54);
	add();
	push_base_offset(0x300);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x58);
	add();
	push_base_offset(0x2fc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x5c);
	add();
	push_base_offset(0x2f8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x60);
	add();
	push_base_offset(0x2f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x30c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02e00);
	jc(0x1);
	push_base_offset(0x1d4);
	push_byte(0x3c);
	add();
	push_base_offset(0x30c);
	load(0x2);
	push_byte(0x10);
	memcpy();

L02e00:
	push_base_offset(0x360);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02e58);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x360);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	move_arg(0x2);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L02e66);
	jc(0x1);
	push_base_offset(0x2d4);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L02e66);
	jc(0x0);
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	load(0x2);
	push_offset(L02a29);
	call();
	push_offset(L035a3);
	jc(0x1);
	push_offset(L02e66);
	jmp();

L02e58:
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L02e66:
	push_base_offset(0x35c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02eb1);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L02eb1);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x35c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	move_arg(0x2);
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	load(0x2);
	push_offset(L02a29);
	call();
	push_offset(L035a3);
	jc(0x1);
	push_offset(L02ebf);
	jmp();

L02eb1:
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L02ebf:
	push_base_offset(0x1d4);
	push_byte(0x6c);
	add();
	push_base_offset(0x358);
	load(0x2);
	move(0x2);
	push_base_offset(0x344);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02f17);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x344);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	move_arg(0x2);
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	load(0x2);
	push_offset(L02a29);
	call();
	push_offset(L035a3);
	jc(0x1);
	push_base_offset(0x1d4);
	push_byte(0x74);
	add();
	push_base_offset(0x340);
	load(0x2);
	move(0x2);
	push_offset(L02f25);
	jmp();

L02f17:
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L02f25:
	push_base_offset(0x350);
	load(0x2);
	push_byte(0x2);
	geq();
	push_offset(L02f52);
	jc(0x0);
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1d4);
	push_word(0x80);
	add();
	push_base_offset(0x350);
	load(0x2);
	move(0x2);
	push_offset(L030d9);
	jmp();

L02f52:
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_word(0x80);
	add();
	push_base_offset(0x350);
	load(0x2);
	move(0x2);
	push_base_offset(0x11c);
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x354);
	load(0x2);
	push_offset(L041ba);
	call();
	push_offset(L030d1);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x348);
	load(0x2);
	push_offset(L041ba);
	call();
	push_offset(L030d1);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x34c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L030d9);
	jc(0x1);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0304a:
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x34c);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L041ba);
	call();
	push_offset(L030d1);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x350);
	load(0x2);
	lt();
	push_offset(L0304a);
	jc(0x0);
	push_offset(L030d9);
	jmp();

L030d1:
	push_string("バストショット制御向けアニメーション領域に空きがありません");
	cmd_79();
	push_offset(L035a3);
	jmp();

L030d9:
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	push_base_offset(0x2f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x2f0);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L03193);
	jc(0x0);
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x2f0);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	push_byte(0x0);
	leq();
	push_offset(L03170);
	jc(0x1);
	push_base_offset(0x120);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);

L03170:
	push_base_offset(0x2dc);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x2dc);
	load(0x2);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x1);
	sub();
	ternary();
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	move_arg(0x2);

L03193:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0319a:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0319a);
	jc(0x0);
	push_base_offset(0x2ec);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03328);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L03328);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x2ec);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_word(0x84);
	add();
	move_arg(0x2);
	push_base_offset(0x118);
	push_word(0xab4);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0327d);
	jc(0x0);
	push_byte(0x1);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x118);
	push_byte(0x0);
	add();
	move_arg(0x2);
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x118);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x2d8);
	push_byte(0x1);
	move(0x2);

L0324c:
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0324c);
	jc(0x0);

L0327d:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L03284:
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0330a);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	sys1(0xdd);
	push_base_offset(0xd4);
	push_word(0xab0);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L032f5);
	jc(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L032f5);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);

L032f5:
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);

L0330a:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L03284);
	jc(0x0);
	push_offset(L03337);
	jmp();

L03328:
	push_base_offset(0x1d4);
	push_word(0x84);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03337:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0333e:
	push_base_offset(0x2e4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0342e);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0342e);
	jc(0x1);
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x2e8);
	load(0x2);
	geq();
	push_offset(L0342e);
	jc(0x0);
	push_base_offset(0x2e4);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0342e);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x2e4);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xd4);
	push_word(0xab0);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0340a);
	jc(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0340a);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_offset(L03446);
	jmp();

L0340a:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_offset(L03446);
	jmp();

L0342e:
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03446:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0333e);
	jc(0x0);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L03467:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L02a29);
	call();
	push_offset(L035a3);
	jc(0x1);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L03467);
	jc(0x0);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0350c);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x59c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x5a0);
	add();
	push_byte(0x0);
	move(0x2);

L0350c:
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_base_offset(0x1d4);
	push_word(0xb0);
	memcpy();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2e0);
	load(0x2);
	push_base_offset(0x364);
	load(0x2);
	push_byte(0x4);
	eq();
	push_base_offset(0x368);
	load(0x2);
	push_dword(0x45f14);
	load(0x2);
	eq();
	bool_and();
	bool_or();
	push_offset(L03578);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_base_offset(0x368);
	load(0x2);
	move(0x2);
	push_offset(L035a3);
	jmp();

L03578:
	push_base_offset(0x368);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	load(0x2);
	eq();
	push_offset(L035a3);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L035a3:
	load_base();
	push_word(0x368);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x128);
	add();
	store_base();
	push_base_offset(0x124);
	move_arg(0x2);
	push_base_offset(0x128);
	move_arg(0x2);
	push_base_offset(0x120);
	push_base_offset(0x128);
	load(0x2);
	push_word(0xb0);
	memcpy();
	push_base_offset(0x70);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x70);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x20);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x24);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x28);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x20);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x24);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x28);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x2c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x30);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x34);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x38);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x44);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x4c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x64);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x68);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x6c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	move_arg(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x120);
	push_word(0xb0);
	memcpy();
	load_base();
	push_word(0x128);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();

L03859:
	push_word(0x504);
	load(0x2);
	push_offset(L03878);
	jc(0x0);
	push_dword(0x3ade4);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L03878);
	jc(0x1);
	sys1(0x5f);
	push_offset(L03859);
	jmp();

L03878:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L03884:
	load_base();
	push_byte(0x0);
	add();
	store_base();

L03889:
	push_word(0x504);
	load(0x2);
	push_offset(L038ba);
	jc(0x0);
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L038ba);
	jc(0x1);
	push_dword(0x3adf4);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L038ba);
	jc(0x0);
	sys1(0x5f);
	push_offset(L03889);
	jmp();

L038ba:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x158);
	add();
	store_base();
	push_base_offset(0x150);
	move_arg(0x2);
	push_base_offset(0x154);
	move_arg(0x2);
	push_base_offset(0x158);
	move_arg(0x2);
	sys1(0x17);
	push_base_offset(0x148);
	move_arg(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc8);
	add();
	load(0x2);
	bool_and();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	bool_or();
	push_byte(0x20);
	push_byte(0x10);
	add();
	load(0x1);
	push_byte(0xa);
	push_byte(0x1);
	add();
	eq();
	bool_or();
	push_byte(0x0);
	push_base_offset(0x154);
	load(0x2);
	ternary();
	push_base_offset(0x154);
	move_arg(0x2);
	push_dword(0x3adf4);
	push_byte(0x4);
	add();
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_offset(L03884);
	call();
	push_base_offset(0x44);
	push_dword(0x42abc);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	grp2(0x38);
	push_base_offset(0x20);
	push_word(0x400);
	push_byte(0x69);
	add();
	grp1(0x16);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_offset(L0396f);
	jc(0x1);
	push_word(0x400);
	push_byte(0x6a);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	grp2(0x1f);

L0396f:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L039f8);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xba8);
	load(0x2);
	push_byte(0x20);
	push_word(0xf8);
	add();
	load(0x2);
	push_byte(0x20);
	push_word(0xf4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x400);
	push_byte(0x69);
	add();
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	push_byte(0x70);
	add();
	load(0x1);
	push_dword(0x9fab8);
	push_dword(0x2211c);
	add();
	load(0x2);
	push_byte(0x10);
	push_base_offset(0x8);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	sys1(0x41);
	push_byte(0x0);
	push_offset(L039f8);
	jc(0x1);
	push_base_offset(0x148);
	load(0x2);
	push_offset(L039f8);
	jc(0x0);
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x144);
	push_string("未定義のキャラクター名 [ %s ] が指定されました");
	cmd_6f();
	push_base_offset(0x144);
	cmd_79();

L039f8:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03b3f);
	jc(0x1);
	push_base_offset(0x24);
	load(0x2);
	push_offset(L03aa3);
	jc(0x0);
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_byte(0x1);
	push_word(0x100);
	push_word(0x740);
	grp1(0x56);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L03bd8);
	jmp();

L03aa3:
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_word(0x400);
	push_byte(0x6a);
	add();
	push_word(0x100);
	push_byte(0x0);
	push_word(0x740);
	push_byte(0x1);
	grp1(0x58);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	move(0x2);
	push_offset(L03bd8);
	jmp();

L03b3f:
	push_base_offset(0x24);
	load(0x2);
	push_offset(L03c68);
	jc(0x1);
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x740);
	grp1(0x56);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	move(0x2);

L03bd8:
	push_dword(0x42aac);
	load(0x2);
	push_byte(0x1);
	grp1(0x30);
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x14c);
	load(0x2);
	ternary();
	push_dword(0x3adf4);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_dword(0x3adf4);
	push_byte(0xc);
	add();
	push_dword(0x42aac);
	load(0x2);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14c);
	push_base_offset(0x154);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x1);
	geq();
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_dword(0x3adf4);
	push_byte(0x1c);
	add();
	move_arg(0x2);

L03c68:
	load_base();
	push_word(0x158);
	sub();
	store_base();
	ret();

L03c6f:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);

L03c8c:
	push_word(0x504);
	load(0x2);
	push_offset(L03cab);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L03cab);
	jc(0x1);
	sys1(0x5f);
	push_offset(L03c8c);
	jmp();

L03cab:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L03cb7:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);

L03cd9:
	push_word(0x504);
	load(0x2);
	push_offset(L03d09);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L03d09);
	jc(0x1);
	sys1(0x17);
	push_offset(L03d09);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L03d09);
	jc(0x0);
	sys1(0x5f);
	push_offset(L03cd9);
	jmp();

L03d09:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L03d45);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03c6f);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L03d53);
	jmp();

L03d45:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03cb7);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L03d53:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x94);
	add();
	store_base();
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x74);
	move_arg(0x2);
	push_base_offset(0x78);
	move_arg(0x2);
	push_base_offset(0x7c);
	move_arg(0x2);
	push_base_offset(0x80);
	move_arg(0x2);
	push_base_offset(0x84);
	move_arg(0x2);
	push_base_offset(0x88);
	move_arg(0x2);
	push_base_offset(0x8c);
	move_arg(0x2);
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x70);
	load(0x2);
	push_dword(0x7fffffff);
	ternary();
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x6c);
	push_byte(0x6c);
	memclr();
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x8c);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x84);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	push_base_offset(0x7c);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	push_base_offset(0x78);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	push_base_offset(0x74);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	push_base_offset(0x70);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x24);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x28);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x30);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x34);
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x38);
	add();
	push_base_offset(0x70);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x40);
	add();
	push_word(0x101);
	push_base_offset(0x8c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x3c);
	add();
	push_base_offset(0x6c);
	push_byte(0x40);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x44);
	add();
	push_base_offset(0x88);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x48);
	add();
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3ae20);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	push_base_offset(0x6c);
	push_byte(0x6c);
	memcpy();
	load_base();
	push_word(0x94);
	sub();
	store_base();
	ret();

L03f2a:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L03f8a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x30);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);

L03f8a:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03f90:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03f9c:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L03f2a);
	call();
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x52);
	lt();
	push_offset(L03f9c);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x58);
	add();
	store_base();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x40);
	push_base_offset(0x44);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x40);
	move_arg(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x2c);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x3c);
	move_arg(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x30);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x3c);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x38);
	load(0x2);
	move(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x14);
	add();
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x34);
	push_byte(0x14);
	add();
	move_arg(0x2);
	push_base_offset(0x34);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x1c);
	add();
	push_base_offset(0x40);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x24);
	add();
	push_base_offset(0x4c);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x28);
	add();
	push_base_offset(0x48);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	sub();
	move(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x34);
	push_byte(0x34);
	memcpy();
	load_base();
	push_byte(0x58);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3d0b8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L041b4);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x60);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	memclr();

L041b4:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L041ba:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04220);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L041ee:
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7);
	sar();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L041ee);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_offset(L042a9);
	jmp();

L04220:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L04227:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	geq();
	push_offset(L042c2);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7f);
	and();
	move(0x0);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7);
	sar();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04295);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	load(0x0);
	push_word(0x80);
	or();
	move(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L04227);
	jmp();

L04295:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L042a9:
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L042c2);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L042c2:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L042cd:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0xc);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0432c);
	jc(0x1);
	push_base_offset(0x10);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	cmd_0c(0x2, 0x4);
	push_dword(0x42768);
	push_byte(0xc);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x10);
	sys1(0x4a);

L0432c:
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L04332:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L0434d:
	push_base_offset(0x4);
	push_word(0x930);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_offset(L043aa);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_offset(L043c4);
	jmp();

L043aa:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L0434d);
	jc(0x0);

L043c4:
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L043ca:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L043db:
	push_base_offset(0x4);
	push_word(0x930);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_offset(L0442a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L042cd);
	call();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	memclr();

L0442a:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L043db);
	jc(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L0444a:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9b8);
	load(0x2);
	push_offset(L04489);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_dword(-0x3);
	push_offset(L04332);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L043ca);
	call();
	push_word(0x9b8);
	push_byte(0x1);
	move(0x2);

L04489:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0448f:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9bc);
	load(0x2);
	push_offset(L044ce);
	jc(0x0);
	push_byte(0x1);
	push_byte(0x3);
	push_dword(-0x3);
	push_offset(L04332);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L043ca);
	call();
	push_word(0x9bc);
	push_byte(0x1);
	move(0x2);

L044ce:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L044d4:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9b8);
	load(0x2);
	push_offset(L04516);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x2);
	push_dword(-0x3);
	push_offset(L04332);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L043ca);
	call();
	push_word(0x9b8);
	push_byte(0x0);
	move(0x2);

L04516:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0451c:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9bc);
	load(0x2);
	push_offset(L0455e);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x3);
	push_dword(-0x3);
	push_offset(L04332);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L043ca);
	call();
	push_word(0x9bc);
	push_byte(0x0);
	move(0x2);

L0455e:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L04564:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04580);
	jc(0x1);
	push_offset(L0444a);
	call();
	push_offset(L04584);
	jmp();

L04580:
	push_offset(L044d4);
	call();

L04584:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0458a:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L045a6);
	jc(0x1);
	push_offset(L0448f);
	call();
	push_offset(L045aa);
	jmp();

L045a6:
	push_offset(L0451c);
	call();

L045aa:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L045c1:
	push_base_offset(0x4);
	push_word(0x92c);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04609);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04609);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	grp2(0x31);

L04609:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L045c1);
	jc(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L04629:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04656);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	grp1(0x51);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4c);
	memclr();

L04656:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0465c:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L04629);
	call();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xc);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x14);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	grp1(0x50);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	grp1(0x38);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04745);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x33);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L04745:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L0474b:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04784);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x36);

L04784:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L047b9);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x34);

L047b9:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L047bf:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L047ee);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp2(0x31);

L047ee:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L047f4:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04a62);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_offset(L04bff);
	call();
	push_offset(L049de);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04960);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L04960);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L048e1);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	div();
	move(0x2);
	push_offset(L0492f);
	jmp();

L048e1:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L0492f);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	sub();
	push_base_offset(0x14);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	div();
	move(0x2);

L0492f:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x57);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x38);
	push_byte(0x0);
	grp1(0x0);
	push_offset(L049de);
	jmp();

L04960:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x20);
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	push_word(0x100);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	grp1(0x56);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x38);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x1);
	grp1(0x54);

L049de:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x10);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);

L04a62:
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L04a68:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04bf9);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L04bf9);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L04bff);
	call();
	push_offset(L04ada);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x14);
	memclr();
	push_offset(L04bf9);
	jmp();

L04ada:
	push_base_offset(0x4);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04ba2);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L04b51);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	sub();
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	div();
	move(0x2);
	push_offset(L04b9e);
	jmp();

L04b51:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L04b67);
	jc(0x1);
	push_offset(L04ba2);
	jmp();

L04b67:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L04b9e);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	div();
	move(0x2);

L04b9e:
	push_offset(L04bc6);
	jmp();

L04ba2:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x20);
	add();
	move_arg(0x2);

L04bc6:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L04bf9:
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L04bff:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04c75);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x2);
	push_byte(0x1);
	sub();
	move(0x2);

L04c2e:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	leq();
	push_offset(L04c75);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04c64);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_offset(L04c75);
	jmp();

L04c64:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_offset(L04c2e);
	jmp();

L04c75:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04cf4);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L04cf4);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L04ce0);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_offset(L04cf4);
	jmp();

L04ce0:
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L04bff);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L04cf4:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L04cff:
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_byte(0x20);
	push_byte(0x6);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L04e39);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L04e39);
	jc(0x1);
	push_base_offset(0x30);
	push_word(0x400);
	push_byte(0x57);
	add();
	grp1(0x16);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e8);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	lt();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e8);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0xc);
	push_dword(0x9fab8);
	push_dword(0x220e8);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x30);
	push_byte(0xc);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x2211c);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	gt();
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x14);
	push_word(0x3c0);
	push_word(0x2d0);
	sub();
	push_base_offset(0x8);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0x2d0);
	push_base_offset(0x14);
	load(0x2);
	add();
	push_word(0x2d0);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	sar();
	add();
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	sub();
	move(0x2);

L04e39:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_byte(0x20);
	push_byte(0x6);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L04e77);
	jc(0x1);
	push_base_offset(0x4);
	push_word(0x3c0);
	push_word(0x2d0);
	sub();
	move(0x2);

L04e77:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_byte(0x20);
	push_byte(0x6);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L04ed9);
	jc(0x1);
	push_byte(0x20);
	push_word(0x12e);
	add();
	load(0x1);
	push_byte(0x2);
	eq();
	push_offset(L04ed9);
	jc(0x1);
	push_base_offset(0x20);
	push_word(0x400);
	push_byte(0x5a);
	add();
	grp1(0x16);
	push_base_offset(0x4);
	push_word(0x2d0);
	push_base_offset(0x20);
	push_byte(0xc);
	add();
	load(0x2);
	sub();
	push_word(0x1c7);
	sub();
	move(0x2);

L04ed9:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L04ee9:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x1668);
	push_byte(0x10);
	memclr();
	push_byte(0x20);
	push_word(0x8c);
	add();
	load(0x1);
	push_offset(L04f13);
	jc(0x1);
	push_word(0x1668);
	push_byte(0xc);
	add();
	push_word(0x2b8);
	push_byte(0x18);
	add();
	push_word(0x2b8);
	sub();
	move(0x2);

L04f13:
	push_word(0x167c);
	push_byte(0x0);
	move(0x2);
	push_word(0x1680);
	push_byte(0x0);
	move(0x2);
	push_word(0x1684);
	push_byte(0x0);
	move(0x2);
	push_word(0x1688);
	push_byte(0x0);
	move(0x2);
	push_word(0x168c);
	push_byte(0x0);
	move(0x2);
	push_string("sysprg.arc");
	push_string("msgwndiconmngr._bp");
	push_word(0x100);
	push_word(0xfa0);
	push_word(0x4000);
	sys1(0x44);
	push_word(0x1678);
	move_arg(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L04f52:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x167c);
	push_byte(0x1);
	move(0x2);

L04f5e:
	sys1(0x5f);
	push_word(0x1678);
	load(0x2);
	sys1(0x47);
	push_offset(L04f5e);
	jc(0x0);
	push_word(0x1678);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x1680);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x1684);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x1688);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x168c);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
