	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x42af8);
	push_word(0x2c0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0019d);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c1);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00595);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c2);
	push_byte(0x2);
	shl();
	add();
	push_offset(L009ee);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c3);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00d57);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c4);
	push_byte(0x2);
	shl();
	add();
	push_offset(L011ac);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c5);
	push_byte(0x2);
	shl();
	add();
	push_offset(L014fa);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c6);
	push_byte(0x2);
	shl();
	add();
	push_offset(L018cf);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c7);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01be7);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2c8);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01f3d);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2ca);
	push_byte(0x2);
	shl();
	add();
	push_offset(L020d5);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2cb);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0226f);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2cd);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02501);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2ce);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02a44);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2cf);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02e31);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2d0);
	push_byte(0x2);
	shl();
	add();
	push_offset(L02fc8);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2d2);
	push_byte(0x2);
	shl();
	add();
	push_offset(L030e6);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x2cc);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0012c);
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0012c:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00181);
	jc(0x1);

L00181:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L00195);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L00195:
	push_byte(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L0019d:
	load_base();
	push_word(0xe7c);
	add();
	store_base();
	push_base_offset(0x17c);
	push_base_offset(0xb7c);
	push_base_offset(0xa7c);
	push_base_offset(0x97c);
	push_base_offset(0x87c);
	push_base_offset(0x77c);
	push_base_offset(0x67c);
	push_base_offset(0x57c);
	push_base_offset(0x47c);
	push_base_offset(0x37c);
	push_base_offset(0x27c);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x154);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x150);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x14c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x144);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x140);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x13c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x138);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x134);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x130);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x128);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x124);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x120);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x11c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x114);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x110);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x108);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x104);
	move_arg(0x2);
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x128);
	load(0x2);
	push_word(0x800);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_string("イメージの原点Ｙ座標");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	push_string("描画スタイル");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x1);
	add();
	push_string("プライオリティ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	ternary();
	push_base_offset(0x138);
	move_arg(0x2);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x144);
	load(0x2);
	ternary();
	push_base_offset(0x134);
	move_arg(0x2);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x140);
	load(0x2);
	ternary();
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0xe7c);
	push_base_offset(0x150);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x150);
	move_arg(0x2);
	push_base_offset(0xd7c);
	push_base_offset(0x14c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0xc7c);
	push_base_offset(0x10c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x17c);
	push_byte(0xa);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_string("data02xxx.arc");
	push_base_offset(0x150);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x14c);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x10c);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x17c);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L00578);
	jc(0x1);
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00474);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x150);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L00474:
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00493);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x14c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L00493:
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x138);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_base_offset(0x144);
	load(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xcc0c);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xcd0c);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce0c);
	add();
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce8c);
	add();
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_byte(0x0);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x17c);
	push_offset(L0513e);
	call();

L00578:
	push_base_offset(0x114);
	load(0x2);
	push_offset(L0058c);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L0058c:
	push_byte(0x0);
	load_base();
	push_word(0xe7c);
	sub();
	store_base();
	ret();

L00595:
	load_base();
	push_word(0xe8c);
	add();
	store_base();
	push_base_offset(0x188);
	push_base_offset(0xb88);
	push_base_offset(0xa88);
	push_base_offset(0x988);
	push_base_offset(0x888);
	push_base_offset(0x788);
	push_base_offset(0x688);
	push_base_offset(0x588);
	push_base_offset(0x488);
	push_base_offset(0x388);
	push_base_offset(0x288);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x160);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x15c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x158);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x154);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x150);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x144);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x140);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x13c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x138);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x134);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x130);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x128);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x124);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x120);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x11c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x114);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x110);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x108);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x104);
	move_arg(0x2);
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_byte(0xe);
	ternary();
	push_base_offset(0xe8c);
	move_arg(0x2);
	push_base_offset(0x160);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xe8c);
	load(0x2);
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x154);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("イメージ形式");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x12c);
	load(0x2);
	push_word(0x800);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_string("イメージの原点Ｙ座標");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	push_string("描画スタイル");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_word(0x100);
	push_byte(0x1);
	add();
	push_string("透明度");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x1);
	add();
	push_string("プライオリティ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x150);
	load(0x2);
	ternary();
	push_base_offset(0x13c);
	move_arg(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	ternary();
	push_base_offset(0x138);
	move_arg(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	ternary();
	push_base_offset(0x134);
	move_arg(0x2);
	push_base_offset(0xe88);
	push_base_offset(0x15c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x15c);
	move_arg(0x2);
	push_base_offset(0xd88);
	push_base_offset(0x158);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x158);
	move_arg(0x2);
	push_base_offset(0xc88);
	push_base_offset(0x10c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x188);
	push_byte(0xa);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_string("data02xxx.arc");
	push_base_offset(0x15c);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x158);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x10c);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x188);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L009d1);
	jc(0x1);
	push_base_offset(0x15c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L008de);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x15c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L008de:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L008fd);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x158);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L008fd:
	push_base_offset(0x160);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x15c);
	load(0x2);
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x154);
	load(0x2);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_base_offset(0x144);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xcd0c);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x160);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce0c);
	add();
	push_base_offset(0x160);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce8c);
	add();
	push_base_offset(0x160);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0x124);
	load(0x2);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x188);
	push_offset(L0513e);
	call();

L009d1:
	push_base_offset(0x114);
	load(0x2);
	push_offset(L009e5);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L009e5:
	push_byte(0x0);
	load_base();
	push_word(0xe8c);
	sub();
	store_base();
	ret();

L009ee:
	load_base();
	push_word(0x1164);
	add();
	store_base();
	push_base_offset(0x260);
	push_base_offset(0xc60);
	push_base_offset(0xb60);
	push_base_offset(0xa60);
	push_base_offset(0x960);
	push_base_offset(0x860);
	push_base_offset(0x760);
	push_base_offset(0x660);
	push_base_offset(0x560);
	push_base_offset(0x460);
	push_base_offset(0x360);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x238);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x234);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x230);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x22c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x21c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x218);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00d3a);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00d3a);
	jc(0x1);
	push_base_offset(0x1160);
	push_base_offset(0x234);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x234);
	move_arg(0x2);
	push_base_offset(0x1060);
	push_base_offset(0x230);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x230);
	move_arg(0x2);
	push_base_offset(0xd60);
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x260);
	push_byte(0xa);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_base_offset(0x204);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x194);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x238);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00bdd);
	jc(0x1);
	push_base_offset(0x234);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L00bdd);
	jc(0x0);
	push_string("data02xxx.arc");
	push_base_offset(0x234);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L00d3a);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x234);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L00bdd:
	push_base_offset(0x230);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00c11);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x230);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L00d3a);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x230);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L00c11:
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L00d3a);
	jc(0x1);
	push_base_offset(0x260);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L00d3a);
	jc(0x1);
	push_base_offset(0x194);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00c61);
	jc(0x1);
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00c7c);
	jc(0x1);
	push_base_offset(0x234);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L00c7c);
	jc(0x0);

L00c61:
	push_base_offset(0x194);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x194);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L00c7c:
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	neq();
	push_byte(0x0);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x1164);
	move_arg(0x2);
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x234);
	load(0x2);
	push_base_offset(0x230);
	load(0x2);
	push_base_offset(0x1164);
	load(0x2);
	push_base_offset(0x204);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x194);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x194);
	push_byte(0x10);
	add();
	push_base_offset(0x194);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_base_offset(0x22c);
	load(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x220);
	load(0x2);
	push_dword(-0x7fffffff);
	push_base_offset(0x204);
	push_byte(0x54);
	add();
	push_byte(0x0);
	push_dword(-0x7fffffff);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x21c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x260);
	push_offset(L0513e);
	call();

L00d3a:
	push_base_offset(0x218);
	load(0x2);
	push_offset(L00d4e);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L00d4e:
	push_byte(0x0);
	load_base();
	push_word(0x1164);
	sub();
	store_base();
	ret();

L00d57:
	load_base();
	push_word(0x1178);
	add();
	store_base();
	push_base_offset(0x274);
	push_base_offset(0xc74);
	push_base_offset(0xb74);
	push_base_offset(0xa74);
	push_base_offset(0x974);
	push_base_offset(0x874);
	push_base_offset(0x774);
	push_base_offset(0x674);
	push_base_offset(0x574);
	push_base_offset(0x474);
	push_base_offset(0x374);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x24c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x248);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x244);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x240);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x23c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x238);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x234);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x230);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x22c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x21c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x218);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x240);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_byte(0xe);
	ternary();
	push_base_offset(0x1178);
	move_arg(0x2);
	push_base_offset(0x24c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x1178);
	load(0x2);
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x240);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("イメージ形式");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x228);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0x100);
	push_byte(0x1);
	add();
	push_string("透明度");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x224);
	load(0x2);
	push_byte(0x0);
	push_byte(0x10);
	push_string("移動方式");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x0);
	push_byte(0x10);
	push_string("回転方式");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x1174);
	push_base_offset(0x248);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x248);
	move_arg(0x2);
	push_base_offset(0x1074);
	push_base_offset(0x244);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x244);
	move_arg(0x2);
	push_base_offset(0xd74);
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x274);
	push_byte(0xa);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_base_offset(0x204);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x24c);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x194);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x24c);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01008);
	jc(0x1);
	push_base_offset(0x248);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L01008);
	jc(0x0);
	push_string("data02xxx.arc");
	push_base_offset(0x248);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x248);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L01008:
	push_base_offset(0x244);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0103c);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x244);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x244);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L0103c:
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x274);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L0118f);
	jc(0x1);
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x240);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x1178);
	move_arg(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x228);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x228);
	move_arg(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L010bc);
	jc(0x1);
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L010d7);
	jc(0x1);
	push_base_offset(0x248);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L010d7);
	jc(0x0);

L010bc:
	push_base_offset(0x194);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x194);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L010d7:
	push_base_offset(0x24c);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x248);
	load(0x2);
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x1178);
	load(0x2);
	push_base_offset(0x204);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x194);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x194);
	push_byte(0x10);
	add();
	push_base_offset(0x194);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_base_offset(0x23c);
	load(0x2);
	push_base_offset(0x238);
	load(0x2);
	push_base_offset(0x234);
	load(0x2);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x22c);
	load(0x2);
	push_dword(-0x7fffffff);
	push_base_offset(0x204);
	push_byte(0x54);
	add();
	push_base_offset(0x230);
	load(0x2);
	push_dword(0xffff);
	and();
	push_base_offset(0x228);
	load(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_base_offset(0x220);
	load(0x2);
	push_dword(-0x80000000);
	push_base_offset(0x21c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x274);
	push_offset(L0513e);
	call();

L0118f:
	push_base_offset(0x218);
	load(0x2);
	push_offset(L011a3);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L011a3:
	push_byte(0x0);
	load_base();
	push_word(0x1178);
	sub();
	store_base();
	ret();

L011ac:
	load_base();
	push_word(0xf64);
	add();
	store_base();
	push_base_offset(0x260);
	push_base_offset(0xc60);
	push_base_offset(0xb60);
	push_base_offset(0xa60);
	push_base_offset(0x960);
	push_base_offset(0x860);
	push_base_offset(0x760);
	push_base_offset(0x660);
	push_base_offset(0x560);
	push_base_offset(0x460);
	push_base_offset(0x360);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x238);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x234);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x230);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x22c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x21c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x218);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L014dd);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L014dd);
	jc(0x1);
	push_base_offset(0xf60);
	push_base_offset(0x234);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x234);
	move_arg(0x2);
	push_base_offset(0xe60);
	push_base_offset(0x230);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x230);
	move_arg(0x2);
	push_base_offset(0xd60);
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x260);
	push_byte(0xa);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01349);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x234);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L014dd);
	jc(0x1);
	push_base_offset(0x204);
	push_base_offset(0x234);
	load(0x2);
	cmd_6a();
	push_base_offset(0x204);
	cmd_6d();
	push_base_offset(0x204);
	sys1(0x84);

L01349:
	push_base_offset(0x230);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0137d);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x230);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L014dd);
	jc(0x1);
	push_base_offset(0x204);
	push_base_offset(0x230);
	load(0x2);
	cmd_6a();
	push_base_offset(0x204);
	cmd_6d();
	push_base_offset(0x204);
	sys1(0x84);

L0137d:
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L014dd);
	jc(0x1);
	push_base_offset(0x260);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L014dd);
	jc(0x1);
	push_base_offset(0x104);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x94);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x238);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	neq();
	push_byte(0x0);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0xf64);
	move_arg(0x2);
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01416);
	jc(0x1);
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01431);
	jc(0x1);

L01416:
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x94);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L01431:
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x234);
	load(0x2);
	push_base_offset(0x230);
	load(0x2);
	push_base_offset(0xf64);
	load(0x2);
	push_base_offset(0x104);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x10);
	add();
	push_base_offset(0x94);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x22c);
	load(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_base_offset(0x22c);
	load(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x220);
	load(0x2);
	push_dword(-0x7fffffff);
	push_base_offset(0x104);
	push_byte(0x54);
	add();
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_byte(0x5);
	push_byte(0x0);
	push_dword(-0x7fffffff);
	push_base_offset(0x21c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x260);
	push_offset(L0513e);
	call();

L014dd:
	push_base_offset(0x218);
	load(0x2);
	push_offset(L014f1);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L014f1:
	push_byte(0x0);
	load_base();
	push_word(0xf64);
	sub();
	store_base();
	ret();

L014fa:
	load_base();
	push_word(0xf6c);
	add();
	store_base();
	push_base_offset(0x268);
	push_base_offset(0xc68);
	push_base_offset(0xb68);
	push_base_offset(0xa68);
	push_base_offset(0x968);
	push_base_offset(0x868);
	push_base_offset(0x768);
	push_base_offset(0x668);
	push_base_offset(0x568);
	push_base_offset(0x468);
	push_base_offset(0x368);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x240);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x23c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x238);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x234);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x230);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x22c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x21c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x218);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_byte(0xe);
	ternary();
	push_base_offset(0xf6c);
	move_arg(0x2);
	push_base_offset(0x240);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xf6c);
	load(0x2);
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x234);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("イメージ形式");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x1);
	add();
	push_string("プライオリティ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0xf68);
	push_base_offset(0x23c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x23c);
	move_arg(0x2);
	push_base_offset(0xe68);
	push_base_offset(0x238);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x238);
	move_arg(0x2);
	push_base_offset(0xd68);
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x268);
	push_byte(0xa);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_base_offset(0x204);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x240);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x194);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x240);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x23c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01746);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x23c);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x23c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L01746:
	push_base_offset(0x238);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0177a);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x238);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x238);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L0177a:
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x268);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L018b2);
	jc(0x1);
	push_base_offset(0x23c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x234);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0xf6c);
	move_arg(0x2);
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x220);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x220);
	move_arg(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L017eb);
	jc(0x1);
	push_base_offset(0x23c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01806);
	jc(0x1);

L017eb:
	push_base_offset(0x194);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x194);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L01806:
	push_base_offset(0x240);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x23c);
	load(0x2);
	push_base_offset(0x238);
	load(0x2);
	push_base_offset(0xf6c);
	load(0x2);
	push_base_offset(0x204);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x194);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x194);
	push_byte(0x10);
	add();
	push_base_offset(0x194);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x230);
	load(0x2);
	push_base_offset(0x22c);
	load(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_base_offset(0x230);
	load(0x2);
	push_base_offset(0x22c);
	load(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x224);
	load(0x2);
	push_dword(-0x7fffffff);
	push_base_offset(0x204);
	push_byte(0x54);
	add();
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_byte(0x5);
	push_byte(0x0);
	push_base_offset(0x220);
	load(0x2);
	push_base_offset(0x21c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x268);
	push_offset(L0513e);
	call();

L018b2:
	push_base_offset(0x218);
	load(0x2);
	push_offset(L018c6);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L018c6:
	push_byte(0x0);
	load_base();
	push_word(0xf6c);
	sub();
	store_base();
	ret();

L018cf:
	load_base();
	push_word(0xf50);
	add();
	store_base();
	push_base_offset(0x250);
	push_base_offset(0xc50);
	push_base_offset(0xb50);
	push_base_offset(0xa50);
	push_base_offset(0x950);
	push_base_offset(0x850);
	push_base_offset(0x750);
	push_base_offset(0x650);
	push_base_offset(0x550);
	push_base_offset(0x450);
	push_base_offset(0x350);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x21c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x218);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0x224);
	load(0x2);
	push_string("ビットマップ名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0xf50);
	push_base_offset(0x224);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_base_offset(0xe50);
	push_base_offset(0x220);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_base_offset(0xd50);
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x250);
	push_byte(0xa);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_base_offset(0x224);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L01a4f);
	jc(0x0);
	push_string("data02xxx.arc");
	push_base_offset(0x224);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0x204);
	push_base_offset(0x224);
	load(0x2);
	cmd_6a();
	push_base_offset(0x204);
	cmd_6d();
	push_base_offset(0x204);
	sys1(0x84);

L01a4f:
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01a83);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x220);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0x204);
	push_base_offset(0x220);
	load(0x2);
	cmd_6a();
	push_base_offset(0x204);
	cmd_6d();
	push_base_offset(0x204);
	sys1(0x84);

L01a83:
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0x250);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L01bca);
	jc(0x1);
	push_base_offset(0x104);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x228);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x94);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x228);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01b09);
	jc(0x1);
	push_base_offset(0x224);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L01b24);
	jc(0x0);

L01b09:
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x94);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L01b24:
	push_base_offset(0x228);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x104);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x10);
	add();
	push_base_offset(0x94);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x104);
	push_byte(0x54);
	add();
	push_byte(0x0);
	push_dword(-0x7fffffff);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x21c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x250);
	push_offset(L0513e);
	call();

L01bca:
	push_base_offset(0x218);
	load(0x2);
	push_offset(L01bde);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L01bde:
	push_byte(0x0);
	load_base();
	push_word(0xf50);
	sub();
	store_base();
	ret();

L01be7:
	load_base();
	push_word(0xf58);
	add();
	store_base();
	push_base_offset(0x254);
	push_base_offset(0xc54);
	push_base_offset(0xb54);
	push_base_offset(0xa54);
	push_base_offset(0x954);
	push_base_offset(0x854);
	push_base_offset(0x754);
	push_base_offset(0x654);
	push_base_offset(0x554);
	push_base_offset(0x454);
	push_base_offset(0x354);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x22c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x220);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x21c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x218);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x214);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20c);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x208);
	move_arg(0x2);
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_byte(0xe);
	ternary();
	push_base_offset(0xf58);
	move_arg(0x2);
	push_base_offset(0x22c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xf58);
	load(0x2);
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x228);
	load(0x2);
	push_string("イメージ名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x220);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("イメージ形式");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x20c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0xf54);
	push_base_offset(0x228);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_base_offset(0xe54);
	push_base_offset(0x224);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x224);
	move_arg(0x2);
	push_base_offset(0xd54);
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x210);
	move_arg(0x2);
	push_base_offset(0x254);
	push_byte(0xa);
	push_base_offset(0x208);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_base_offset(0x228);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L01da2);
	jc(0x0);
	push_string("data02xxx.arc");
	push_base_offset(0x228);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x204);
	push_base_offset(0x228);
	load(0x2);
	cmd_6a();
	push_base_offset(0x204);
	cmd_6d();
	push_base_offset(0x204);
	sys1(0x84);

L01da2:
	push_base_offset(0x224);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01dd6);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x224);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x204);
	push_base_offset(0x224);
	load(0x2);
	cmd_6a();
	push_base_offset(0x204);
	cmd_6d();
	push_base_offset(0x204);
	sys1(0x84);

L01dd6:
	push_base_offset(0x210);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x254);
	push_base_offset(0x20c);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L01f20);
	jc(0x1);
	push_base_offset(0x104);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x22c);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x94);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x22c);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01e5c);
	jc(0x1);
	push_base_offset(0x228);
	load(0x2);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L01e77);
	jc(0x0);

L01e5c:
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x94);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L01e77:
	push_base_offset(0x22c);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x228);
	load(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_base_offset(0x220);
	load(0x2);
	push_base_offset(0x104);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x10);
	add();
	push_base_offset(0x94);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x104);
	push_byte(0x54);
	add();
	push_byte(0x0);
	push_dword(-0x7fffffff);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x21c);
	load(0x2);
	push_base_offset(0x214);
	load(0x2);
	push_base_offset(0x210);
	load(0x2);
	push_base_offset(0x20c);
	load(0x2);
	push_base_offset(0x254);
	push_offset(L0513e);
	call();

L01f20:
	push_base_offset(0x218);
	load(0x2);
	push_offset(L01f34);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L01f34:
	push_byte(0x0);
	load_base();
	push_word(0xf58);
	sub();
	store_base();
	ret();

L01f3d:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x24);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L020b9);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_dword(-0x80000000);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x4);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_base_offset(0x10);
	load(0x2);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x4);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L0513e);
	call();

L020b9:
	push_base_offset(0x8);
	load(0x2);
	push_offset(L020cd);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L020cd:
	push_byte(0x0);
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L020d5:
	load_base();
	push_word(0xac);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xac);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xa8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0xa4);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xa0);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x9c);
	move_arg(0x2);
	push_base_offset(0xac);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02252);
	jc(0x1);
	push_base_offset(0xa8);
	load(0x2);
	push_byte(0x7d);
	push_dword(0x27100);
	push_byte(0x1);
	add();
	push_string("伸縮倍率");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02252);
	jc(0x1);
	push_base_offset(0xa8);
	load(0x2);
	push_dword(0x10000);
	push_word(0x2710);
	cmd_42();
	push_base_offset(0x98);
	move_arg(0x2);
	push_base_offset(0x94);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0xac);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L021bd);
	jc(0x0);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x94);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L021bd:
	push_base_offset(0xac);
	load(0x2);
	push_byte(0x3);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x7fffffff);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x10);
	add();
	push_base_offset(0x94);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x7fffffff);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_base_offset(0x98);
	load(0x2);
	push_dword(-0x7fffffff);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0xa4);
	load(0x2);
	push_base_offset(0x9c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L0513e);
	call();

L02252:
	push_base_offset(0xa0);
	load(0x2);
	push_offset(L02266);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L02266:
	push_byte(0x0);
	load_base();
	push_word(0xac);
	sub();
	store_base();
	ret();

L0226f:
	load_base();
	push_word(0x140);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x13c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x138);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x134);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x130);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x128);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x124);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x120);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x11c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x114);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x110);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x13c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L024e4);
	jc(0x1);
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x64);
	push_byte(0x1);
	add();
	push_string("処理回数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L024e4);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	push_word(0x100);
	push_byte(0x1);
	add();
	push_string("透明度");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L024e4);
	jc(0x1);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_byte(0x2);
	push_byte(0x1);
	add();
	push_string("シーケンススタイル");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L024e4);
	jc(0x1);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	ternary();
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x104);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x13c);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x70);
	memcpy();
	push_base_offset(0x94);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_byte(0x20);
	push_word(0x94);
	mul();
	add();
	push_base_offset(0x13c);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memcpy();
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0241a);
	jc(0x0);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x94);
	push_word(0x90);
	add();
	push_dword(-0x80000000);
	move(0x2);

L0241a:
	push_base_offset(0x13c);
	load(0x2);
	push_byte(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x7fffffff);
	push_base_offset(0x104);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x10);
	add();
	push_base_offset(0x94);
	push_word(0x90);
	add();
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_base_offset(0x138);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_dword(-0x7fffffff);
	push_base_offset(0x128);
	load(0x2);
	push_dword(-0x7fffffff);
	push_base_offset(0x104);
	push_byte(0x54);
	add();
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x1c);
	shl();
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1);
	and();
	push_byte(0x1b);
	shl();
	or();
	push_base_offset(0x11c);
	load(0x2);
	push_word(0x7ff);
	and();
	push_byte(0x10);
	shl();
	or();
	push_base_offset(0x12c);
	load(0x2);
	push_dword(0xffff);
	and();
	or();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L0513e);
	call();

L024e4:
	push_base_offset(0x110);
	load(0x2);
	push_offset(L024f8);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L024f8:
	push_byte(0x0);
	load_base();
	push_word(0x140);
	sub();
	store_base();
	ret();

L02501:
	load_base();
	push_word(0x1024);
	add();
	store_base();
	push_base_offset(0x21c);
	push_base_offset(0xc1c);
	push_base_offset(0xb1c);
	push_base_offset(0xa1c);
	push_base_offset(0x91c);
	push_base_offset(0x81c);
	push_base_offset(0x71c);
	push_base_offset(0x61c);
	push_base_offset(0x51c);
	push_base_offset(0x41c);
	push_base_offset(0x31c);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1f4);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c0);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1bc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1b8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1b4);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1b0);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1ac);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1a8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1a4);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1a0);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x19c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x198);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x194);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x190);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x18c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x188);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x184);
	move_arg(0x2);
	push_base_offset(0x1f4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1f0);
	load(0x2);
	push_string("ビットマップ名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1e8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x2);
	push_string("連結方向");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1e4);
	load(0x2);
	push_byte(0x2);
	push_byte(0x20);
	push_byte(0x1);
	add();
	push_string("アニメーションパターン数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1dc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	push_string("シーケンススタイル");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1ac);
	load(0x2);
	push_word(0x800);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_string("イメージの原点Ｙ座標");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1a4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	push_string("描画スタイル");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x0);
	push_word(0x100);
	push_byte(0x1);
	add();
	push_string("透明度");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x19c);
	load(0x2);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x1);
	add();
	push_string("プライオリティ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x188);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x1c0);
	load(0x2);
	push_base_offset(0x1bc);
	load(0x2);
	push_base_offset(0x1d0);
	load(0x2);
	ternary();
	push_base_offset(0x1bc);
	move_arg(0x2);
	push_base_offset(0x1c0);
	load(0x2);
	push_base_offset(0x1b8);
	load(0x2);
	push_base_offset(0x1cc);
	load(0x2);
	ternary();
	push_base_offset(0x1b8);
	move_arg(0x2);
	push_base_offset(0x1c0);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	ternary();
	push_base_offset(0x1b4);
	move_arg(0x2);
	push_base_offset(0x101c);
	push_base_offset(0x1f0);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0xf1c);
	push_base_offset(0x1ec);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0xe1c);
	push_base_offset(0x1d8);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0xd1c);
	push_base_offset(0x18c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x18c);
	move_arg(0x2);
	push_base_offset(0x21c);
	push_byte(0xa);
	push_base_offset(0x184);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_string("data02xxx.arc");
	push_base_offset(0x1f0);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x1ec);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x1d8);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x18c);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x21c);
	push_base_offset(0x188);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L02a27);
	jc(0x1);
	push_base_offset(0x180);
	push_base_offset(0x1f0);
	load(0x2);
	cmd_6a();
	push_base_offset(0x180);
	cmd_6d();
	push_base_offset(0x180);
	sys1(0x84);
	push_base_offset(0x1ec);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L028fc);
	jc(0x1);
	push_base_offset(0x180);
	push_base_offset(0x1ec);
	load(0x2);
	cmd_6a();
	push_base_offset(0x180);
	cmd_6d();
	push_base_offset(0x180);
	sys1(0x84);

L028fc:
	push_base_offset(0x1020);
	push_byte(0x0);
	move(0x2);

L02903:
	push_base_offset(0x1e0);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x1e0);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x242b4);
	add();
	push_base_offset(0x1020);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	ternary();
	push_base_offset(0x80);
	push_base_offset(0x1020);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x1020);
	push_base_offset(0x1020);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1020);
	load(0x2);
	push_base_offset(0x1e4);
	load(0x2);
	lt();
	push_offset(L02903);
	jc(0x0);
	push_base_offset(0x1f4);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x1f0);
	load(0x2);
	push_base_offset(0x1ec);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x1e8);
	load(0x2);
	push_base_offset(0x1e4);
	load(0x2);
	push_base_offset(0x80);
	push_base_offset(0x1dc);
	load(0x2);
	push_base_offset(0x1d8);
	load(0x2);
	push_base_offset(0x1d4);
	load(0x2);
	push_base_offset(0x1bc);
	load(0x2);
	push_base_offset(0x1b8);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_base_offset(0x1d0);
	load(0x2);
	push_base_offset(0x1cc);
	load(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_base_offset(0x1c4);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xcd0c);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1f4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x1b0);
	load(0x2);
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1a8);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce0c);
	add();
	push_base_offset(0x1f4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce8c);
	add();
	push_base_offset(0x1f4);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0x1a4);
	load(0x2);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_base_offset(0x19c);
	load(0x2);
	push_base_offset(0x198);
	load(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_base_offset(0x18c);
	load(0x2);
	push_base_offset(0x188);
	load(0x2);
	push_base_offset(0x21c);
	push_offset(L0513e);
	call();

L02a27:
	push_base_offset(0x194);
	load(0x2);
	push_offset(L02a3b);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L02a3b:
	push_byte(0x0);
	load_base();
	push_word(0x1024);
	sub();
	store_base();
	ret();

L02a44:
	load_base();
	push_word(0xf78);
	add();
	store_base();
	push_base_offset(0x178);
	push_base_offset(0xb78);
	push_base_offset(0xa78);
	push_base_offset(0x978);
	push_base_offset(0x878);
	push_base_offset(0x778);
	push_base_offset(0x678);
	push_base_offset(0x578);
	push_base_offset(0x478);
	push_base_offset(0x378);
	push_base_offset(0x278);
	cmd_0c(0x2, 0xa);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x150);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x14c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x144);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x140);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x13c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x138);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x134);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x130);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x128);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x124);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x120);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x11c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x114);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x110);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x108);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x104);
	move_arg(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x800);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_string("イメージの原点Ｙ座標");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	push_string("描画スタイル");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x1);
	add();
	push_string("プライオリティ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x1);
	add();
	push_string("アニメーション数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x13c);
	load(0x2);
	ternary();
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_base_offset(0x138);
	load(0x2);
	ternary();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_base_offset(0xf78);
	push_base_offset(0x14c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0xe78);
	push_base_offset(0x148);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	push_base_offset(0xd78);
	push_base_offset(0x144);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x144);
	move_arg(0x2);
	push_base_offset(0xc78);
	push_base_offset(0x10c);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x178);
	push_byte(0xa);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x43ff8);
	load(0x2);
	call();
	push_string("data02xxx.arc");
	push_base_offset(0x14c);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x148);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_string("data02xxx.arc");
	push_base_offset(0x144);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x10c);
	load(0x2);
	push_dword(0x43f40);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x178);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x43f3c);
	load(0x2);
	call();
	push_offset(L02e14);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x14c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);
	push_base_offset(0x148);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02d35);
	jc(0x1);
	push_base_offset(0x100);
	push_base_offset(0x148);
	load(0x2);
	cmd_6a();
	push_base_offset(0x100);
	cmd_6d();
	push_base_offset(0x100);
	sys1(0x84);

L02d35:
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x14c);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x144);
	load(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0xcc0c);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xcd0c);
	add();
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0xce0c);
	add();
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xce8c);
	add();
	push_base_offset(0x150);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_byte(0x0);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x178);
	push_offset(L0513e);
	call();

L02e14:
	push_base_offset(0x114);
	load(0x2);
	push_offset(L02e28);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L02e28:
	push_byte(0x0);
	load_base();
	push_word(0xf78);
	sub();
	store_base();
	ret();

L02e31:
	load_base();
	push_word(0x124);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x24);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_byte(0x20);
	push_byte(0x1);
	sub();
	push_string("バストショット番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L02fab);
	jc(0x1);
	push_base_offset(0x124);
	push_base_offset(0x20);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_string("data02xxx.arc");
	push_base_offset(0x20);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L02fab);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_dword(-0x7fffffff);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x4);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x4);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L0513e);
	call();

L02fab:
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02fbf);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L02fbf:
	push_byte(0x0);
	load_base();
	push_word(0x124);
	sub();
	store_base();
	ret();

L02fc8:
	load_base();
	push_word(0x10c);
	add();
	store_base();
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_string("ビットマップ名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L030c9);
	jc(0x1);
	push_base_offset(0x10c);
	push_base_offset(0xc);
	load(0x2);
	push_dword(0x44024);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_string("data02xxx.arc");
	push_base_offset(0xc);
	load(0x2);
	push_dword(0x43f54);
	load(0x2);
	call();
	push_offset(L030c9);
	jc(0x1);
	push_byte(0x1f);
	push_byte(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0xce8c);
	add();
	push_byte(0x1f);
	push_byte(0x10);
	mul();
	add();
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L0513e);
	call();

L030c9:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L030dd);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L030dd:
	push_byte(0x0);
	load_base();
	push_word(0x10c);
	sub();
	store_base();
	ret();

L030e6:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_dword(0x43f00);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x1f);
	push_byte(0x9);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x1);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_dword(-0x80000000);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(-0x80000000);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L0513e);
	call();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0319c);
	jc(0x1);
	push_byte(0x1);
	push_dword(0x43f64);
	load(0x2);
	call();

L0319c:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L031a4:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x3b90);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L031c6:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L03226);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03231);
	call();
	push_offset(L03226);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L032bb);
	call();
	push_offset(L03226);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03226:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03231:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L032b0);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L032b0);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x498);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L032b0);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x498);
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L032b0);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L032b0:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L032bb:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0333a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0333a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x49c);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0333a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x49c);
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0333a);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L0333a:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03345:
	load_base();
	push_word(0x120);
	add();
	store_base();
	push_base_offset(0x11c);
	move_arg(0x2);
	push_base_offset(0x120);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03425);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03425);
	jc(0x1);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x118);
	push_dword(0x40000002);
	push_base_offset(0x120);
	load(0x2);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	cmd_0c(0x2, 0x4);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x118);
	sys1(0x4a);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0x5e);

L033d8:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03425);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L033d8);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000000);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000001);
	eq();
	bool_or();
	push_offset(L03425);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("ウィンク開始要求時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L03425:
	load_base();
	push_word(0x120);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0343d:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0345f);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L03470);
	jc(0x1);

L0345f:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L03345);
	call();

L03470:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1f);
	lt();
	push_word(0xb9c);
	load(0x2);
	bool_zero();
	bool_or();
	bool_and();
	push_offset(L0343d);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L034a0:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L034f0);
	jc(0x1);
	push_base_offset(0xc);
	push_dword(0x40000003);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	cmd_0c(0x2, 0x3);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x3);
	push_base_offset(0xc);
	sys1(0x4a);

L034f0:
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x227a0);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x118);
	add();
	store_base();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L035d8);
	jc(0x1);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_dword(0x445b4);
	push_base_offset(0x118);
	load(0x2);
	cmd_6a();
	push_dword(0x40000004);
	push_base_offset(0x114);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_dword(0x445b4);
	push_base_offset(0x114);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x114);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x114);
	sys1(0x4a);

L0358b:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L035d8);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L0358b);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000002);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000003);
	eq();
	bool_or();
	push_offset(L035d8);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("音声再生時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L035d8:
	load_base();
	push_word(0x118);
	sub();
	store_base();
	ret();

L035df:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03610);
	jc(0x1);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(0x40000005);
	sys1(0x48);

L03610:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03627:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03649);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0365a);
	jc(0x1);

L03649:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L034a0);
	call();

L0365a:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03627);
	jc(0x0);
	push_offset(L035df);
	call();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0367f:
	sys1(0x5f);

L03681:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L036a3);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L036b9);
	jc(0x1);

L036a3:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L031c6);
	call();
	push_offset(L0367f);
	jc(0x0);

L036b9:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03681);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L036d9:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0371f);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x40000001);
	push_base_offset(0xc);
	load(0x2);
	cmd_0c(0x2, 0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x8);
	sys1(0x4a);

L0371f:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03725:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03736:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	eq();
	push_offset(L0378e);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L03797);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0378e);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L03797);
	jc(0x1);

L0378e:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L036d9);
	call();

L03797:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03736);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L037b8:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L03860);
	jc(0x0);

L037c4:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	eq();
	push_offset(L0381c);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L03846);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0381c);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L03846);
	jc(0x1);

L0381c:
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L031a4);
	call();
	push_offset(L037b8);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memclr();

L03846:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L037c4);
	jc(0x0);

L03860:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03866:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L038ba);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L031a4);
	call();
	push_offset(L038ba);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x40000007);
	push_base_offset(0xc);
	load(0x2);
	cmd_0c(0x2, 0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x8);
	sys1(0x4a);

L038ba:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L038c0:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L038e4);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03866);
	call();
	push_offset(L0395e);
	jmp();

L038e4:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L038eb:
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0392c);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L03944);
	jc(0x1);

L0392c:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03866);
	call();
	push_byte(0x40);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03866);
	call();

L03944:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L038eb);
	jc(0x0);

L0395e:
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L03989);
	jc(0x0);

L0396b:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L03a19);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L031a4);
	call();
	push_offset(L0396b);
	jc(0x0);
	push_offset(L03a19);
	jmp();

L03989:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03990:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L03a19);
	jc(0x0);

L0399c:
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L039dd);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L039ff);
	jc(0x1);

L039dd:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L031a4);
	call();
	push_offset(L03990);
	jc(0x0);
	push_byte(0x40);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L031a4);
	call();
	push_offset(L03990);
	jc(0x0);

L039ff:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L0399c);
	jc(0x0);

L03a19:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L03725);
	call();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L038c0);
	call();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L035df);
	call();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03a4e:
	sys1(0x5f);

L03a50:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L032bb);
	call();
	push_offset(L03a4e);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03a50);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x118);
	add();
	store_base();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03b49);
	jc(0x1);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x114);
	push_dword(0x40000000);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	cmd_0c(0x2, 0x3);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x114);
	sys1(0x4a);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0x5e);

L03afc:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03b49);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L03afc);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000004);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000005);
	eq();
	bool_or();
	push_offset(L03b49);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("スプライトアニメーション開始時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L03b49:
	load_base();
	push_word(0x118);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x150);
	add();
	store_base();
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0x134);
	move_arg(0x2);
	push_base_offset(0x138);
	move_arg(0x2);
	push_base_offset(0x13c);
	move_arg(0x2);
	push_base_offset(0x140);
	move_arg(0x2);
	push_base_offset(0x144);
	move_arg(0x2);
	push_base_offset(0x148);
	move_arg(0x2);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x150);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03ca2);
	jc(0x1);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03ca2);
	jc(0x1);
	push_base_offset(0x12c);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x20);
	sub();
	move(0x2);
	push_dword(0x8e1cc);
	push_base_offset(0x12c);
	load(0x2);
	push_word(0x8b0);
	mul();
	add();
	push_base_offset(0x138);
	load(0x2);
	push_word(0x8b0);
	memcpy();
	push_dword(0x9f7cc);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x10);
	memcpy();
	push_dword(0x9f9cc);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x128);
	push_dword(0x40000006);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_base_offset(0x144);
	load(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	cmd_0c(0x2, 0x8);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x8);
	push_base_offset(0x128);
	sys1(0x4a);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0x5e);

L03c55:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03ca2);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L03c55);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000006);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000007);
	eq();
	bool_or();
	push_offset(L03ca2);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("スプライトアニメーション開始時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L03ca2:
	load_base();
	push_word(0x150);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x8);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L03dac);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_offset(L038c0);
	call();
	push_base_offset(0x10);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	neq();
	push_offset(L03d1d);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	grp2(0x1f);

L03d1d:
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x520);
	memcpy();
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x514);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x520);
	memclr();

L03dac:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x1c);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_offset(L0402f);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	neq();
	push_offset(L03e2c);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	grp2(0x1f);

L03e2c:
	push_word(0x3b90);
	push_base_offset(0x30);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x520);
	memcpy();
	push_base_offset(0x10);
	push_word(0x3b90);
	push_base_offset(0x30);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);

L03e75:
	push_base_offset(0x8);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x10);
	mul();
	sys1(0x20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	grp2(0x1f);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	grp2(0x1f);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);

L03f01:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	lt();
	push_offset(L03f01);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x40);
	add();
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	lt();
	push_offset(L03e75);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x2c);
	load(0x2);
	move(0x2);

L0402f:
	push_base_offset(0x1c);
	load(0x2);
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04081);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L04081:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04114);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x514);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L04114:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04167);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x50c);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L04167:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L041d5);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L041d5);
	jc(0x0);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_offset(L041e0);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L041d5:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L041e0:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L041fe);
	jc(0x1);
	push_word(0x720);
	sys1(0x18);

L041fe:
	push_word(0x504);
	load(0x2);
	push_offset(L04263);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L04263);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0422f);
	jc(0x1);
	sys1(0x17);
	push_offset(L04263);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L04263);
	jc(0x0);

L0422f:
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04263);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L04263);
	jc(0x0);
	sys1(0x5f);
	push_offset(L041fe);
	jmp();

L04263:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04272);
	jc(0x1);
	push_word(0x720);
	sys1(0x19);

L04272:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L04287:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);

L042a5:
	push_word(0x504);
	load(0x2);
	push_offset(L042d0);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L042d0);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L042d0);
	jc(0x1);
	sys1(0x5f);
	push_offset(L042a5);
	jmp();

L042d0:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L042e5:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);

L04308:
	push_word(0x504);
	load(0x2);
	push_offset(L04344);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L04344);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04344);
	jc(0x1);
	sys1(0x17);
	push_offset(L04344);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L04344);
	jc(0x0);
	sys1(0x5f);
	push_offset(L04308);
	jmp();

L04344:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0435e:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04402);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L043d8);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	bool_or();
	push_offset(L043d8);
	jc(0x0);
	push_string("循環制御が行われているオブジェクトに対して待機要求が発行されました");
	cmd_79();
	push_offset(L04402);
	jmp();

L043d8:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L043f4);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L04287);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L04402);
	jmp();

L043f4:
	push_base_offset(0x10);
	load(0x2);
	push_offset(L042e5);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L04402:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L0440d:
	load_base();
	push_word(0x1f8);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0x1f4);
	move_arg(0x2);
	push_base_offset(0x1f8);
	move_arg(0x2);
	push_base_offset(0x1f8);
	load(0x2);
	push_offset(L04b07);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memclr();
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_base_offset(0x1f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x1c);
	add();
	push_base_offset(0x1ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x20);
	add();
	push_base_offset(0x1e8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x128);
	add();
	push_base_offset(0x1e4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x12c);
	add();
	push_base_offset(0x1e0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x130);
	add();
	push_base_offset(0x1dc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x134);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x138);
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0453f);
	jc(0x1);
	push_base_offset(0x1c0);
	push_word(0x150);
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x70);
	memcpy();

L0453f:
	push_dword(0x227a4);
	push_base_offset(0x1f8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1cc);
	load(0x2);
	push_offset(L0456f);
	jc(0x1);
	push_base_offset(0x1f8);
	load(0x2);
	push_byte(0x0);
	push_offset(L0435e);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);

L0456f:
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1f8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L0440d);
	call();
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L0440d);
	call();
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1f0);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0x1f0);
	load(0x2);
	push_offset(L04b07);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x24);
	add();
	push_base_offset(0x1e8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x28);
	add();
	push_base_offset(0x1e4);
	load(0x2);
	push_base_offset(0x1e8);
	load(0x2);
	push_byte(0x10);
	mul();
	memcpy();
	push_base_offset(0x1c0);
	push_word(0x128);
	add();
	push_base_offset(0x1e0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x12c);
	add();
	push_base_offset(0x1dc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x130);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x134);
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x138);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_dword(0x227a4);
	push_base_offset(0x1f0);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c8);
	load(0x2);
	push_offset(L047a6);
	jc(0x1);
	push_base_offset(0x1f0);
	load(0x2);
	push_byte(0x0);
	push_offset(L0435e);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);

L047a6:
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1f0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x30);
	load(0x2);
	add();
	push_byte(0x3);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0440d);
	call();
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x2c);
	load(0x2);
	add();
	push_byte(0x4);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L0440d);
	call();
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1c8);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1c8);
	load(0x2);
	add();
	push_offset(L04c41);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x227a4);
	push_byte(0x0);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1c8);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1dc);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1dc);
	load(0x2);
	add();
	push_offset(L04c41);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memclr();
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04a20);
	jc(0x1);
	push_base_offset(0x1c0);
	push_word(0x150);
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x70);
	memcpy();

L04a20:
	push_dword(0x227a4);
	push_byte(0x0);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1dc);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1dc);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1d4);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d4);
	load(0x2);
	push_offset(L04c41);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1c8);
	load(0x2);
	move(0x2);
	push_dword(0x227a4);
	push_base_offset(0x1d4);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1d4);
	sub();
	store_base();
	ret();

L04b07:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x227a4);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04bc9);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x450);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_offset(L0435e);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L04bc9);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04bc9);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L04bc9);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	memclr();

L04bc9:
	push_base_offset(0x10);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L04be0:
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04c21);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L04c21);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);

L04c21:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x52);
	lt();
	push_offset(L04be0);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L04c41:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x227a4);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04d03);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x450);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_offset(L0435e);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L04d03);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04d03);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L04d03);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	memclr();

L04d03:
	push_base_offset(0x10);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L04d1f:
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04d80);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L04d80);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_word(0x450);
	memclr();
	push_offset(L04d9a);
	jmp();

L04d80:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	lt();
	push_offset(L04d1f);
	jc(0x0);

L04d9a:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L04dc4:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);

L04de2:
	push_word(0x504);
	load(0x2);
	push_offset(L04e0d);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L04e0d);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L04e0d);
	jc(0x1);
	sys1(0x5f);
	push_offset(L04de2);
	jmp();

L04e0d:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L04e22:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);

L04e45:
	push_word(0x504);
	load(0x2);
	push_offset(L04e81);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L04e81);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L04e81);
	jc(0x1);
	sys1(0x17);
	push_offset(L04e81);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L04e81);
	jc(0x0);
	sys1(0x5f);
	push_offset(L04e45);
	jmp();

L04e81:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L04ec6);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L04dc4);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L04ed4);
	jmp();

L04ec6:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L04e22);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L04ed4:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L04f2d);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L04dc4);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L04f2d:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L04f50:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L04f94);
	jc(0x1);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L04f94);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);

L04f94:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L04f50);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L04fb5:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L04fd8);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L04dc4);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L04fd8:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L04fb5);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L05009:
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L05038);
	jc(0x1);
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);

L05038:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L05009);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L050a6);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L04dc4);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L050a6:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L050b1:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0511d);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x40);
	lt();
	push_offset(L05128);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1a444);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L0511d:
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_offset(L05133);
	jmp();

L05128:
	push_string("バストショット制御向けプリロード対象ビットマップ配列に空きがありません");
	cmd_79();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L05133:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0513e:
	load_base();
	push_word(0x368);
	add();
	store_base();
	push_base_offset(0x2e4);
	move_arg(0x2);
	push_base_offset(0x2e8);
	move_arg(0x2);
	push_base_offset(0x2ec);
	move_arg(0x2);
	push_base_offset(0x2f0);
	move_arg(0x2);
	push_base_offset(0x2f4);
	move_arg(0x2);
	push_base_offset(0x2f8);
	move_arg(0x2);
	push_base_offset(0x2fc);
	move_arg(0x2);
	push_base_offset(0x300);
	move_arg(0x2);
	push_base_offset(0x304);
	move_arg(0x2);
	push_base_offset(0x308);
	move_arg(0x2);
	push_base_offset(0x30c);
	move_arg(0x2);
	push_base_offset(0x310);
	move_arg(0x2);
	push_base_offset(0x314);
	move_arg(0x2);
	push_base_offset(0x318);
	move_arg(0x2);
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x320);
	move_arg(0x2);
	push_base_offset(0x324);
	move_arg(0x2);
	push_base_offset(0x328);
	move_arg(0x2);
	push_base_offset(0x32c);
	move_arg(0x2);
	push_base_offset(0x330);
	move_arg(0x2);
	push_base_offset(0x334);
	move_arg(0x2);
	push_base_offset(0x338);
	move_arg(0x2);
	push_base_offset(0x33c);
	move_arg(0x2);
	push_base_offset(0x340);
	move_arg(0x2);
	push_base_offset(0x344);
	move_arg(0x2);
	push_base_offset(0x348);
	move_arg(0x2);
	push_base_offset(0x34c);
	move_arg(0x2);
	push_base_offset(0x350);
	move_arg(0x2);
	push_base_offset(0x354);
	move_arg(0x2);
	push_base_offset(0x358);
	move_arg(0x2);
	push_base_offset(0x35c);
	move_arg(0x2);
	push_base_offset(0x360);
	move_arg(0x2);
	push_base_offset(0x364);
	move_arg(0x2);
	push_base_offset(0x368);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L05c2b);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x1a434);
	add();
	load(0x2);
	push_offset(L05c2b);
	jc(0x0);
	push_base_offset(0x2e0);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	geq();
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x2f0);
	move_arg(0x2);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L052ad);
	jc(0x0);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x10);
	sub();
	lt();
	push_offset(L05297);
	jc(0x0);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	push_byte(0x2);
	mul();
	lt();
	push_offset(L05277);
	jc(0x0);
	push_base_offset(0x2f8);
	push_word(0x732);
	push_word(0x100);
	sub();
	move(0x2);
	push_base_offset(0x2e0);
	push_byte(0x1);
	move(0x2);
	push_offset(L052ad);
	jmp();

L05277:
	push_base_offset(0x2f8);
	push_word(0x7b0);
	push_word(0x100);
	sub();
	push_base_offset(0x2f8);
	load(0x2);
	add();
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x10);
	sub();
	sub();
	move(0x2);
	push_offset(L052ad);
	jmp();

L05297:
	push_base_offset(0x2f8);
	push_word(0x500);
	push_word(0x100);
	sub();
	push_base_offset(0x2f8);
	load(0x2);
	add();
	push_word(0x80);
	sub();
	move(0x2);

L052ad:
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x368);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L052d7);
	jc(0x0);
	push_string("バストショット制御コマンド情報配列に空きがありません");
	cmd_79();
	push_offset(L05c2b);
	jmp();

L052d7:
	push_base_offset(0x124);
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x368);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L052ff:
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	lt();
	push_offset(L0535b);
	jc(0x1);
	push_base_offset(0x1d4);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_word(0xb0);
	memcpy();
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0534a);
	jc(0x0);
	push_base_offset(0x120);
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	load(0x2);
	move(0x2);

L0534a:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L052ff);
	jmp();

L0535b:
	push_base_offset(0x1d4);
	push_word(0xb0);
	memclr();
	push_base_offset(0x1d4);
	push_byte(0x0);
	add();
	push_base_offset(0x364);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x4);
	add();
	push_base_offset(0x33c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x8);
	add();
	push_base_offset(0x338);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0xc);
	add();
	push_base_offset(0x334);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x10);
	add();
	push_base_offset(0x330);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x14);
	add();
	push_base_offset(0x32c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x18);
	add();
	push_base_offset(0x328);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x1c);
	add();
	push_base_offset(0x324);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x20);
	add();
	push_base_offset(0x320);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x24);
	add();
	push_base_offset(0x31c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x28);
	add();
	push_base_offset(0x318);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x30);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x34);
	add();
	push_base_offset(0x314);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x38);
	add();
	push_base_offset(0x310);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x4c);
	add();
	push_base_offset(0x308);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x50);
	add();
	push_base_offset(0x304);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x54);
	add();
	push_base_offset(0x300);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x58);
	add();
	push_base_offset(0x2fc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x5c);
	add();
	push_base_offset(0x2f8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x60);
	add();
	push_base_offset(0x2f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x30c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L05488);
	jc(0x1);
	push_base_offset(0x1d4);
	push_byte(0x3c);
	add();
	push_base_offset(0x30c);
	load(0x2);
	push_byte(0x10);
	memcpy();

L05488:
	push_base_offset(0x360);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L054e0);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x360);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	move_arg(0x2);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L054ee);
	jc(0x1);
	push_base_offset(0x2d4);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L054ee);
	jc(0x0);
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	load(0x2);
	push_offset(L050b1);
	call();
	push_offset(L05c2b);
	jc(0x1);
	push_offset(L054ee);
	jmp();

L054e0:
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L054ee:
	push_base_offset(0x35c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L05539);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L05539);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x35c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	move_arg(0x2);
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	load(0x2);
	push_offset(L050b1);
	call();
	push_offset(L05c2b);
	jc(0x1);
	push_offset(L05547);
	jmp();

L05539:
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L05547:
	push_base_offset(0x1d4);
	push_byte(0x6c);
	add();
	push_base_offset(0x358);
	load(0x2);
	move(0x2);
	push_base_offset(0x344);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0559f);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x344);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	move_arg(0x2);
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	load(0x2);
	push_offset(L050b1);
	call();
	push_offset(L05c2b);
	jc(0x1);
	push_base_offset(0x1d4);
	push_byte(0x74);
	add();
	push_base_offset(0x340);
	load(0x2);
	move(0x2);
	push_offset(L055ad);
	jmp();

L0559f:
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L055ad:
	push_base_offset(0x350);
	load(0x2);
	push_byte(0x2);
	geq();
	push_offset(L055da);
	jc(0x0);
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1d4);
	push_word(0x80);
	add();
	push_base_offset(0x350);
	load(0x2);
	move(0x2);
	push_offset(L05761);
	jmp();

L055da:
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_word(0x80);
	add();
	push_base_offset(0x350);
	load(0x2);
	move(0x2);
	push_base_offset(0x11c);
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x354);
	load(0x2);
	push_offset(L06842);
	call();
	push_offset(L05759);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x348);
	load(0x2);
	push_offset(L06842);
	call();
	push_offset(L05759);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x34c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L05761);
	jc(0x1);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L056d2:
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x34c);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L06842);
	call();
	push_offset(L05759);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x350);
	load(0x2);
	lt();
	push_offset(L056d2);
	jc(0x0);
	push_offset(L05761);
	jmp();

L05759:
	push_string("バストショット制御向けアニメーション領域に空きがありません");
	cmd_79();
	push_offset(L05c2b);
	jmp();

L05761:
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	push_base_offset(0x2f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x2f0);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0581b);
	jc(0x0);
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x2f0);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	push_byte(0x0);
	leq();
	push_offset(L057f8);
	jc(0x1);
	push_base_offset(0x120);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);

L057f8:
	push_base_offset(0x2dc);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x2dc);
	load(0x2);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x1);
	sub();
	ternary();
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	move_arg(0x2);

L0581b:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L05822:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L05822);
	jc(0x0);
	push_base_offset(0x2ec);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L059b0);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L059b0);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x2ec);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_word(0x84);
	add();
	move_arg(0x2);
	push_base_offset(0x118);
	push_word(0xab4);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L05905);
	jc(0x0);
	push_byte(0x1);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x118);
	push_byte(0x0);
	add();
	move_arg(0x2);
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x118);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x2d8);
	push_byte(0x1);
	move(0x2);

L058d4:
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L058d4);
	jc(0x0);

L05905:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0590c:
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L05992);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	sys1(0xdd);
	push_base_offset(0xd4);
	push_word(0xab0);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0597d);
	jc(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0597d);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);

L0597d:
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);

L05992:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0590c);
	jc(0x0);
	push_offset(L059bf);
	jmp();

L059b0:
	push_base_offset(0x1d4);
	push_word(0x84);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L059bf:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L059c6:
	push_base_offset(0x2e4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L05ab6);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L05ab6);
	jc(0x1);
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x2e8);
	load(0x2);
	geq();
	push_offset(L05ab6);
	jc(0x0);
	push_base_offset(0x2e4);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L05ab6);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x2e4);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xd4);
	push_word(0xab0);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L05a92);
	jc(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L05a92);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_offset(L05ace);
	jmp();

L05a92:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_offset(L05ace);
	jmp();

L05ab6:
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L05ace:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L059c6);
	jc(0x0);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L05aef:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L050b1);
	call();
	push_offset(L05c2b);
	jc(0x1);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L05aef);
	jc(0x0);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L05b94);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x59c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x5a0);
	add();
	push_byte(0x0);
	move(0x2);

L05b94:
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_base_offset(0x1d4);
	push_word(0xb0);
	memcpy();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2e0);
	load(0x2);
	push_base_offset(0x364);
	load(0x2);
	push_byte(0x4);
	eq();
	push_base_offset(0x368);
	load(0x2);
	push_dword(0x45f14);
	load(0x2);
	eq();
	bool_and();
	bool_or();
	push_offset(L05c00);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_base_offset(0x368);
	load(0x2);
	move(0x2);
	push_offset(L05c2b);
	jmp();

L05c00:
	push_base_offset(0x368);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	load(0x2);
	eq();
	push_offset(L05c2b);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L05c2b:
	load_base();
	push_word(0x368);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x128);
	add();
	store_base();
	push_base_offset(0x124);
	move_arg(0x2);
	push_base_offset(0x128);
	move_arg(0x2);
	push_base_offset(0x120);
	push_base_offset(0x128);
	load(0x2);
	push_word(0xb0);
	memcpy();
	push_base_offset(0x70);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x70);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x20);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x24);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x28);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x20);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x24);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x28);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x2c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x30);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x34);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x38);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x44);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x4c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x64);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x68);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x6c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	move_arg(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x120);
	push_word(0xb0);
	memcpy();
	load_base();
	push_word(0x128);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();

L05ee1:
	push_word(0x504);
	load(0x2);
	push_offset(L05f00);
	jc(0x0);
	push_dword(0x3ade4);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L05f00);
	jc(0x1);
	sys1(0x5f);
	push_offset(L05ee1);
	jmp();

L05f00:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L05f0c:
	load_base();
	push_byte(0x0);
	add();
	store_base();

L05f11:
	push_word(0x504);
	load(0x2);
	push_offset(L05f42);
	jc(0x0);
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L05f42);
	jc(0x1);
	push_dword(0x3adf4);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L05f42);
	jc(0x0);
	sys1(0x5f);
	push_offset(L05f11);
	jmp();

L05f42:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x158);
	add();
	store_base();
	push_base_offset(0x150);
	move_arg(0x2);
	push_base_offset(0x154);
	move_arg(0x2);
	push_base_offset(0x158);
	move_arg(0x2);
	sys1(0x17);
	push_base_offset(0x148);
	move_arg(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc8);
	add();
	load(0x2);
	bool_and();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	bool_or();
	push_byte(0x20);
	push_byte(0x10);
	add();
	load(0x1);
	push_byte(0xa);
	push_byte(0x1);
	add();
	eq();
	bool_or();
	push_byte(0x0);
	push_base_offset(0x154);
	load(0x2);
	ternary();
	push_base_offset(0x154);
	move_arg(0x2);
	push_dword(0x3adf4);
	push_byte(0x4);
	add();
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_offset(L05f0c);
	call();
	push_base_offset(0x44);
	push_dword(0x42abc);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	grp2(0x38);
	push_base_offset(0x20);
	push_word(0x400);
	push_byte(0x69);
	add();
	grp1(0x16);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_offset(L05ff7);
	jc(0x1);
	push_word(0x400);
	push_byte(0x6a);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	grp2(0x1f);

L05ff7:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L06080);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xba8);
	load(0x2);
	push_byte(0x20);
	push_word(0xf8);
	add();
	load(0x2);
	push_byte(0x20);
	push_word(0xf4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x400);
	push_byte(0x69);
	add();
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	push_byte(0x70);
	add();
	load(0x1);
	push_dword(0x9fab8);
	push_dword(0x2211c);
	add();
	load(0x2);
	push_byte(0x10);
	push_base_offset(0x8);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	sys1(0x41);
	push_byte(0x0);
	push_offset(L06080);
	jc(0x1);
	push_base_offset(0x148);
	load(0x2);
	push_offset(L06080);
	jc(0x0);
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x144);
	push_string("未定義のキャラクター名 [ %s ] が指定されました");
	cmd_6f();
	push_base_offset(0x144);
	cmd_79();

L06080:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L061c7);
	jc(0x1);
	push_base_offset(0x24);
	load(0x2);
	push_offset(L0612b);
	jc(0x0);
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_byte(0x1);
	push_word(0x100);
	push_word(0x740);
	grp1(0x56);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L06260);
	jmp();

L0612b:
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_word(0x400);
	push_byte(0x6a);
	add();
	push_word(0x100);
	push_byte(0x0);
	push_word(0x740);
	push_byte(0x1);
	grp1(0x58);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	move(0x2);
	push_offset(L06260);
	jmp();

L061c7:
	push_base_offset(0x24);
	load(0x2);
	push_offset(L062f0);
	jc(0x1);
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x740);
	grp1(0x56);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	move(0x2);

L06260:
	push_dword(0x42aac);
	load(0x2);
	push_byte(0x1);
	grp1(0x30);
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x14c);
	load(0x2);
	ternary();
	push_dword(0x3adf4);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_dword(0x3adf4);
	push_byte(0xc);
	add();
	push_dword(0x42aac);
	load(0x2);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14c);
	push_base_offset(0x154);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x1);
	geq();
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_dword(0x3adf4);
	push_byte(0x1c);
	add();
	move_arg(0x2);

L062f0:
	load_base();
	push_word(0x158);
	sub();
	store_base();
	ret();

L062f7:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);

L06314:
	push_word(0x504);
	load(0x2);
	push_offset(L06333);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L06333);
	jc(0x1);
	sys1(0x5f);
	push_offset(L06314);
	jmp();

L06333:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0633f:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);

L06361:
	push_word(0x504);
	load(0x2);
	push_offset(L06391);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L06391);
	jc(0x1);
	sys1(0x17);
	push_offset(L06391);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L06391);
	jc(0x0);
	sys1(0x5f);
	push_offset(L06361);
	jmp();

L06391:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L063cd);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L062f7);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L063db);
	jmp();

L063cd:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0633f);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L063db:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x94);
	add();
	store_base();
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x74);
	move_arg(0x2);
	push_base_offset(0x78);
	move_arg(0x2);
	push_base_offset(0x7c);
	move_arg(0x2);
	push_base_offset(0x80);
	move_arg(0x2);
	push_base_offset(0x84);
	move_arg(0x2);
	push_base_offset(0x88);
	move_arg(0x2);
	push_base_offset(0x8c);
	move_arg(0x2);
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x70);
	load(0x2);
	push_dword(0x7fffffff);
	ternary();
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x6c);
	push_byte(0x6c);
	memclr();
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x8c);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x84);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	push_base_offset(0x7c);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	push_base_offset(0x78);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	push_base_offset(0x74);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	push_base_offset(0x70);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x24);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x28);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x30);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x34);
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x38);
	add();
	push_base_offset(0x70);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x40);
	add();
	push_word(0x101);
	push_base_offset(0x8c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x3c);
	add();
	push_base_offset(0x6c);
	push_byte(0x40);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x44);
	add();
	push_base_offset(0x88);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x48);
	add();
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3ae20);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	push_base_offset(0x6c);
	push_byte(0x6c);
	memcpy();
	load_base();
	push_word(0x94);
	sub();
	store_base();
	ret();

L065b2:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L06612);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x30);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);

L06612:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L06624:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L065b2);
	call();
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x52);
	lt();
	push_offset(L06624);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x58);
	add();
	store_base();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x40);
	push_base_offset(0x44);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x40);
	move_arg(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x2c);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x3c);
	move_arg(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x30);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x3c);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x38);
	load(0x2);
	move(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x14);
	add();
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x34);
	push_byte(0x14);
	add();
	move_arg(0x2);
	push_base_offset(0x34);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x1c);
	add();
	push_base_offset(0x40);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x24);
	add();
	push_base_offset(0x4c);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x28);
	add();
	push_base_offset(0x48);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	sub();
	move(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x34);
	push_byte(0x34);
	memcpy();
	load_base();
	push_byte(0x58);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3d0b8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0683c);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x60);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	memclr();

L0683c:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L06842:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L068a8);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L06876:
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7);
	sar();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L06876);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_offset(L06931);
	jmp();

L068a8:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L068af:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	geq();
	push_offset(L0694a);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7f);
	and();
	move(0x0);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7);
	sar();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0691d);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	load(0x0);
	push_word(0x80);
	or();
	move(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L068af);
	jmp();

L0691d:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L06931:
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0694a);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L0694a:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x10);
	memclr();
	push_dword(0x3e160);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3e160);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3e160);
	push_byte(0x30);
	add();
	push_byte(0x0);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_dword(0x3e160);
	push_byte(0x30);
	add();
	push_byte(0x4);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_dword(0x3e160);
	push_byte(0x30);
	add();
	push_byte(0x8);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	not();
	push_byte(0x1);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	not();
	push_byte(0x1);
	add();
	grp1(0x36);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L06a12:
	load_base();
	push_byte(0x0);
	add();
	store_base();

L06a17:
	push_word(0x504);
	load(0x2);
	push_offset(L06a42);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L06a42);
	jc(0x0);
	push_dword(0x3e160);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L06a42);
	jc(0x1);
	sys1(0x5f);
	push_offset(L06a17);
	jmp();

L06a42:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L06a57:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x720);
	sys1(0x18);

L06a61:
	push_word(0x504);
	load(0x2);
	push_offset(L06a9a);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L06a9a);
	jc(0x0);
	push_dword(0x3e160);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L06a9a);
	jc(0x1);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L06a96);
	jc(0x0);
	sys1(0x5f);
	push_offset(L06a61);
	jmp();

L06a96:
	push_offset(L06c18);
	call();

L06a9a:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x58);
	add();
	store_base();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_offset(L06c18);
	call();
	push_base_offset(0x44);
	push_base_offset(0x4c);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x40);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x8);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x10);
	memcpy();
	push_base_offset(0x40);
	push_byte(0x18);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x58);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x18);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x54);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x18);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x30);
	add();
	push_byte(0x0);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x30);
	add();
	push_byte(0x4);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x30);
	add();
	push_byte(0x8);
	add();
	push_dword(0x9fab8);
	push_dword(0xa94c);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x28);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x2c);
	add();
	push_base_offset(0x44);
	load(0x2);
	move(0x2);
	push_dword(0x3e160);
	push_base_offset(0x40);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x48);
	load(0x2);
	push_offset(L06c12);
	jc(0x1);
	push_offset(L06a57);
	call();

L06c12:
	load_base();
	push_byte(0x58);
	sub();
	store_base();
	ret();

L06c18:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x3e160);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L06c3c);
	jc(0x1);
	push_dword(0x3e160);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_offset(L06a12);
	call();

L06c3c:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
