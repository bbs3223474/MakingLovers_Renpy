	load_base();
	push_byte(0x44);
	add();
	store_base();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x3c);
	move_arg(0x2);
	push_base_offset(0x40);
	move_arg(0x2);
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x28);
	push_offset(L00481);
	push_offset(L004ee);
	push_offset(L00538);
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L00582);
	push_offset(L005cf);
	cmd_0c(0x2, 0x7);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x7);
	eq();
	push_offset(L000d2);
	jc(0x1);
	push_base_offset(0x44);
	push_byte(0x20);
	push_word(0x134);
	add();
	load(0x1);
	move(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L00094);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xe0);
	add();
	load(0x2);
	bool_and();
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_word(0xb04);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L000d2);
	jc(0x0);
	push_base_offset(0x44);
	push_byte(0x0);
	move(0x2);
	push_byte(0x20);
	push_word(0xae);
	add();
	push_byte(0x0);
	move(0x1);
	push_offset(L000d2);
	jmp();

L00094:
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L000d2);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xdc);
	add();
	load(0x2);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	bool_or();
	push_offset(L000d2);
	jc(0x0);
	push_base_offset(0x44);
	push_byte(0x0);
	move(0x2);
	push_byte(0x20);
	push_word(0xae);
	add();
	push_byte(0x0);
	move(0x1);

L000d2:
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x20);
	push_word(0xae);
	add();
	load(0x1);
	push_base_offset(0x40);
	load(0x2);
	ternary();
	push_base_offset(0x40);
	move_arg(0x2);
	sys1(0x46);
	push_word(0x468);
	move_arg(0x2);
	push_word(0x460);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x6);
	eq();
	push_offset(L0011e);
	jc(0x0);
	push_offset(L03c22);
	call();
	push_offset(L00447);
	call();
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L0011e:
	push_byte(0x0);
	push_offset(L029bc);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L0336d);
	call();
	push_word(0x470);
	push_offset(L00612);
	move(0x2);
	push_word(0x474);
	push_offset(L01564);
	move(0x2);
	push_word(0x478);
	push_offset(L01ba5);
	move(0x2);
	push_word(0x47c);
	push_offset(L01bdf);
	move(0x2);
	push_word(0x480);
	push_offset(L01dcb);
	move(0x2);
	push_word(0x484);
	push_offset(L01e71);
	move(0x2);
	push_word(0x488);
	push_offset(L01f09);
	move(0x2);
	push_word(0x48c);
	push_offset(L01fab);
	move(0x2);
	push_word(0x490);
	push_offset(L0205e);
	move(0x2);
	push_word(0x494);
	push_offset(L0218e);
	move(0x2);
	push_word(0x498);
	push_offset(L021a9);
	move(0x2);
	push_word(0x4a8);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L00190:
	push_base_offset(0x2c);
	sys1(0x49);
	push_offset(L00190);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L001c0);
	jc(0x0);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x6);
	eq();
	push_offset(L001c0);
	jc(0x0);
	push_offset(L03c22);
	call();
	push_offset(L00447);
	call();
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L001c0:
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x1);
	eq();
	bool_or();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	eq();
	bool_or();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x5);
	eq();
	bool_or();
	push_offset(L001f6);
	jc(0x1);
	push_base_offset(0x44);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_offset(L0218e);
	call();

L001f6:
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x1);
	eq();
	bool_or();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	eq();
	bool_or();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x5);
	eq();
	bool_or();
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x20);
	push_word(0x134);
	add();
	load(0x1);
	ternary();
	push_byte(0x20);
	push_word(0x134);
	add();
	move_arg(0x1);
	push_word(0x464);
	push_base_offset(0x44);
	load(0x2);
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x28);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x1);
	eq();
	bool_and();
	push_byte(0x1);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x2);
	eq();
	bool_and();
	push_byte(0x2);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x3);
	eq();
	bool_and();
	push_byte(0x3);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x4);
	eq();
	bool_and();
	push_byte(0x4);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x1);
	eq();
	push_byte(0x5);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	eq();
	push_byte(0x6);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x5);
	eq();
	push_byte(0x7);
	push_word(0x4a8);
	load(0x2);
	ternary();
	push_word(0x4a8);
	move_arg(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L00352);
	jc(0x1);
	push_base_offset(0x34);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x30);
	push_byte(0x4);
	move(0x2);

L00352:
	push_base_offset(0x44);
	push_base_offset(0x34);
	load(0x2);
	move(0x2);
	push_base_offset(0x40);
	push_base_offset(0x30);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x20);
	push_word(0xae);
	add();
	load(0x1);
	ternary();
	push_byte(0x20);
	push_word(0xae);
	add();
	move_arg(0x1);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x6);
	leq();
	bool_and();
	push_offset(L00190);
	jc(0x0);
	push_word(0x470);
	push_byte(0x0);
	move(0x2);
	push_word(0x474);
	push_byte(0x0);
	move(0x2);
	push_word(0x478);
	push_byte(0x0);
	move(0x2);
	push_word(0x47c);
	push_byte(0x0);
	move(0x2);
	push_word(0x480);
	push_byte(0x0);
	move(0x2);
	push_word(0x484);
	push_byte(0x0);
	move(0x2);
	push_word(0x488);
	push_byte(0x0);
	move(0x2);
	push_word(0x48c);
	push_byte(0x0);
	move(0x2);
	push_word(0x490);
	push_byte(0x0);
	move(0x2);
	push_word(0x494);
	push_byte(0x0);
	move(0x2);
	push_word(0x498);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L029bc);
	call();
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	push_byte(0x20);
	push_word(0x84);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	bool_and();
	push_byte(0x8);
	push_base_offset(0x34);
	load(0x2);
	ternary();
	push_base_offset(0x34);
	move_arg(0x2);
	push_word(0xbb4);
	load(0x2);
	push_byte(0x20);
	push_word(0x84);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	bool_and();
	push_byte(0xa);
	push_base_offset(0x34);
	load(0x2);
	ternary();
	push_base_offset(0x34);
	move_arg(0x2);
	push_word(0x460);
	push_byte(0x0);
	move(0x2);
	push_word(0x468);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	load(0x2);
	load_base();
	push_byte(0x44);
	sub();
	store_base();
	ret();

L00447:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L00453:
	push_byte(0x46);
	push_base_offset(0x4);
	load(0x2);
	add();
	snd1(0x25);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L00453);
	jc(0x0);
	push_offset(L037c3);
	call();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00481:
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x14);
	push_string("cnfgwnddsp._bp");
	push_string("cnfgwndtxt._bp");
	push_string("cnfgwndsnd._bp");
	push_string("cnfgwndsys._bp");
	push_string("cnfgwndkey._bp");
	cmd_0c(0x2, 0x5);
	push_string("sysprg.arc");
	push_base_offset(0x14);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	sys1(0x40);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();

L004ee:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("usdtwnd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L00538:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("usdtwnd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L00582:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("bbswnd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L005cf:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("logwnd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L00612:
	load_base();
	push_word(0x1bc);
	add();
	store_base();
	push_base_offset(0x1ac);
	move_arg(0x2);
	push_base_offset(0x1b0);
	move_arg(0x2);
	push_base_offset(0x1b4);
	move_arg(0x2);
	push_base_offset(0x1b8);
	move_arg(0x2);
	push_base_offset(0x1bc);
	move_arg(0x2);
	push_base_offset(0x1a8);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a8);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a8);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1a8);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x19c);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1a8);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x19c);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x34);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1a8);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x15c);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x1a8);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x15c);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x1);
	eq();
	bool_and();
	push_byte(0x1);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x2);
	eq();
	bool_and();
	push_byte(0x2);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x3);
	eq();
	bool_and();
	push_byte(0x3);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x4);
	eq();
	bool_and();
	push_byte(0x4);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_byte(0x5);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_byte(0x6);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x5);
	eq();
	push_byte(0x7);
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_word(0x434);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x94);
	load(0x2);
	ternary();
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x98);
	push_base_offset(0x1bc);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x0);
	add();
	push_byte(0x8);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x8);
	add();
	push_base_offset(0x98);
	load(0x2);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0xc);
	add();
	push_base_offset(0x94);
	load(0x2);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1bc);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_base_offset(0x19c);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x0);
	add();
	push_word(0x1000);
	push_byte(0x0);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x0);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x0);
	neq();
	bool_or();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x25c);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x6);
	add();
	push_word(0x1000);
	push_byte(0x4);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x6);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x1);
	neq();
	bool_or();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x2c6);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0xc);
	add();
	push_word(0x1000);
	push_byte(0x8);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0xc);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x2);
	neq();
	bool_or();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x348);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x12);
	add();
	push_word(0x1000);
	push_byte(0xc);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x12);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x3);
	neq();
	bool_or();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x3ca);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x18);
	add();
	push_word(0x1000);
	push_byte(0x10);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x18);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x1b0);
	load(0x2);
	push_byte(0x4);
	neq();
	bool_or();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x44c);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x4);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x1e);
	add();
	push_word(0x1000);
	push_byte(0x14);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x1e);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	neq();
	push_base_offset(0x1b8);
	load(0x2);
	bool_and();
	push_dword(0x9fab8);
	push_word(0xe0);
	add();
	load(0x2);
	bool_and();
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_word(0xb04);
	load(0x2);
	bool_zero();
	bool_and();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x188);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x5);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x24);
	add();
	push_word(0x1000);
	push_byte(0x18);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x24);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	neq();
	push_base_offset(0x1b8);
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xdc);
	add();
	load(0x2);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	bool_or();
	bool_and();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_word(0x1f2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x18);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x6);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x3c);
	add();
	push_word(0x1000);
	push_byte(0x30);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x3c);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x5);
	neq();
	push_base_offset(0x1b8);
	load(0x2);
	bool_and();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x7);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_word(0x434);
	load(0x2);
	push_offset(L01081);
	jc(0x1);
	push_base_offset(0x88);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x5);
	push_base_offset(0x48);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x5);
	push_offset(L010a9);
	jmp();

L01081:
	push_base_offset(0x88);
	push_byte(0x0);
	push_word(0x35e);
	push_word(0x3e0);
	push_word(0x462);
	push_word(0x35e);
	cmd_0c(0x2, 0x5);
	push_base_offset(0x48);
	push_byte(0x0);
	push_word(0x293);
	push_word(0x293);
	push_word(0x293);
	push_word(0x25d);
	cmd_0c(0x2, 0x5);

L010a9:
	push_base_offset(0x98);
	push_base_offset(0x1bc);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x1);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x0);
	add();
	push_byte(0x5);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x8);
	add();
	push_base_offset(0x98);
	load(0x2);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1bc);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x1);
	push_byte(0x40);
	mul();
	add();
	push_base_offset(0x19c);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_base_offset(0x48);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1000);
	push_byte(0x1c);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1000);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1000);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x2a);
	add();
	push_word(0x1000);
	push_byte(0x20);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x2a);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b8);
	load(0x2);
	push_word(0x434);
	load(0x2);
	bool_or();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_base_offset(0x48);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x30);
	add();
	push_word(0x1000);
	push_byte(0x24);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x30);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_base_offset(0x48);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x1);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x36);
	add();
	push_word(0x1000);
	push_byte(0x28);
	add();
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x2);
	eq();
	push_word(0x1800);
	push_word(0x95);
	add();
	push_byte(0x36);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x90);
	load(0x2);
	ternary();
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_word(0x434);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_base_offset(0x48);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x15c);
	push_byte(0x0);
	add();
	push_base_offset(0x1ac);
	load(0x2);
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x4);
	add();
	push_base_offset(0x1b4);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0xc);
	add();
	push_base_offset(0x48);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1000);
	push_byte(0x2c);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1000);
	push_byte(0x2c);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1000);
	push_byte(0x2c);
	add();
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x15c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x4);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x15c);
	push_word(0xc4);
	memcpy();
	load_base();
	push_word(0x1bc);
	sub();
	store_base();
	ret();

L01564:
	load_base();
	push_byte(0x4c);
	add();
	store_base();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L015a7);
	jc(0x1);
	push_base_offset(0x40);
	push_offset(L015d3);
	push_offset(L015e2);
	push_offset(L015f1);
	push_offset(L01600);
	push_offset(L0160f);
	push_offset(L0161e);
	push_offset(L0162d);
	push_offset(L0163c);
	cmd_0c(0x2, 0x8);
	push_offset(L015b9);
	jmp();

L015a7:
	push_base_offset(0x40);
	push_offset(L0164b);
	push_offset(L01664);
	push_offset(L01677);
	push_offset(L016de);
	cmd_0c(0x2, 0x4);

L015b9:
	push_base_offset(0x44);
	load(0x2);
	push_base_offset(0x40);
	push_base_offset(0x48);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();
	load_base();
	push_byte(0x4c);
	sub();
	store_base();
	ret();

L015d3:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L015e2:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x1);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L015f1:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01600:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x3);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0160f:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x4);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0161e:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0162d:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0163c:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x5);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0164b:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0xcc);
	push_offset(L016fb);
	call();
	push_dword(0x7fffffff);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01664:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01677:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x41c);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L016d1);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("gotitle._bp");
	push_word(0x200);
	push_dword(0x8000);
	push_dword(0x8000);
	sys1(0x44);
	push_offset(L02390);
	call();

L016ad:
	push_word(0x4f4);
	load(0x2);
	push_offset(L016c7);
	jc(0x0);
	push_word(0x508);
	load(0x2);
	push_offset(L016c7);
	jc(0x1);
	sys1(0x5f);
	push_offset(L016ad);
	jmp();

L016c7:
	push_base_offset(0x4);
	push_dword(0x7fffffff);
	move(0x2);

L016d1:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L016de:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x4000);
	push_byte(0x0);
	sys1(0xa1);
	push_offset(L02390);
	call();
	push_dword(0x7fffffff);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L016fb:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0xa);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0177e);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L0177e);
	jc(0x0);
	push_word(0x4001);
	push_base_offset(0x4);
	load(0x2);
	sys1(0xa1);

L0172e:
	push_dword(0x42768);
	push_byte(0xa);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01749);
	jc(0x0);
	sys1(0x5f);
	push_offset(L0172e);
	jmp();

L01749:
	push_dword(0x42768);
	push_byte(0xa);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01764);
	jc(0x1);
	sys1(0x5f);
	push_offset(L01749);
	jmp();

L01764:
	push_word(0x4f4);
	load(0x2);
	push_offset(L0177e);
	jc(0x0);
	push_word(0x508);
	load(0x2);
	push_offset(L0177e);
	jc(0x1);
	sys1(0x5f);
	push_offset(L01764);
	jmp();

L0177e:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01784:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01829);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L0181d);
	jc(0x1);
	push_base_offset(0x10);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	grp2(0x38);
	push_base_offset(0x18);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x1);
	grp2(0x38);
	push_base_offset(0x14);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2);
	grp2(0x38);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	grp1(0x83);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	grp1(0x18);
	push_base_offset(0x20);
	load(0x2);
	grp1(0x12);
	push_offset(L01829);
	jmp();

L0181d:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	grp1(0x83);

L01829:
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L0182f:
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01929);
	jc(0x1);
	push_base_offset(0x20);
	push_byte(0x0);
	move(0x2);

L01857:
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	geq();
	push_offset(L01929);
	jc(0x0);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01918);
	jc(0x1);
	push_base_offset(0x10);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	grp2(0x38);
	push_base_offset(0x1c);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x1);
	grp2(0x38);
	push_base_offset(0x18);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x2);
	grp2(0x38);
	push_base_offset(0x14);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x10);
	grp2(0x38);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L01918);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x18);

L01918:
	push_base_offset(0x20);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01857);
	jmp();

L01929:
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();

L0192f:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01957);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x84);

L01957:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0195d:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L019d5);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01985:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	geq();
	push_offset(L019d5);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L019c4);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x54);

L019c4:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01985);
	jmp();

L019d5:
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L019db:
	load_base();
	push_byte(0x1c);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01a00:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	geq();
	push_offset(L01aa6);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01a52);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0xed7);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L01784);
	call();

L01a52:
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01a95);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01a95);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0182f);
	call();

L01a95:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01a00);
	jmp();

L01aa6:
	load_base();
	push_byte(0x1c);
	sub();
	store_base();
	ret();

L01aac:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L019db);
	call();
	grp1(0x50);
	push_dword(0x42ac8);
	move_arg(0x2);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x8d0);
	grp1(0x56);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x1);
	grp1(0x54);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01b1b:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	geq();
	push_offset(L01b9f);
	jc(0x0);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01b4e);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	push_offset(L0192f);
	call();

L01b4e:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01b8e);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01b8e);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	push_offset(L0195d);
	call();

L01b8e:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01b1b);
	jmp();

L01b9f:
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L01ba5:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_word(0xed4);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01aac);
	call();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L01bdf:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_word(0xec2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_offset(L019db);
	call();
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01cb3);
	jc(0x1);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xec2);
	push_word(0xed4);
	push_word(0x100);
	push_byte(0x0);
	push_word(0x8d0);
	push_byte(0x1);
	grp1(0x58);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L02340);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xec2);
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x8d0);
	grp1(0x56);
	push_word(0xed4);
	grp1(0x12);
	push_offset(L01d23);
	jmp();

L01cb3:
	grp1(0x50);
	push_dword(0x42ac8);
	move_arg(0x2);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xec2);
	push_byte(0x1);
	push_word(0x100);
	push_word(0x8d0);
	grp1(0x56);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L02340);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L01d23:
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01d2a:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	geq();
	push_offset(L01dae);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01d5d);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x1);
	push_offset(L0192f);
	call();

L01d5d:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01d9d);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01d9d);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x1);
	push_offset(L0195d);
	call();

L01d9d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01d2a);
	jmp();

L01dae:
	push_dword(0x42ac8);
	load(0x2);
	grp1(0x51);
	push_word(0xec2);
	grp1(0x12);
	push_dword(0x42ac8);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L01dcb:
	load_base();
	push_byte(0x1c);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_word(0xec2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L01aac);
	call();
	push_base_offset(0xc);
	load(0x2);
	push_offset(L02340);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	push_word(0x100);
	push_base_offset(0x8);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	grp1(0x51);
	push_word(0xec2);
	grp1(0x12);
	push_dword(0x42ac8);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x1c);
	sub();
	store_base();
	ret();

L01e71:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	move_arg(0x2);
	push_word(0xed4);
	grp1(0x4);
	push_word(0xec2);
	push_word(0xed4);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x1f);
	push_word(0xed4);
	grp1(0x12);
	grp1(0x50);
	push_dword(0x42ac8);
	move_arg(0x2);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xec2);
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x8d0);
	grp1(0x56);
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x1);
	grp1(0x54);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();

L01f09:
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_word(0x96);
	push_offset(L02340);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	push_word(0x100);
	push_base_offset(0x8);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x42ac8);
	load(0x2);
	grp1(0x51);
	push_word(0xec2);
	grp1(0x12);
	push_dword(0x42ac8);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();

L01fab:
	load_base();
	push_word(0x320);
	add();
	store_base();
	push_base_offset(0x318);
	move_arg(0x2);
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x320);
	move_arg(0x2);
	push_base_offset(0x314);
	push_byte(0x0);
	move(0x2);
	push_string("data03xxx.arc");
	push_base_offset(0x31c);
	load(0x2);
	sys1(0x34);
	push_offset(L02035);
	jc(0x0);
	push_byte(0x0);
	push_offset(L02052);
	jc(0x1);
	push_base_offset(0x318);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02003);
	jc(0x1);
	push_base_offset(0x310);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x318);
	load(0x2);
	call();
	push_offset(L02035);
	jc(0x0);
	push_offset(L02052);
	jmp();

L02003:
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x310);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x314);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x314);
	load(0x2);
	push_offset(L02035);
	jc(0x0);
	push_offset(L02052);
	jmp();

L02035:
	push_base_offset(0x320);
	load(0x2);
	push_string("data03xxx.arc");
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x10);
	shl();
	snd1(0x21);
	push_base_offset(0x314);
	push_byte(0x1);
	move(0x2);

L02052:
	push_base_offset(0x314);
	load(0x2);
	load_base();
	push_word(0x320);
	sub();
	store_base();
	ret();

L0205e:
	load_base();
	push_word(0x330);
	add();
	store_base();
	push_base_offset(0x324);
	move_arg(0x2);
	push_base_offset(0x328);
	move_arg(0x2);
	push_base_offset(0x32c);
	move_arg(0x2);
	push_base_offset(0x330);
	move_arg(0x2);
	push_base_offset(0x320);
	push_byte(0x0);
	move(0x2);
	push_string("data04xxx.arc");
	push_base_offset(0x32c);
	load(0x2);
	sys1(0x34);
	push_offset(L020ed);
	jc(0x0);
	push_byte(0x0);
	push_offset(L02182);
	jc(0x1);
	push_base_offset(0x328);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L020bb);
	jc(0x1);
	push_base_offset(0x31c);
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x328);
	load(0x2);
	call();
	push_offset(L020ed);
	jc(0x0);
	push_offset(L02182);
	jmp();

L020bb:
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x31c);
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x10);
	load(0x2);
	call();
	push_base_offset(0x320);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x320);
	load(0x2);
	push_offset(L020ed);
	jc(0x0);
	push_offset(L02182);
	jmp();

L020ed:
	push_base_offset(0x330);
	load(0x2);
	push_string("data04xxx.arc");
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x10);
	shl();
	snd1(0x21);
	push_base_offset(0xc);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x324);
	load(0x2);
	push_offset(L02126);
	jc(0x1);
	push_base_offset(0x32c);
	load(0x2);
	push_offset(L046b3);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L02126:
	push_base_offset(0x8);
	push_byte(0x20);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0457f);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x330);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	snd1(0x9);
	push_base_offset(0x330);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x330);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x4a4);
	load(0x2);
	ternary();
	push_word(0x4a4);
	move_arg(0x2);
	push_base_offset(0x320);
	push_byte(0x1);
	move(0x2);

L02182:
	push_base_offset(0x320);
	load(0x2);
	load_base();
	push_word(0x330);
	sub();
	store_base();
	ret();

L0218e:
	load_base();
	push_word(0x12c);
	add();
	store_base();
	push_base_offset(0x128);
	move_arg(0x2);
	push_base_offset(0x12c);
	move_arg(0x2);
	push_offset(L021a2);
	jmp();

L021a2:
	load_base();
	push_word(0x12c);
	sub();
	store_base();
	ret();

L021a9:
	load_base();
	push_byte(0x3c);
	add();
	store_base();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x3c);
	move_arg(0x2);
	push_base_offset(0x20);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x30);
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	push_word(0x500);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	move(0x2);

L021fa:
	push_base_offset(0x1c);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_word(0xc4);
	mul();
	add();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L022fd);
	jc(0x1);
	push_base_offset(0x18);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	grp1(0x16);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	lt();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	ternary();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x18);
	push_byte(0xc);
	add();
	load(0x2);
	add();
	push_base_offset(0x2c);
	load(0x2);
	gt();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x18);
	push_byte(0xc);
	add();
	load(0x2);
	add();
	push_base_offset(0x2c);
	load(0x2);
	ternary();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	lt();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	ternary();
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x18);
	push_byte(0x8);
	add();
	load(0x2);
	add();
	push_base_offset(0x24);
	load(0x2);
	gt();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x18);
	push_byte(0x8);
	add();
	load(0x2);
	add();
	push_base_offset(0x24);
	load(0x2);
	ternary();
	push_base_offset(0x24);
	move_arg(0x2);

L022fd:
	push_base_offset(0x34);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	lt();
	push_offset(L021fa);
	jc(0x0);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	sub();
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	sub();
	load_base();
	push_byte(0x3c);
	sub();
	store_base();
	ret();

L02340:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L02364);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L02380);
	jmp();

L02364:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L02380);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L02380:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L02390:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1f4);
	add();
	move(0x2);

L023aa:
	sys1(0x4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	geq();
	push_offset(L023d1);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L023d1);
	jc(0x0);
	sys1(0x5f);
	push_offset(L023aa);
	jmp();

L023d1:
	sys1(0x5f);
	push_word(0x450);
	load(0x2);
	push_offset(L023d1);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_word(0xbcc);
	load(0x2);
	push_offset(L0241c);
	jc(0x0);
	push_word(0xb9c);
	load(0x2);
	push_offset(L0241c);
	jc(0x0);
	push_word(0xbac);
	load(0x2);
	push_offset(L0241c);
	jc(0x0);
	push_word(0xbbc);
	load(0x2);
	push_offset(L02459);
	jc(0x1);

L0241c:
	push_word(0xbf0);
	sys1(0x1a);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x4);
	load(0x2);
	push_dword(-0x80000000);
	not();
	and();
	push_byte(0x0);
	neq();
	push_word(0x4e8);
	load(0x2);
	bool_zero();
	bool_or();
	push_word(0x4f4);
	load(0x2);
	bool_or();
	push_word(0x504);
	load(0x2);
	bool_or();
	push_word(0x450);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	bool_and();
	bool_or();
	move(0x2);

L02459:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0xbbc);
	load(0x2);
	push_offset(L024b5);
	jc(0x0);
	push_word(0xbbc);
	push_byte(0x1);
	move(0x2);
	push_word(0xbf0);
	sys1(0x18);
	push_byte(0x1);
	sys1(0x15);
	push_word(0xb3c);
	load(0x2);
	push_offset(L0249c);
	jc(0x1);
	push_dword(0x42764);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x4c);

L0249c:
	push_word(0xb4c);
	load(0x2);
	push_offset(L024b5);
	jc(0x1);
	push_dword(0x42764);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x4c);

L024b5:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_word(0xbbc);
	load(0x2);
	push_offset(L024ef);
	jc(0x1);
	push_byte(0x0);
	sys1(0x15);
	push_word(0xbf0);
	sys1(0x19);
	push_word(0xbc0);
	push_byte(0x0);
	move(0x2);
	push_word(0xbbc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);

L024ef:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_word(0xbac);
	load(0x2);
	push_offset(L02581);
	jc(0x0);
	push_word(0xbac);
	push_byte(0x1);
	move(0x2);
	push_word(0xbf0);
	sys1(0x18);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02581);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("environ._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x74);
	add();
	load(0x1);
	push_byte(0xa);
	push_byte(0x1);
	sub();
	push_byte(0x20);
	push_byte(0x12);
	add();
	load(0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xb48);
	load(0x2);
	push_byte(0xa);
	push_byte(0x1);
	sub();
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);

L02581:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_word(0xbac);
	load(0x2);
	push_offset(L025e5);
	jc(0x1);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L025cb);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("environ._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);

L025cb:
	push_word(0xbf0);
	sys1(0x19);
	push_word(0xbb0);
	push_byte(0x0);
	move(0x2);
	push_word(0xbac);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L025e5:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L02941);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L02941);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L02941);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L02941);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L0279a);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L0270d);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L0276b);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L0273c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L027c9);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L027f8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L02827);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L02856);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L02885);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L028b4);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L028e3);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L02912);
	jc(0x0);
	push_offset(L029b1);
	jmp();
	push_offset(L02941);
	jmp();

L0270d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L0273c:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L0276b:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L0279a:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L027c9:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L027f8:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L02827:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L02856:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L02885:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L028b4:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L028e3:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L02912:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L02941);
	jmp();

L02941:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L0297c);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L0297c);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L0297c:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L029b1:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L029bc:
	load_base();
	push_word(0xd0);
	add();
	store_base();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xcc);
	push_word(0x91c);
	load(0x2);
	move(0x2);
	push_word(0x91c);
	push_base_offset(0xd0);
	load(0x2);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x20);
	push_word(0xb6);
	add();
	move(0x2);
	push_base_offset(0x3c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x38);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x30);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc4);
	push_byte(0x0);
	move(0x2);

L02a17:
	push_base_offset(0x3c);
	push_base_offset(0x3c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0xd);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x38);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x11);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x34);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x26);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x30);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x28);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x21);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x22);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0xc4);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0xc);
	lt();
	push_offset(L02a17);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L02b23);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L02b71);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L02be1);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L02c2b);
	jc(0x0);
	push_offset(L02dcb);
	jmp();

L02b23:
	push_base_offset(0xc0);
	push_byte(0xe);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0xf);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L02c75);
	jmp();

L02b71:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1);
	ternary();
	push_base_offset(0xc8);
	move_arg(0x2);
	push_base_offset(0x80);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x3);
	push_base_offset(0xd0);
	load(0x2);
	push_offset(L02dd7);
	call();
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L02c75);
	jmp();

L02be1:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L02c75);
	jmp();

L02c2b:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L02c75);
	jmp();

L02c75:
	push_base_offset(0x24);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x200);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_offset(L02cb0);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x26);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02cb0:
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L02cd3);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x21);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02cd3:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_word(0x1000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_offset(L02d0f);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02d0f:
	push_base_offset(0x28);
	load(0x2);
	push_offset(L02d32);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x22);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02d32:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_word(0x2000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x0);
	neq();
	push_offset(L02d86);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x0);
	push_word(0xff);
	and();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02d86:
	push_base_offset(0x38);
	load(0x2);
	push_offset(L02da9);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x11);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02da9:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_dword(-0x80000000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x24);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x1);
	push_base_offset(0x24);
	sys1(0x62);

L02dcb:
	push_base_offset(0xcc);
	load(0x2);
	load_base();
	push_word(0xd0);
	sub();
	store_base();
	ret();

L02dd7:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x24);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xe);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xf);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x38);
	load(0x2);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);

L02e2a:
	push_byte(0x20);
	push_word(0xc6);
	add();
	push_base_offset(0x28);
	load(0x2);
	add();
	load(0x0);
	push_base_offset(0x34);
	load(0x2);
	neq();
	push_offset(L02e75);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x24);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L02e75:
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x3);
	lt();
	push_offset(L02e2a);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	load(0x2);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x6c);
	add();
	store_base();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x60);
	move_arg(0x2);
	push_base_offset(0x64);
	move_arg(0x2);
	push_base_offset(0x68);
	move_arg(0x2);
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0x44);
	push_byte(0x44);
	memclr();
	push_base_offset(0x44);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x8);
	add();
	push_base_offset(0x68);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x64);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x60);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0xc);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x1c);
	add();
	push_base_offset(0x5c);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x20);
	add();
	push_base_offset(0x58);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x24);
	add();
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x28);
	add();
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x2c);
	add();
	push_base_offset(0x4c);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x30);
	add();
	push_base_offset(0x48);
	load(0x2);
	move(0x2);
	push_dword(0x42324);
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_base_offset(0x44);
	push_byte(0x44);
	memcpy();
	push_string("sysprg.arc");
	push_string("sysobj._bp");
	push_word(0x100);
	push_word(0x1000);
	push_word(0x1000);
	sys1(0x44);
	push_dword(0x42324);
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	move_arg(0x2);
	push_dword(0x42324);
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	sys1(0x48);
	load_base();
	push_byte(0x6c);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x70);
	add();
	store_base();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x60);
	move_arg(0x2);
	push_base_offset(0x64);
	move_arg(0x2);
	push_base_offset(0x68);
	move_arg(0x2);
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x44);
	push_byte(0x44);
	memclr();
	push_base_offset(0x44);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x8);
	add();
	push_base_offset(0x6c);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x68);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x64);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0xc);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x60);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x1c);
	add();
	push_base_offset(0x5c);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x20);
	add();
	push_base_offset(0x58);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x24);
	add();
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x28);
	add();
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x2c);
	add();
	push_base_offset(0x4c);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x30);
	add();
	push_base_offset(0x48);
	load(0x2);
	move(0x2);
	push_dword(0x42324);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_base_offset(0x44);
	push_byte(0x44);
	memcpy();
	push_string("sysprg.arc");
	push_string("sysobjex._bp");
	push_word(0x100);
	push_word(0x1000);
	push_word(0x1000);
	sys1(0x44);
	push_dword(0x42324);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	move_arg(0x2);
	push_dword(0x42324);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x70);
	load(0x2);
	sys1(0x48);
	load_base();
	push_byte(0x70);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x58);
	add();
	store_base();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x44);
	push_byte(0x44);
	memclr();
	push_base_offset(0x44);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x8);
	add();
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x34);
	add();
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x38);
	add();
	push_base_offset(0x4c);
	load(0x2);
	move(0x2);
	push_base_offset(0x44);
	push_byte(0x3c);
	add();
	push_base_offset(0x48);
	load(0x2);
	move(0x2);
	push_dword(0x42324);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_base_offset(0x44);
	push_byte(0x44);
	memcpy();
	push_string("sysprg.arc");
	push_string("sysobjanm._bp");
	push_word(0x100);
	push_word(0x1000);
	push_word(0x1000);
	sys1(0x44);
	push_dword(0x42324);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	move_arg(0x2);
	push_dword(0x42324);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x58);
	load(0x2);
	sys1(0x48);
	load_base();
	push_byte(0x58);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	sys1(0x5f);
	push_offset(L031ea);
	call();
	push_byte(0x0);
	push_byte(0x0);
	push_offset(L03278);
	call();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L031ea:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L031f6:
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03258);
	jc(0x1);
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	load(0x2);
	sys1(0x47);
	push_offset(L03258);
	jc(0x1);
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x0);
	sys1(0x4c);

L03258:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	lt();
	push_offset(L031f6);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L03278:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L0329f);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	sys1(0x18);

L0329f:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L032a6:
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0330c);
	jc(0x1);

L032be:
	sys1(0x5f);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L032dd);
	jc(0x1);
	sys1(0x17);
	push_offset(L0333b);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	sys1(0x1a);
	push_offset(L0333b);
	jc(0x0);

L032dd:
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x40);
	add();
	load(0x2);
	sys1(0x47);
	push_offset(L032fb);
	jc(0x1);
	push_offset(L032be);
	jmp();

L032fb:
	push_dword(0x42324);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	mul();
	add();
	push_byte(0x44);
	memclr();

L0330c:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	lt();
	push_offset(L032a6);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L03362);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	sys1(0x19);
	push_offset(L03362);
	jmp();

L0333b:
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L03353);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	sys1(0x19);

L03353:
	push_offset(L031ea);
	call();
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_offset(L0329f);
	jmp();

L03362:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L0336d:
	load_base();
	push_byte(0x0);
	add();
	store_base();

L03372:
	push_word(0xaac);
	load(0x2);
	push_offset(L03382);
	jc(0x0);
	sys1(0x5f);
	push_offset(L03372);
	jmp();

L03382:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L03388:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x3b90);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L033aa:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0340a);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03415);
	call();
	push_offset(L0340a);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0349f);
	call();
	push_offset(L0340a);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0340a:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03415:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03494);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03494);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x498);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L03494);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x498);
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03494);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L03494:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L0349f:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0351e);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0351e);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x49c);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0351e);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x49c);
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0351e);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L0351e:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03529:
	load_base();
	push_word(0x120);
	add();
	store_base();
	push_base_offset(0x11c);
	move_arg(0x2);
	push_base_offset(0x120);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03609);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x11c);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03609);
	jc(0x1);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x118);
	push_dword(0x40000002);
	push_base_offset(0x120);
	load(0x2);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	cmd_0c(0x2, 0x4);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x118);
	sys1(0x4a);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0x5e);

L035bc:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03609);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L035bc);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000000);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000001);
	eq();
	bool_or();
	push_offset(L03609);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("ウィンク開始要求時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L03609:
	load_base();
	push_word(0x120);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03621:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03643);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L03654);
	jc(0x1);

L03643:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L03529);
	call();

L03654:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1f);
	lt();
	push_word(0xb9c);
	load(0x2);
	bool_zero();
	bool_or();
	bool_and();
	push_offset(L03621);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L03684:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L036d4);
	jc(0x1);
	push_base_offset(0xc);
	push_dword(0x40000003);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	cmd_0c(0x2, 0x3);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x3);
	push_base_offset(0xc);
	sys1(0x4a);

L036d4:
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x227a0);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x118);
	add();
	store_base();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L037bc);
	jc(0x1);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_dword(0x445b4);
	push_base_offset(0x118);
	load(0x2);
	cmd_6a();
	push_dword(0x40000004);
	push_base_offset(0x114);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_dword(0x445b4);
	push_base_offset(0x114);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x114);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x114);
	sys1(0x4a);

L0376f:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L037bc);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L0376f);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000002);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000003);
	eq();
	bool_or();
	push_offset(L037bc);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("音声再生時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L037bc:
	load_base();
	push_word(0x118);
	sub();
	store_base();
	ret();

L037c3:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L037f4);
	jc(0x1);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(0x40000005);
	sys1(0x48);

L037f4:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0380b:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0382d);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0383e);
	jc(0x1);

L0382d:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L03684);
	call();

L0383e:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L0380b);
	jc(0x0);
	push_offset(L037c3);
	call();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03863:
	sys1(0x5f);

L03865:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03887);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0389d);
	jc(0x1);

L03887:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L033aa);
	call();
	push_offset(L03863);
	jc(0x0);

L0389d:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03865);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L038bd:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03903);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x40000001);
	push_base_offset(0xc);
	load(0x2);
	cmd_0c(0x2, 0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x8);
	sys1(0x4a);

L03903:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03909:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0391a:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	eq();
	push_offset(L03972);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L0397b);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03972);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L0397b);
	jc(0x1);

L03972:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L038bd);
	call();

L0397b:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L0391a);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0399c:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L03a44);
	jc(0x0);

L039a8:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	eq();
	push_offset(L03a00);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L03a2a);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03a00);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L03a2a);
	jc(0x1);

L03a00:
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03388);
	call();
	push_offset(L0399c);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x1b4d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x94);
	mul();
	add();
	push_word(0x94);
	memclr();

L03a2a:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L039a8);
	jc(0x0);

L03a44:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03a4a:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03a9e);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03388);
	call();
	push_offset(L03a9e);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x40000007);
	push_base_offset(0xc);
	load(0x2);
	cmd_0c(0x2, 0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x8);
	sys1(0x4a);

L03a9e:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L03aa4:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L03ac8);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03a4a);
	call();
	push_offset(L03b42);
	jmp();

L03ac8:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03acf:
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03b10);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L03b28);
	jc(0x1);

L03b10:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03a4a);
	call();
	push_byte(0x40);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03a4a);
	call();

L03b28:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03acf);
	jc(0x0);

L03b42:
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L03b6d);
	jc(0x0);

L03b4f:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L03bfd);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03388);
	call();
	push_offset(L03b4f);
	jc(0x0);
	push_offset(L03bfd);
	jmp();

L03b6d:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03b74:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L03bfd);
	jc(0x0);

L03b80:
	push_base_offset(0x8);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03bc1);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L03be3);
	jc(0x1);

L03bc1:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03388);
	call();
	push_offset(L03b74);
	jc(0x0);
	push_byte(0x40);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L03388);
	call();
	push_offset(L03b74);
	jc(0x0);

L03be3:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03b80);
	jc(0x0);

L03bfd:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L03909);
	call();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L03aa4);
	call();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L03c22:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_offset(L037c3);
	call();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L03c32:
	sys1(0x5f);

L03c34:
	push_byte(0x20);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_offset(L0349f);
	call();
	push_offset(L03c32);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L03c34);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x118);
	add();
	store_base();
	push_base_offset(0x118);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03d2d);
	jc(0x1);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x114);
	push_dword(0x40000000);
	push_base_offset(0x118);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	cmd_0c(0x2, 0x3);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x114);
	sys1(0x4a);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0x5e);

L03ce0:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03d2d);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L03ce0);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000004);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000005);
	eq();
	bool_or();
	push_offset(L03d2d);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("スプライトアニメーション開始時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L03d2d:
	load_base();
	push_word(0x118);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x150);
	add();
	store_base();
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0x134);
	move_arg(0x2);
	push_base_offset(0x138);
	move_arg(0x2);
	push_base_offset(0x13c);
	move_arg(0x2);
	push_base_offset(0x140);
	move_arg(0x2);
	push_base_offset(0x144);
	move_arg(0x2);
	push_base_offset(0x148);
	move_arg(0x2);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x150);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03e86);
	jc(0x1);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03e86);
	jc(0x1);
	push_base_offset(0x12c);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x20);
	sub();
	move(0x2);
	push_dword(0x8e1cc);
	push_base_offset(0x12c);
	load(0x2);
	push_word(0x8b0);
	mul();
	add();
	push_base_offset(0x138);
	load(0x2);
	push_word(0x8b0);
	memcpy();
	push_dword(0x9f7cc);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x10);
	memcpy();
	push_dword(0x9f9cc);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	sys1(0x46);
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x128);
	push_dword(0x40000006);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_base_offset(0x144);
	load(0x2);
	push_base_offset(0x140);
	load(0x2);
	push_base_offset(0x13c);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	cmd_0c(0x2, 0x8);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x8);
	push_base_offset(0x128);
	sys1(0x4a);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0x5e);

L03e39:
	sys1(0x5f);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03e86);
	jc(0x1);
	push_base_offset(0x104);
	sys1(0x49);
	push_offset(L03e39);
	jc(0x1);
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000006);
	eq();
	push_base_offset(0x104);
	load(0x2);
	push_dword(0x41000007);
	eq();
	bool_or();
	push_offset(L03e86);
	jc(0x0);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x100);
	push_string("スプライトアニメーション開始時に無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x100);
	cmd_79();

L03e86:
	load_base();
	push_word(0x150);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x8);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L03f90);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_offset(L03aa4);
	call();
	push_base_offset(0x10);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	neq();
	push_offset(L03f01);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	grp2(0x1f);

L03f01:
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x520);
	memcpy();
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x514);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x520);
	memclr();

L03f90:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x1c);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_offset(L04213);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	neq();
	push_offset(L04010);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x10);
	add();
	load(0x2);
	grp2(0x1f);

L04010:
	push_word(0x3b90);
	push_base_offset(0x30);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x520);
	memcpy();
	push_base_offset(0x10);
	push_word(0x3b90);
	push_base_offset(0x30);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	push_word(0x3b90);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);

L04059:
	push_base_offset(0x8);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x10);
	mul();
	sys1(0x20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	grp2(0x1f);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	grp2(0x1f);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);

L040e5:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	lt();
	push_offset(L040e5);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x40);
	add();
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x5c);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	lt();
	push_offset(L04059);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x2c);
	load(0x2);
	move(0x2);

L04213:
	push_base_offset(0x1c);
	load(0x2);
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04265);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L04265:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L042f8);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x514);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x518);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L042f8:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0434b);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_word(0x50c);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L0434b:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L043b9);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L043b9);
	jc(0x0);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_offset(L043c4);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L043b9:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L043c4:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L043e2);
	jc(0x1);
	push_word(0x720);
	sys1(0x18);

L043e2:
	push_word(0x504);
	load(0x2);
	push_offset(L04447);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L04447);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04413);
	jc(0x1);
	sys1(0x17);
	push_offset(L04447);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L04447);
	jc(0x0);

L04413:
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04447);
	jc(0x1);
	push_word(0x3b90);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L04447);
	jc(0x0);
	sys1(0x5f);
	push_offset(L043e2);
	jmp();

L04447:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L04456);
	jc(0x1);
	push_word(0x720);
	sys1(0x19);

L04456:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0446b:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x32);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x1);
	sar();
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x38);
	load(0x2);
	push_word(0x80);
	mul();
	push_byte(0x65);
	push_byte(0x1);
	sub();
	div();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x22);
	add();
	load(0x1);
	push_offset(L0446b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x32);
	add();
	load(0x1);
	push_offset(L0446b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0x8e);
	add();
	load(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0x90);
	add();
	load(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x80);
	push_base_offset(0xc);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_word(0x80);
	div();
	push_base_offset(0x4);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	ternary();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L048a2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0457f);
	call();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L0457f:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x22);
	add();
	load(0x1);
	push_offset(L0446b);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x1);
	push_offset(L0446b);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x8e);
	add();
	load(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x94);
	add();
	load(0x1);
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x80);
	push_base_offset(0x10);
	load(0x2);
	sub();
	sub();
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L04695);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2);
	mul();
	add();
	load(0x1);
	push_offset(L0446b);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L04670);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_word(0x80);
	div();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);

L04670:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x34);
	add();
	push_base_offset(0x1c);
	load(0x2);
	add();
	load(0x0);
	move(0x2);
	push_offset(L046a8);
	jmp();

L04695:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x1);
	move(0x2);

L046a8:
	push_base_offset(0x18);
	load(0x2);
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L046b3:
	load_base();
	push_word(0x1a0);
	add();
	store_base();
	push_base_offset(0x1a0);
	move_arg(0x2);
	push_base_offset(0x180);
	push_string("AK");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x178);
	push_string("SA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x170);
	push_string("RE");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x168);
	push_string("KA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x160);
	push_string("MA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x158);
	push_string("KZ");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x150);
	push_string("AR");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x148);
	push_string("SY");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x140);
	push_string("HI");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x138);
	push_string("BE");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x130);
	push_string("KK");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x128);
	push_string("W");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x120);
	push_string("M");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x118);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x110);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x108);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x100);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xf8);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xf0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe8);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xd8);
	push_byte(0x0);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x180);
	push_base_offset(0x178);
	push_base_offset(0x170);
	push_base_offset(0x168);
	push_base_offset(0x160);
	push_base_offset(0x158);
	push_base_offset(0x150);
	push_base_offset(0x148);
	push_base_offset(0x140);
	push_base_offset(0x138);
	cmd_0c(0x2, 0xa);
	push_base_offset(0xd8);
	push_byte(0xa);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x130);
	push_base_offset(0x128);
	push_base_offset(0x120);
	push_base_offset(0x118);
	push_base_offset(0x110);
	push_base_offset(0x108);
	push_base_offset(0x100);
	push_base_offset(0xf8);
	push_base_offset(0xf0);
	push_base_offset(0xe8);
	cmd_0c(0x2, 0xa);
	push_base_offset(0xd8);
	push_byte(0x14);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0xe0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x84);
	push_base_offset(0x1a0);
	load(0x2);
	cmd_6a();
	push_base_offset(0x84);
	cmd_6d();
	push_base_offset(0x194);
	push_byte(0x0);
	move(0x2);

L04804:
	push_base_offset(0x4);
	push_base_offset(0xd8);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);

L04817:
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04871);
	jc(0x1);
	push_base_offset(0x190);
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	cmd_6a();
	push_base_offset(0x190);
	cmd_6d();
	push_base_offset(0x190);
	cmd_68();
	push_base_offset(0x198);
	move_arg(0x2);
	push_base_offset(0x84);
	push_base_offset(0x190);
	push_base_offset(0x198);
	load(0x2);
	memcmp();
	push_offset(L04863);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x2);
	shl();
	add();
	move(0x2);
	push_offset(L04817);
	jmp();

L04863:
	push_base_offset(0x19c);
	push_base_offset(0x194);
	load(0x2);
	move(0x2);
	push_offset(L04896);
	jmp();

L04871:
	push_base_offset(0x194);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0xd);
	lt();
	push_offset(L04804);
	jc(0x0);
	push_base_offset(0x19c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L04896:
	push_base_offset(0x19c);
	load(0x2);
	load_base();
	push_word(0x1a0);
	sub();
	store_base();
	ret();

L048a2:
	load_base();
	push_byte(0x5c);
	add();
	store_base();
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x5c);
	load(0x2);
	push_offset(L046b3);
	call();
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x58);
	load(0x2);
	push_byte(0xd);
	lt();
	bool_and();
	push_offset(L04915);
	jc(0x1);
	push_base_offset(0x54);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x2);
	push_byte(0x3);
	push_byte(0x4);
	push_byte(0x5);
	push_byte(0x6);
	push_byte(0x7);
	push_byte(0x8);
	push_byte(0x9);
	cmd_0c(0x2, 0xa);
	push_base_offset(0x54);
	push_byte(0xa);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xa);
	push_byte(0xb);
	push_byte(0xc);
	cmd_0c(0x2, 0x3);
	push_base_offset(0x58);
	push_base_offset(0x54);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);

L04915:
	push_base_offset(0x58);
	load(0x2);
	load_base();
	push_byte(0x5c);
	sub();
	store_base();
	ret();
