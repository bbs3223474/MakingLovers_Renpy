	load_base();
	push_word(0x250);
	add();
	store_base();
	push_base_offset(0x250);
	move_arg(0x2);
	push_base_offset(0x22c);
	push_word(0x450);
	load(0x2);
	move(0x2);
	push_word(0x450);
	push_byte(0x1);
	move(0x2);
	push_byte(0x0);
	push_offset(L01917);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_base_offset(0x24c);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x224);
	push_byte(0x6);
	push_byte(0x4);
	push_byte(0x3);
	push_byte(0x7);
	push_byte(0x5);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x2);
	push_byte(0xc);
	cmd_0c(0x2, 0x9);
	push_base_offset(0x1e4);
	push_byte(0x0);
	push_byte(0x7);
	push_byte(0x1);
	push_byte(0x2);
	push_byte(0x8);
	push_byte(0x3);
	push_byte(0x4);
	push_byte(0x5);
	push_byte(0x6);
	cmd_0c(0x2, 0x9);
	push_base_offset(0x248);
	push_byte(0x0);
	move(0x2);

L00065:
	push_base_offset(0x224);
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x250);
	load(0x2);
	neq();
	push_offset(L0009a);
	jc(0x0);
	push_byte(0x20);
	push_word(0xca);
	add();
	push_base_offset(0x1e4);
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	load(0x0);
	push_offset(L00338);
	jc(0x1);

L0009a:
	push_base_offset(0x248);
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x248);
	load(0x2);
	push_byte(0x9);
	lt();
	push_offset(L00065);
	jc(0x0);
	push_base_offset(0x1a4);
	push_string("SGDialog990000");
	push_string("SGDialog990001");
	push_string("SGDialog990002");
	push_string("SGDialog990003");
	push_string("SGDialog990004");
	push_string("SGDialog990005");
	push_string("SGDialog990006");
	push_string("SGDialog990007");
	push_string("SGDialog990008");
	push_string("SGDialog990009");
	push_string("SGDialog990010");
	push_string("SGDialog990011");
	push_string("SGDialog990012");
	push_string("SGDialog990013");
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x12);
	push_base_offset(0x1a4);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0011c);
	jc(0x1);
	push_offset(L0016e);
	jmp();
	push_base_offset(0x124);
	push_word(0x5c0);
	push_byte(0x9);
	add();
	push_base_offset(0x250);
	load(0x2);
	add();
	grp1(0x16);
	push_offset(L0016e);
	jc(0x0);

L0011c:
	sys1(0x5f);
	push_base_offset(0x10c);
	push_string("ゲームを終了しますか？");
	push_string("タイトルに戻りますか？");
	push_string("一つ前の選択肢へ戻りますか？");
	push_string("データを上書きしますか？");
	push_string("クイックセーブを行いますか？");
	push_string("クイックロードを行いますか？");
	push_string("データを保存しますか？");
	push_string("データを読み込みますか？");
	push_string("クイックジャンプを行いますか？");
	push_string("データを削除しますか？");
	push_string("データをコピーしますか？");
	push_string("データを移動しますか？");
	push_string("CGモードに戻りますか？");
	push_string("この名前でよろしいですか？");
	push_string("次の選択肢にジャンプしますか？");
	cmd_0c(0x2, 0xf);
	push_base_offset(0x10c);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x1);
	usr1(0x82);
	push_base_offset(0x24c);
	move_arg(0x2);
	push_offset(L00338);
	jmp();

L0016e:
	push_base_offset(0x8c);
	push_word(0xf10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	push_word(0xe10);
	cmd_0c(0x2, 0x12);
	push_base_offset(0x8c);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	sys1(0x18);
	push_word(0x454);
	push_word(0x454);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc);
	push_word(0x454);
	load(0x2);
	move(0x2);
	push_byte(0x0);
	grp1(0xdd);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x5c0);
	push_byte(0x1c);
	add();
	push_string("sysgrp.arc");
	push_base_offset(0x1a4);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	grp1(0x10);
	push_word(0x5c0);
	push_byte(0x9);
	add();
	push_base_offset(0x250);
	load(0x2);
	add();
	push_word(0x5c0);
	push_byte(0x8);
	add();
	grp2(0x1f);
	push_word(0x5c0);
	push_byte(0x9);
	add();
	push_base_offset(0x250);
	load(0x2);
	add();
	push_word(0x172);
	push_word(0x12f);
	push_word(0x5c0);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0x0);
	grp1(0x18);
	push_word(0x5c0);
	push_byte(0x1c);
	add();
	grp1(0x12);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x80);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0x5c0);
	push_byte(0x9);
	add();
	push_base_offset(0x250);
	load(0x2);
	add();
	grp1(0x86);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_word(0x100);
	push_byte(0x0);
	push_base_offset(0x8c);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	grp1(0x85);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1a);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0x88);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x88);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	grp2(0x89);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	grp3(0x88);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0xf);
	geq();
	push_offset(L002d6);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x250);
	load(0x2);
	push_offset(L00357);
	call();
	push_base_offset(0x24c);
	move_arg(0x2);
	push_offset(L002e6);
	jmp();

L002d6:
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0101f);
	call();
	push_base_offset(0x24c);
	push_byte(0x1);
	move(0x2);

L002e6:
	push_base_offset(0x4);
	load(0x2);
	grp1(0x81);
	push_word(0x5c0);
	push_byte(0x9);
	add();
	push_base_offset(0x250);
	load(0x2);
	add();
	grp1(0x12);
	push_byte(0x0);
	grp1(0x0);
	push_base_offset(0x8);
	load(0x2);
	grp1(0xdd);

L00306:
	sys1(0x5f);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x454);
	load(0x2);
	eq();
	push_offset(L00306);
	jc(0x1);
	push_word(0x454);
	push_word(0x454);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x8c);
	push_base_offset(0x250);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	sys1(0x19);

L00338:
	push_base_offset(0x228);
	load(0x2);
	push_offset(L01917);
	call();
	push_word(0x450);
	push_base_offset(0x22c);
	load(0x2);
	move(0x2);
	push_base_offset(0x24c);
	load(0x2);
	load_base();
	push_word(0x250);
	sub();
	store_base();
	ret();

L00357:
	load_base();
	push_word(0x654);
	add();
	store_base();
	push_base_offset(0x650);
	move_arg(0x2);
	push_base_offset(0x654);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L01917);
	call();
	push_base_offset(0x22c);
	move_arg(0x2);
	push_base_offset(0x650);
	load(0x2);
	push_offset(L012ba);
	call();
	push_base_offset(0x228);
	move_arg(0x2);
	push_base_offset(0x224);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x224);
	load(0x2);
	push_offset(L003fe);
	jc(0x1);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	push_byte(0x11);
	push_byte(0x12);
	mul();
	push_byte(0x12);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x5c0);
	push_byte(0x19);
	add();
	push_word(0x5c0);
	push_byte(0x9);
	add();
	push_base_offset(0x650);
	load(0x2);
	add();
	push_word(0x186);
	push_word(0xce);
	sub();
	push_word(0x105);
	push_word(0x94);
	sub();
	push_byte(0x11);
	push_byte(0x12);
	mul();
	push_byte(0x12);
	grp1(0x1f);
	push_word(0x5c0);
	push_byte(0x1a);
	add();
	push_word(0x190);
	push_byte(0x20);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x5c0);
	push_byte(0x1a);
	add();
	push_byte(0x0);
	grp1(0x13);
	push_word(0x5c0);
	push_byte(0x1b);
	add();
	push_word(0x500);
	push_word(0x2d0);
	push_byte(0x2);
	grp1(0x11);
	push_word(0x5c0);
	push_byte(0x1b);
	add();
	push_byte(0x0);
	grp1(0x13);

L003fe:
	push_word(0x458);
	load(0x2);
	push_offset(L00415);
	jc(0x1);
	push_dword(0x45f30);
	push_offset(L00fdb);
	call();
	push_offset(L00417);
	jmp();

L00415:
	usr1(0x21);

L00417:
	push_byte(0x20);
	push_word(0x82);
	add();
	load(0x1);
	push_offset(L00472);
	jc(0x1);
	push_base_offset(0x244);
	push_word(0x5c0);
	push_byte(0x0);
	add();
	grp1(0x16);
	sys1(0x8);
	push_base_offset(0x21c);
	move_arg(0x2);
	push_base_offset(0x220);
	move_arg(0x2);
	push_byte(0x32);
	push_offset(L014f6);
	call();
	push_base_offset(0x64c);
	move_arg(0x2);
	push_word(0x1d1);
	push_base_offset(0x244);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x2);
	div();
	add();
	push_word(0x17d);
	push_base_offset(0x244);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x2);
	div();
	add();
	push_byte(0x1);
	push_base_offset(0x64c);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	sys1(0x1f);

L00472:
	push_base_offset(0x218);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x218);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x218);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x29e);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x17d);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0xc);
	add();
	push_word(0x5c0);
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x10);
	add();
	push_word(0x5c0);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x18);
	add();
	push_word(0x5c0);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x1d1);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x17d);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0xc);
	add();
	push_word(0x5c0);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x10);
	add();
	push_word(0x5c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x18);
	add();
	push_word(0x5c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20c);
	push_byte(0x1);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x224);
	load(0x2);
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x138);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0xfe);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0xc);
	add();
	push_word(0x5c0);
	push_byte(0x1a);
	add();
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x10);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x224);
	load(0x2);
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0xc);
	add();
	push_word(0x5c0);
	push_byte(0x1b);
	add();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x10);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x20c);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x10);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x194);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x11c);
	push_byte(0x1);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x158);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x11c);
	push_byte(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x218);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x80);
	push_byte(0x0);
	add();
	push_byte(0x3);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0x4);
	add();
	push_base_offset(0x11c);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x80);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x654);
	load(0x2);
	push_base_offset(0x80);
	grp1(0xb6);
	push_base_offset(0x224);
	load(0x2);
	push_offset(L00a78);
	jc(0x1);
	push_base_offset(0x654);
	load(0x2);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	push_dword(0x45f30);
	push_offset(L00f0b);
	call();

L00a78:
	push_base_offset(0x228);
	load(0x2);
	push_offset(L00a91);
	jc(0x1);
	push_byte(0x32);
	push_byte(0x0);
	add();
	push_word(0x4a0);
	load(0x2);
	add();
	push_offset(L01546);
	call();

L00a91:
	push_word(0x96);
	push_offset(L014f6);
	call();
	push_base_offset(0x64c);
	move_arg(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x654);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x64c);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x60);
	push_word(0x458);
	load(0x2);
	move(0x2);
	push_base_offset(0x5c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x58);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L00ae4:
	push_base_offset(0x654);
	load(0x2);
	grp1(0xb8);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x194);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x224);
	load(0x2);
	push_word(0x458);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_base_offset(0x158);
	push_byte(0x0);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x224);
	load(0x2);
	push_word(0x458);
	load(0x2);
	bool_and();
	move(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_base_offset(0x80);
	grp1(0xba);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L00b4a:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L00d05);
	jc(0x0);
	push_base_offset(0x224);
	load(0x2);
	push_offset(L00ba0);
	jc(0x1);
	push_base_offset(0x60);
	load(0x2);
	push_word(0x458);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L00ba0);
	jc(0x1);
	push_dword(0x45f30);
	push_offset(L00fdb);
	call();
	push_base_offset(0x654);
	load(0x2);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	push_dword(0x45f30);
	push_offset(L00f0b);
	call();
	push_base_offset(0x60);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x54);
	load(0x2);
	grp1(0xb9);
	push_offset(L00ae4);
	jmp();

L00ba0:
	push_base_offset(0x50);
	push_base_offset(0x54);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0x50);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L00c66);
	jc(0x1);
	push_base_offset(0x2c);
	push_base_offset(0x50);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x50);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x24);
	push_dword(0x10000002);
	push_byte(0x0);
	push_base_offset(0x28);
	load(0x2);
	cmd_0c(0x2, 0x3);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x24);
	sys1(0xac);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x5c);
	load(0x2);
	eq();
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x58);
	load(0x2);
	eq();
	bool_and();
	push_offset(L00ba0);
	jc(0x0);
	push_base_offset(0x5c);
	push_base_offset(0x2c);
	load(0x2);
	move(0x2);
	push_base_offset(0x58);
	push_base_offset(0x28);
	load(0x2);
	move(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	bool_or();
	push_offset(L00ba0);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L00ba0);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L01546);
	call();
	push_offset(L00ba0);
	jmp();

L00c66:
	push_base_offset(0x50);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L00ca7);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x50);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x50);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_offset(L00cb7);
	jmp();

L00ca7:
	push_base_offset(0x50);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00ba0);
	jc(0x1);

L00cb7:
	push_base_offset(0x44);
	push_base_offset(0x54);
	load(0x2);
	grp1(0xbc);
	push_base_offset(0x44);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L00b4a);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x28);
	move_arg(0x2);

L00d05:
	push_base_offset(0x54);
	load(0x2);
	grp1(0xb9);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L00d67);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_byte(0x0);
	push_byte(0x0);
	add();
	push_byte(0x0);
	push_byte(0x3);
	add();
	ternary();
	push_base_offset(0x648);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	eq();
	bool_and();
	push_base_offset(0x650);
	load(0x2);
	push_byte(0x7);
	eq();
	push_base_offset(0x650);
	load(0x2);
	push_byte(0x5);
	eq();
	bool_or();
	bool_and();
	push_byte(0x0);
	push_byte(0xc);
	add();
	push_base_offset(0x648);
	load(0x2);
	ternary();
	push_offset(L01546);
	call();

L00d67:
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L00dab);
	jc(0x1);
	push_base_offset(0x20c);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x20c);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x3c);
	mul();
	add();
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x654);
	load(0x2);
	push_base_offset(0x80);
	grp1(0xb6);
	push_byte(0x0);
	grp1(0x0);

L00dab:
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00e4e);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00e4e);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L00de7);
	jc(0x0);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L00e1c);
	jc(0x0);
	push_offset(L00e4e);
	jmp();

L00de7:
	push_base_offset(0x224);
	load(0x2);
	push_offset(L00ae4);
	jc(0x1);
	push_base_offset(0x654);
	load(0x2);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	push_byte(0x0);
	push_offset(L00f0b);
	call();
	push_dword(0x45f30);
	push_word(0x186);
	push_word(0x105);
	push_offset(L00f7c);
	call();
	push_base_offset(0x60);
	push_byte(0x1);
	move(0x2);
	push_offset(L00ae4);
	jmp();

L00e1c:
	push_base_offset(0x224);
	load(0x2);
	push_offset(L00ae4);
	jc(0x1);
	push_dword(0x45f30);
	push_offset(L00fdb);
	call();
	push_base_offset(0x654);
	load(0x2);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	push_dword(0x45f30);
	push_offset(L00f0b);
	call();
	push_base_offset(0x60);
	push_byte(0x0);
	move(0x2);
	push_offset(L00ae4);
	jmp();

L00e4e:
	push_base_offset(0x224);
	load(0x2);
	push_offset(L00e75);
	jc(0x1);
	push_dword(0x45f30);
	push_offset(L00fdb);
	call();
	push_base_offset(0x654);
	load(0x2);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	push_dword(0x45f30);
	push_offset(L00f0b);
	call();

L00e75:
	push_byte(0x20);
	push_word(0x82);
	add();
	load(0x1);
	push_offset(L00ea5);
	jc(0x1);
	push_byte(0x32);
	push_offset(L014f6);
	call();
	push_base_offset(0x64c);
	move_arg(0x2);
	push_base_offset(0x220);
	load(0x2);
	push_base_offset(0x21c);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x64c);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	sys1(0x1f);

L00ea5:
	push_word(0x96);
	push_offset(L014f6);
	call();
	push_base_offset(0x64c);
	move_arg(0x2);
	push_base_offset(0x654);
	load(0x2);
	push_word(0x100);
	push_base_offset(0x64c);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x224);
	load(0x2);
	push_offset(L00ef3);
	jc(0x1);
	push_word(0x5c0);
	push_byte(0x18);
	add();
	grp1(0x12);
	push_word(0x5c0);
	push_byte(0x19);
	add();
	grp1(0x12);
	push_word(0x5c0);
	push_byte(0x1a);
	add();
	grp1(0x12);
	push_word(0x5c0);
	push_byte(0x1b);
	add();
	grp1(0x12);

L00ef3:
	push_base_offset(0x22c);
	load(0x2);
	push_offset(L01917);
	call();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	eq();
	load_base();
	push_word(0x654);
	sub();
	store_base();
	ret();

L00f0b:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x5c0);
	push_byte(0x19);
	add();
	push_word(0x80);
	push_byte(0x0);
	grp1(0x18);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00f5f);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);

L00f5f:
	push_base_offset(0xc);
	load(0x2);
	push_word(0x186);
	push_word(0x105);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x0);
	grp3(0x89);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L00f7c:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_word(0x458);
	push_byte(0x1);
	move(0x2);
	push_byte(0x64);
	usr1(0x22);
	push_dword(0xffffff);
	usr1(0x25);
	push_base_offset(0xc);
	load(0x2);
	usr1(0x26);
	push_byte(0x1);
	usr1(0x28);
	push_byte(0x0);
	usr1(0x29);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	sub();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x11);
	push_byte(0x12);
	mul();
	push_byte(0x1);
	add();
	push_byte(0x12);
	push_byte(0x0);
	push_byte(0x12);
	push_byte(0x11);
	push_byte(0x1);
	shl();
	push_byte(0x1);
	usr1(0x20);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L00fdb:
	load_base();
	push_word(0x108);
	add();
	store_base();
	push_base_offset(0x108);
	move_arg(0x2);
	push_base_offset(0x100);
	usr1(0x27);
	push_base_offset(0x104);
	move_arg(0x2);
	usr1(0x21);
	push_base_offset(0x104);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L01011);
	jc(0x1);
	push_base_offset(0x100);
	cmd_68();
	push_offset(L01011);
	jc(0x1);
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x100);
	cmd_6a();

L01011:
	push_word(0x458);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_word(0x108);
	sub();
	store_base();
	ret();

L0101f:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_word(0x96);
	push_offset(L014f6);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	sys1(0x4);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x7d0);
	add();
	move(0x2);
	push_word(0xe10);
	sys1(0x18);

L01076:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L010b4);
	jc(0x0);
	push_word(0xe10);
	sys1(0x1a);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_dword(-0x80000000);
	not();
	and();
	push_offset(L010b4);
	jc(0x0);
	sys1(0x4);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L01076);
	jc(0x0);

L010b4:
	push_word(0xe10);
	sys1(0x19);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x100);
	push_base_offset(0x8);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x320);
	add();
	store_base();
	push_base_offset(0x318);
	move_arg(0x2);
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x320);
	move_arg(0x2);
	push_base_offset(0x314);
	push_byte(0x0);
	move(0x2);
	push_string("data03xxx.arc");
	push_base_offset(0x31c);
	load(0x2);
	sys1(0x34);
	push_offset(L01161);
	jc(0x0);
	push_byte(0x0);
	push_offset(L0117e);
	jc(0x1);
	push_base_offset(0x318);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0112f);
	jc(0x1);
	push_base_offset(0x310);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x318);
	load(0x2);
	call();
	push_offset(L01161);
	jc(0x0);
	push_offset(L0117e);
	jmp();

L0112f:
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x310);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x314);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x314);
	load(0x2);
	push_offset(L01161);
	jc(0x0);
	push_offset(L0117e);
	jmp();

L01161:
	push_base_offset(0x320);
	load(0x2);
	push_string("data03xxx.arc");
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x10);
	shl();
	snd1(0x21);
	push_base_offset(0x314);
	push_byte(0x1);
	move(0x2);

L0117e:
	push_base_offset(0x314);
	load(0x2);
	load_base();
	push_word(0x320);
	sub();
	store_base();
	ret();

L0118a:
	load_base();
	push_word(0x330);
	add();
	store_base();
	push_base_offset(0x324);
	move_arg(0x2);
	push_base_offset(0x328);
	move_arg(0x2);
	push_base_offset(0x32c);
	move_arg(0x2);
	push_base_offset(0x330);
	move_arg(0x2);
	push_base_offset(0x320);
	push_byte(0x0);
	move(0x2);
	push_string("data04xxx.arc");
	push_base_offset(0x32c);
	load(0x2);
	sys1(0x34);
	push_offset(L01219);
	jc(0x0);
	push_byte(0x0);
	push_offset(L012ae);
	jc(0x1);
	push_base_offset(0x328);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L011e7);
	jc(0x1);
	push_base_offset(0x31c);
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x328);
	load(0x2);
	call();
	push_offset(L01219);
	jc(0x0);
	push_offset(L012ae);
	jmp();

L011e7:
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x31c);
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x10);
	load(0x2);
	call();
	push_base_offset(0x320);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x320);
	load(0x2);
	push_offset(L01219);
	jc(0x0);
	push_offset(L012ae);
	jmp();

L01219:
	push_base_offset(0x330);
	load(0x2);
	push_string("data04xxx.arc");
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x10);
	shl();
	snd1(0x21);
	push_base_offset(0xc);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x324);
	load(0x2);
	push_offset(L01252);
	jc(0x1);
	push_base_offset(0x32c);
	load(0x2);
	push_offset(L02046);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L01252:
	push_base_offset(0x8);
	push_byte(0x20);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L01f12);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x330);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	snd1(0x9);
	push_base_offset(0x330);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x330);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x4a4);
	load(0x2);
	ternary();
	push_word(0x4a4);
	move_arg(0x2);
	push_base_offset(0x320);
	push_byte(0x1);
	move(0x2);

L012ae:
	push_base_offset(0x320);
	load(0x2);
	load_base();
	push_word(0x330);
	sub();
	store_base();
	ret();

L012ba:
	load_base();
	push_word(0x1ac);
	add();
	store_base();
	push_base_offset(0x1ac);
	move_arg(0x2);
	push_base_offset(0x1a8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c);
	push_string("me");
	push_string("an");
	push_string("ku");
	push_string("hi");
	push_string("ak");
	push_string("");
	cmd_0c(0x2, 0x6);
	push_base_offset(0x1a0);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xb);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x9);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xa);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xd);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x11);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x12);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xc);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xe);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x10);
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0xa);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0xb);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0xc);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0xd);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0xe);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0xf);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x10);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_byte(0x11);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1a0);
	push_base_offset(0x1ac);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L014e6);
	jc(0x0);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L014e6);
	jc(0x0);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x6);
	eq();
	push_offset(L01433);
	jc(0x1);
	push_byte(0x5);
	sys1(0x2);
	push_base_offset(0x1a4);
	move_arg(0x2);
	push_offset(L0146e);
	jmp();

L01433:
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x1);
	geq();
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x1);
	push_byte(0x5);
	add();
	lt();
	bool_and();
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x1);
	sub();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x1a4);
	move_arg(0x2);
	push_base_offset(0x1a4);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L014e6);
	jc(0x0);

L0146e:
	push_byte(0x0);
	push_offset(L01482);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);

L01482:
	push_base_offset(0x1a0);
	push_base_offset(0x1ac);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x1c);
	push_base_offset(0x1a4);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_option_voice%02d");
	cmd_6f();
	push_word(0x4a0);
	push_word(0x4a0);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	mod();
	move(0x2);
	push_byte(0x32);
	push_byte(0x0);
	add();
	push_word(0x4a0);
	load(0x2);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L0118a);
	call();
	push_base_offset(0x1a8);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L014dc);
	jc(0x1);
	sys1(0x41);

L014dc:
	push_base_offset(0x1a8);
	load(0x2);
	push_offset(L014ea);
	jc(0x0);

L014e6:
	push_offset(L014ea);
	jmp();

L014ea:
	push_base_offset(0x1a8);
	load(0x2);
	load_base();
	push_word(0x1ac);
	sub();
	store_base();
	ret();

L014f6:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L0151a);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L01536);
	jmp();

L0151a:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L01536);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L01536:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01546:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L0189c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L0189c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L0189c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L0189c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L016f5);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L01668);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L016c6);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L01697);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L01724);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L01753);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L01782);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L017b1);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L017e0);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L0180f);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L0183e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L0186d);
	jc(0x0);
	push_offset(L0190c);
	jmp();
	push_offset(L0189c);
	jmp();

L01668:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L01697:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L016c6:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L016f5:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L01724:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L01753:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L01782:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L017b1:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L017e0:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L0180f:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L0183e:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L0186d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L0189c);
	jmp();

L0189c:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L018d7);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L018d7);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L018d7:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L0190c:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01917:
	load_base();
	push_word(0xd0);
	add();
	store_base();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xcc);
	push_word(0x91c);
	load(0x2);
	move(0x2);
	push_word(0x91c);
	push_base_offset(0xd0);
	load(0x2);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x20);
	push_word(0xb6);
	add();
	move(0x2);
	push_base_offset(0x3c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x38);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x30);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc4);
	push_byte(0x0);
	move(0x2);

L01972:
	push_base_offset(0x3c);
	push_base_offset(0x3c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0xd);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x38);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x11);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x34);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x26);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x30);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x28);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x21);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x22);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0xc4);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0xc);
	lt();
	push_offset(L01972);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01a7e);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L01acc);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L01b3c);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L01b86);
	jc(0x0);
	push_offset(L01d26);
	jmp();

L01a7e:
	push_base_offset(0xc0);
	push_byte(0xe);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0xf);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01bd0);
	jmp();

L01acc:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1);
	ternary();
	push_base_offset(0xc8);
	move_arg(0x2);
	push_base_offset(0x80);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x3);
	push_base_offset(0xd0);
	load(0x2);
	push_offset(L01d32);
	call();
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01bd0);
	jmp();

L01b3c:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01bd0);
	jmp();

L01b86:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01bd0);
	jmp();

L01bd0:
	push_base_offset(0x24);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x200);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_offset(L01c0b);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x26);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01c0b:
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L01c2e);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x21);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01c2e:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_word(0x1000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_offset(L01c6a);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01c6a:
	push_base_offset(0x28);
	load(0x2);
	push_offset(L01c8d);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x22);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01c8d:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_word(0x2000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x0);
	neq();
	push_offset(L01ce1);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x0);
	push_word(0xff);
	and();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01ce1:
	push_base_offset(0x38);
	load(0x2);
	push_offset(L01d04);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x11);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01d04:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_dword(-0x80000000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x24);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x1);
	push_base_offset(0x24);
	sys1(0x62);

L01d26:
	push_base_offset(0xcc);
	load(0x2);
	load_base();
	push_word(0xd0);
	sub();
	store_base();
	ret();

L01d32:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x24);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xe);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xf);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x38);
	load(0x2);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);

L01d85:
	push_byte(0x20);
	push_word(0xc6);
	add();
	push_base_offset(0x28);
	load(0x2);
	add();
	load(0x0);
	push_base_offset(0x34);
	load(0x2);
	neq();
	push_offset(L01dd0);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x24);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L01dd0:
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x3);
	lt();
	push_offset(L01d85);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	load(0x2);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();

L01dfe:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x32);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x1);
	sar();
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x38);
	load(0x2);
	push_word(0x80);
	mul();
	push_byte(0x65);
	push_byte(0x1);
	sub();
	div();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x22);
	add();
	load(0x1);
	push_offset(L01dfe);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x32);
	add();
	load(0x1);
	push_offset(L01dfe);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0x8e);
	add();
	load(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0x90);
	add();
	load(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x80);
	push_base_offset(0xc);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_word(0x80);
	div();
	push_base_offset(0x4);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	ternary();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02235);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01f12);
	call();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L01f12:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x22);
	add();
	load(0x1);
	push_offset(L01dfe);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x1);
	push_offset(L01dfe);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x8e);
	add();
	load(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x94);
	add();
	load(0x1);
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x80);
	push_base_offset(0x10);
	load(0x2);
	sub();
	sub();
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L02028);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2);
	mul();
	add();
	load(0x1);
	push_offset(L01dfe);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L02003);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_word(0x80);
	div();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);

L02003:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x34);
	add();
	push_base_offset(0x1c);
	load(0x2);
	add();
	load(0x0);
	move(0x2);
	push_offset(L0203b);
	jmp();

L02028:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x1);
	move(0x2);

L0203b:
	push_base_offset(0x18);
	load(0x2);
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L02046:
	load_base();
	push_word(0x1a0);
	add();
	store_base();
	push_base_offset(0x1a0);
	move_arg(0x2);
	push_base_offset(0x180);
	push_string("AK");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x178);
	push_string("SA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x170);
	push_string("RE");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x168);
	push_string("KA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x160);
	push_string("MA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x158);
	push_string("KZ");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x150);
	push_string("AR");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x148);
	push_string("SY");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x140);
	push_string("HI");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x138);
	push_string("BE");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x130);
	push_string("KK");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x128);
	push_string("W");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x120);
	push_string("M");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x118);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x110);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x108);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x100);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xf8);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xf0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe8);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xd8);
	push_byte(0x0);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x180);
	push_base_offset(0x178);
	push_base_offset(0x170);
	push_base_offset(0x168);
	push_base_offset(0x160);
	push_base_offset(0x158);
	push_base_offset(0x150);
	push_base_offset(0x148);
	push_base_offset(0x140);
	push_base_offset(0x138);
	cmd_0c(0x2, 0xa);
	push_base_offset(0xd8);
	push_byte(0xa);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x130);
	push_base_offset(0x128);
	push_base_offset(0x120);
	push_base_offset(0x118);
	push_base_offset(0x110);
	push_base_offset(0x108);
	push_base_offset(0x100);
	push_base_offset(0xf8);
	push_base_offset(0xf0);
	push_base_offset(0xe8);
	cmd_0c(0x2, 0xa);
	push_base_offset(0xd8);
	push_byte(0x14);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0xe0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x84);
	push_base_offset(0x1a0);
	load(0x2);
	cmd_6a();
	push_base_offset(0x84);
	cmd_6d();
	push_base_offset(0x194);
	push_byte(0x0);
	move(0x2);

L02197:
	push_base_offset(0x4);
	push_base_offset(0xd8);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);

L021aa:
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02204);
	jc(0x1);
	push_base_offset(0x190);
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	cmd_6a();
	push_base_offset(0x190);
	cmd_6d();
	push_base_offset(0x190);
	cmd_68();
	push_base_offset(0x198);
	move_arg(0x2);
	push_base_offset(0x84);
	push_base_offset(0x190);
	push_base_offset(0x198);
	load(0x2);
	memcmp();
	push_offset(L021f6);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x2);
	shl();
	add();
	move(0x2);
	push_offset(L021aa);
	jmp();

L021f6:
	push_base_offset(0x19c);
	push_base_offset(0x194);
	load(0x2);
	move(0x2);
	push_offset(L02229);
	jmp();

L02204:
	push_base_offset(0x194);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0xd);
	lt();
	push_offset(L02197);
	jc(0x0);
	push_base_offset(0x19c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L02229:
	push_base_offset(0x19c);
	load(0x2);
	load_base();
	push_word(0x1a0);
	sub();
	store_base();
	ret();

L02235:
	load_base();
	push_byte(0x5c);
	add();
	store_base();
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x5c);
	load(0x2);
	push_offset(L02046);
	call();
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x58);
	load(0x2);
	push_byte(0xd);
	lt();
	bool_and();
	push_offset(L022a8);
	jc(0x1);
	push_base_offset(0x54);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x2);
	push_byte(0x3);
	push_byte(0x4);
	push_byte(0x5);
	push_byte(0x6);
	push_byte(0x7);
	push_byte(0x8);
	push_byte(0x9);
	cmd_0c(0x2, 0xa);
	push_base_offset(0x54);
	push_byte(0xa);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xa);
	push_byte(0xb);
	push_byte(0xc);
	cmd_0c(0x2, 0x3);
	push_base_offset(0x58);
	push_base_offset(0x54);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);

L022a8:
	push_base_offset(0x58);
	load(0x2);
	load_base();
	push_byte(0x5c);
	sub();
	store_base();
	ret();
