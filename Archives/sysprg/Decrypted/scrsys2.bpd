	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_dword(0x42af8);
	push_word(0x400);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0013d);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x401);
	push_byte(0x2);
	shl();
	add();
	push_offset(L001d2);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x402);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0026a);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x403);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00457);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x404);
	push_byte(0x2);
	shl();
	add();
	push_offset(L005a2);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x405);
	push_byte(0x2);
	shl();
	add();
	push_offset(L006e7);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x408);
	push_byte(0x2);
	shl();
	add();
	push_offset(L007e5);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x409);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0087a);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x40a);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00912);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x40b);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00a96);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x410);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00c1b);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x411);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00c5a);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x430);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00cce);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x431);
	push_byte(0x2);
	shl();
	add();
	push_offset(L00e77);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x432);
	push_byte(0x2);
	shl();
	add();
	push_offset(L01020);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x440);
	push_byte(0x2);
	shl();
	add();
	push_offset(L010c9);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x441);
	push_byte(0x2);
	shl();
	add();
	push_offset(L0122a);
	move(0x2);
	push_dword(0x42af8);
	push_word(0x442);
	push_byte(0x2);
	shl();
	add();
	push_offset(L012bd);
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0013d:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L001ca);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x12);
	push_byte(0x1);
	add();
	push_string("サムネイル数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L001ca);
	jc(0x1);
	push_byte(0x0);
	push_offset(L001ca);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L001b0);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L001ca);
	jmp();

L001b0:
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L001ca:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L001d2:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00262);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x5);
	push_byte(0x1);
	add();
	push_string("サムネイル数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00262);
	jc(0x1);
	push_byte(0x0);
	push_offset(L00262);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00245);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L00262);
	jmp();

L00245:
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x5);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L00262:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0026a:
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L0044f);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L002dc);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L0044f);
	jmp();

L002dc:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0044f);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	push_string("サムネイル番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0044f);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_string("サムネイル名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L0044f);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	push_word(0x80);
	push_byte(0x1);
	add();
	push_string("コンテンツ数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0044f);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_string("コンテンツ名のポインタ配列");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L0044f);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_string("コンテンツの有効性");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L0044f);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x15d5e8);
	load(0x2);
	push_word(0x80);
	add();
	push_byte(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x12);
	mul();
	add();
	push_base_offset(0x1c);
	load(0x2);
	add();
	push_word(0x2850);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);

L0039e:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L003f7);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x43ff4);
	load(0x2);
	call();
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x24);
	load(0x2);
	cmd_6a();
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L003f7:
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	lt();
	push_offset(L0039e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	gt();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x18);
	load(0x2);
	cmd_6a();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L0044f:
	push_byte(0x0);
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();

L00457:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L0059a);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L004bc);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L0059a);
	jmp();

L004bc:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0059a);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x5);
	push_string("サムネイル番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0059a);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_string("サムネイル名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L0059a);
	jc(0x1);
	push_base_offset(0xc);
	push_dword(0x15d5e8);
	load(0x2);
	push_word(0x80);
	add();
	push_word(0x100);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x5);
	mul();
	add();
	push_base_offset(0x1c);
	load(0x2);
	add();
	push_word(0x2850);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L0055f);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x14);
	load(0x2);
	cmd_6a();
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L0055f:
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x18);
	load(0x2);
	cmd_6a();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L0059a:
	push_byte(0x0);
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L005a2:
	load_base();
	push_byte(0x1c);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L006df);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00607);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L006df);
	jmp();

L00607:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	push_string("音楽番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L006df);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_string("イントロセクション");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L006df);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x15d5e8);
	load(0x2);
	push_word(0x80);
	add();
	push_word(0x140);
	push_base_offset(0x1c);
	load(0x2);
	add();
	push_word(0x2850);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x18);
	load(0x2);
	cmd_6a();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x14);
	load(0x2);
	push_string("");
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4c);
	add();
	push_byte(0x1);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0xc);
	load(0x2);
	push_string("");
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4c);
	add();
	push_byte(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x2);
	move(0x2);

L006df:
	push_byte(0x0);
	load_base();
	push_byte(0x1c);
	sub();
	store_base();
	ret();

L006e7:
	load_base();
	push_word(0x324);
	add();
	store_base();
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ff0);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_string("有効性の格納先");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L007dc);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	push_word(0x80);
	push_byte(0x1);
	add();
	push_string("検査対象コンテンツ数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L007dc);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_string("コンテンツ名のポインタ配列");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L007dc);
	jc(0x1);
	push_base_offset(0x320);
	push_byte(0x0);
	move(0x2);

L00762:
	push_base_offset(0x324);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x320);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_dword(0x43ff4);
	load(0x2);
	call();
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L007aa);
	jc(0x1);
	push_base_offset(0x318);
	push_base_offset(0x31c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x318);
	cmd_6d();
	push_base_offset(0x318);
	sys1(0x85);
	push_base_offset(0x324);
	move_arg(0x2);

L007aa:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x320);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x324);
	load(0x2);
	move(0x2);
	push_base_offset(0x320);
	push_base_offset(0x320);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x320);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	lt();
	push_offset(L00762);
	jc(0x0);

L007dc:
	push_byte(0x0);
	load_base();
	push_word(0x324);
	sub();
	store_base();
	ret();

L007e5:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00872);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x15);
	push_byte(0x1);
	add();
	push_string("サムネイル数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00872);
	jc(0x1);
	push_byte(0x0);
	push_offset(L00872);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00858);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L00872);
	jmp();

L00858:
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L00872:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0087a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0090a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x15);
	push_byte(0x1);
	add();
	push_string("サムネイル数");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L0090a);
	jc(0x1);
	push_byte(0x0);
	push_offset(L0090a);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L008ed);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L0090a);
	jmp();

L008ed:
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x6);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L0090a:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00912:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x24);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L00a8e);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00977);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L00a8e);
	jmp();

L00977:
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00a8e);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_byte(0x15);
	push_string("サムネイル番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00a8e);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_string("");
	push_base_offset(0x1c);
	load(0x2);
	ternary();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	eq();
	push_string("");
	push_base_offset(0x18);
	load(0x2);
	ternary();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x10);
	push_dword(0x15d5e8);
	load(0x2);
	push_word(0x80);
	add();
	push_byte(0x0);
	push_byte(0x15);
	push_base_offset(0x24);
	load(0x2);
	mul();
	add();
	push_base_offset(0x20);
	load(0x2);
	add();
	push_word(0x2850);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_offset(L00a30);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x18);
	load(0x2);
	cmd_6a();
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00a30:
	push_base_offset(0x1c);
	load(0x2);
	cmd_68();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x1);
	push_dword(-0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x1c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);

L00a8e:
	push_byte(0x0);
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L00a96:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x24);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L00c13);
	jc(0x0);
	push_dword(0x15d5e8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00afb);
	jc(0x0);
	push_string("ギャラリー用ワークが確保されていません");
	usr1(0x80);
	push_offset(L00c13);
	jmp();

L00afb:
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	push_string("カテゴリ番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00c13);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_byte(0x15);
	push_string("サムネイル番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00c13);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_string("");
	push_base_offset(0x1c);
	load(0x2);
	ternary();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	eq();
	push_string("");
	push_base_offset(0x18);
	load(0x2);
	ternary();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x10);
	push_dword(0x15d5e8);
	load(0x2);
	push_word(0x80);
	add();
	push_word(0x80);
	push_byte(0x15);
	push_base_offset(0x24);
	load(0x2);
	mul();
	add();
	push_base_offset(0x20);
	load(0x2);
	add();
	push_word(0x2850);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_offset(L00bb5);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x18);
	load(0x2);
	cmd_6a();
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00bb5:
	push_base_offset(0x1c);
	load(0x2);
	cmd_68();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x1);
	push_dword(-0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x1c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);

L00c13:
	push_byte(0x0);
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L00c1b:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	push_string("音楽番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00c52);
	jc(0x1);
	push_dword(0x15d5ec);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L00c52:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00c5a:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_string("音楽ファイル名");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L00c8c);
	jc(0x1);
	push_dword(0x15d5f0);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();

L00c8c:
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00cbf);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	cmd_6a();
	push_offset(L00cc8);
	jmp();

L00cbf:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	move(0x0);

L00cc8:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00cce:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("スロットの通常時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00e6f);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("スロットの候補時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00e6f);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("スロットのアクティブ時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00e6f);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("プレビューの通常時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00e6f);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("ページコメントの通常時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L00e6f);
	jc(0x1);
	push_word(0x424);
	load(0x2);
	push_offset(L00e6f);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_word(0x578);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0x10);
	load(0x2);
	ternary();
	push_word(0x57c);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_word(0x580);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_word(0x584);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	push_byte(0x8);
	shl();
	or();
	push_byte(0x0);
	or();
	push_base_offset(0x4);
	load(0x2);
	ternary();
	push_word(0x588);
	move_arg(0x2);

L00e6f:
	push_byte(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L00e77:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x14);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("スロットの通常時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01018);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("スロットの候補時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01018);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("スロットのアクティブ時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01018);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("プレビューの通常時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01018);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("ページコメントの通常時のテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01018);
	jc(0x1);
	push_word(0x424);
	load(0x2);
	push_offset(L01018);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_word(0x58c);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0x10);
	load(0x2);
	ternary();
	push_word(0x590);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_word(0x594);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	lt();
	push_word(0xff);
	push_byte(0x10);
	shl();
	push_word(0xff);
	push_byte(0x8);
	shl();
	or();
	push_word(0xff);
	or();
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_word(0x598);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	push_byte(0x8);
	shl();
	or();
	push_byte(0x0);
	or();
	push_base_offset(0x4);
	load(0x2);
	ternary();
	push_word(0x59c);
	move_arg(0x2);

L01018:
	push_byte(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L01020:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x10);
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0xf);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	push_word(0xc8);
	push_byte(0x1);
	add();
	push_string("IDのフォントサイズ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L010c1);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	push_word(0xc8);
	push_byte(0x1);
	add();
	push_string("本文のフォントサイズ");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L010c1);
	jc(0x1);
	push_word(0x424);
	load(0x2);
	push_offset(L010c1);
	jc(0x1);
	push_word(0x5a0);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_word(0x5a4);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L010c1:
	push_byte(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L010c9:
	load_base();
	push_byte(0x28);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x28);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x24);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x44000);
	load(0x2);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x0);
	push_word(0x12c);
	push_string("登録番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01222);
	jc(0x1);
	push_base_offset(0x24);
	load(0x2);
	push_string("No.");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L01222);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_string("ID");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L01222);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_string("本文");
	push_dword(0x44008);
	load(0x2);
	call();
	push_offset(L01222);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_dword(0x1000000);
	push_string("IDのテキストカラー");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01222);
	jc(0x1);
	push_base_offset(0x14);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_byte(0x0);
	push_base_offset(0x24);
	load(0x2);
	sys1(0xdc);
	push_base_offset(0x14);
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x20);
	load(0x2);
	sys1(0xdc);
	push_base_offset(0x14);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1c);
	load(0x2);
	sys1(0xdc);
	push_base_offset(0x14);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_base_offset(0x14);
	push_byte(0x10);
	add();
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_base_offset(0x14);
	push_byte(0x14);
	memcpy();
	push_base_offset(0x28);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e00);
	add();
	load(0x2);
	geq();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	push_dword(0x9fab8);
	push_dword(0x25e00);
	add();
	load(0x2);
	ternary();
	push_dword(0x9fab8);
	push_dword(0x25e00);
	add();
	move_arg(0x2);

L01222:
	push_byte(0x0);
	load_base();
	push_byte(0x28);
	sub();
	store_base();
	ret();

L0122a:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x0);
	push_offset(L0124f);
	jc(0x0);
	push_word(0x4e4);
	load(0x2);
	push_offset(L0124f);
	jc(0x0);
	push_dword(0x42aa8);
	load(0x2);
	push_byte(0x0);
	grp1(0x31);
	push_byte(0x0);
	grp1(0x0);

L0124f:
	push_dword(0x9fa50);
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e00);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e08);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e0c);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_word(0x12c);
	push_byte(0x14);
	mul();
	memclr();
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L012bd:
	load_base();
	push_word(0x110);
	add();
	store_base();
	push_dword(0x43ffc);
	load(0x2);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_word(0x4e4);
	load(0x2);
	push_offset(L01499);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	push_word(0x12c);
	push_string("登録番号");
	push_dword(0x44004);
	load(0x2);
	call();
	push_offset(L01499);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01499);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	lt();
	push_offset(L01499);
	jc(0x0);
	push_byte(0x0);
	push_offset(L01388);
	jc(0x0);
	push_base_offset(0x110);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	move(0x2);

L0133a:
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0136b);
	jc(0x0);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0x10c);
	push_string("登録番号 [ %d ] にBBS情報が登録されていません");
	cmd_6f();
	push_base_offset(0x10c);
	push_offset(L044ad);
	call();

L0136b:
	push_base_offset(0x110);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	leq();
	push_offset(L0133a);
	jc(0x0);

L01388:
	push_byte(0x0);
	push_offset(L01459);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("bbs._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x24690);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x42aa8);
	load(0x2);
	push_byte(0x20);
	push_word(0x12e);
	add();
	load(0x1);
	push_byte(0x0);
	neq();
	grp1(0x31);
	push_dword(0x9fab8);
	push_dword(0x25e0c);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fa50);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_byte(0x0);
	grp1(0x0);
	push_dword(0x43f0c);
	load(0x2);
	call();
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	push_offset(L01460);
	jc(0x1);
	push_byte(0x20);
	push_word(0x132);
	add();
	load(0x1);
	push_offset(L01426);
	jc(0x1);
	push_byte(0x0);
	push_byte(0x17);
	add();
	push_offset(L014a2);
	call();

L01426:
	push_byte(0x20);
	push_word(0x130);
	add();
	load(0x1);
	push_offset(L01459);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x1);
	push_byte(0x0);
	push_offset(L01ae8);
	call();
	push_byte(0x1);
	push_offset(L01b80);
	call();
	push_byte(0x2);
	push_byte(0x1);
	push_dword(-0x3);
	push_offset(L01ae8);
	call();
	push_byte(0x0);
	push_offset(L01b80);
	call();

L01459:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01460:
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e08);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e10);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L01499:
	push_byte(0x0);
	load_base();
	push_word(0x110);
	sub();
	store_base();
	ret();

L014a2:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L017f8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L017f8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L017f8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L017f8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L01651);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L015c4);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L01622);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L015f3);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L01680);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L016af);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L016de);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L0170d);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L0173c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L0176b);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L0179a);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L017c9);
	jc(0x0);
	push_offset(L01868);
	jmp();
	push_offset(L017f8);
	jmp();

L015c4:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L015f3:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L01622:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L01651:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L01680:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L016af:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L016de:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L0170d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L0173c:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L0176b:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L0179a:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L017c9:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L017f8);
	jmp();

L017f8:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L01833);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L01833);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L01833:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L01868:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x448);
	add();
	store_base();
	push_base_offset(0x440);
	move_arg(0x2);
	push_base_offset(0x444);
	move_arg(0x2);
	push_base_offset(0x448);
	move_arg(0x2);
	push_base_offset(0x43c);
	push_byte(0x0);
	move(0x2);
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x438);
	move_arg(0x2);
	push_base_offset(0x424);
	push_word(0x400);
	memclr();
	push_base_offset(0x444);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L018e7);
	jc(0x0);
	push_word(0xb40);
	load(0x2);
	push_offset(L018d4);
	jc(0x0);
	push_base_offset(0x24);
	push_word(0xeba);
	grp1(0x16);
	push_offset(L018d4);
	jc(0x1);
	push_base_offset(0x424);
	push_dword(0x11156c);
	cmd_6a();
	push_offset(L018f0);
	jmp();

L018d4:
	push_base_offset(0x424);
	push_dword(0x9fab8);
	push_dword(0x230ac);
	add();
	cmd_6a();
	push_offset(L018f0);
	jmp();

L018e7:
	push_base_offset(0x424);
	push_base_offset(0x444);
	load(0x2);
	cmd_6a();

L018f0:
	push_base_offset(0x424);
	cmd_68();
	push_base_offset(0x434);
	move_arg(0x2);
	push_base_offset(0x434);
	load(0x2);
	push_byte(0x50);
	lt();
	push_offset(L01965);
	jc(0x0);
	push_base_offset(0x430);
	push_byte(0x0);
	move(0x2);

L0190d:
	push_base_offset(0x424);
	push_base_offset(0x430);
	load(0x2);
	add();
	cmd_6c();
	push_base_offset(0x428);
	move_arg(0x2);
	push_base_offset(0x42c);
	move_arg(0x2);
	push_base_offset(0x434);
	move_arg(0x2);
	push_base_offset(0x42c);
	load(0x2);
	push_byte(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x434);
	move_arg(0x2);
	push_base_offset(0x430);
	push_base_offset(0x430);
	load(0x2);
	push_base_offset(0x434);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x430);
	load(0x2);
	push_byte(0x50);
	lt();
	push_offset(L0190d);
	jc(0x0);
	push_base_offset(0x424);
	push_base_offset(0x430);
	load(0x2);
	add();
	push_base_offset(0x434);
	load(0x2);
	sub();
	push_byte(0x0);
	move(0x0);

L01965:
	push_base_offset(0x444);
	push_base_offset(0x424);
	move(0x2);
	push_base_offset(0x440);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01987);
	jc(0x0);
	push_base_offset(0x440);
	push_dword(0x9fab8);
	push_byte(0x60);
	add();
	move(0x2);

L01987:
	push_byte(0x14);
	push_byte(0x14);
	shl();
	sys1(0x20);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x438);
	load(0x2);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x448);
	load(0x2);
	push_base_offset(0x444);
	load(0x2);
	push_base_offset(0x440);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x438);
	load(0x2);
	call();
	push_base_offset(0x43c);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	sys1(0x21);
	sys1(0x41);
	push_base_offset(0x43c);
	load(0x2);
	load_base();
	push_word(0x448);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x62c);
	add();
	store_base();
	push_base_offset(0x628);
	move_arg(0x2);
	push_base_offset(0x62c);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x620);
	move_arg(0x2);
	push_base_offset(0x61c);
	push_base_offset(0x62c);
	load(0x2);
	push_byte(0x6);
	push_base_offset(0x620);
	load(0x2);
	call();
	push_base_offset(0x310);
	push_base_offset(0x628);
	load(0x2);
	push_byte(0x6);
	push_base_offset(0x620);
	load(0x2);
	call();
	push_byte(0x0);
	push_base_offset(0x310);
	sys1(0x35);
	push_base_offset(0x624);
	move_arg(0x2);
	push_base_offset(0x624);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01a7a);
	jc(0x1);
	push_base_offset(0x624);
	load(0x2);
	sys1(0x20);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x310);
	sys1(0x30);
	push_base_offset(0x624);
	move_arg(0x2);
	push_base_offset(0x61c);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x624);
	load(0x2);
	sys1(0x32);
	push_byte(0x0);
	push_base_offset(0x310);
	sys1(0x33);
	push_base_offset(0x4);
	load(0x2);
	sys1(0x21);

L01a7a:
	sys1(0x41);
	load_base();
	push_word(0x62c);
	sub();
	store_base();
	ret();

L01a83:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0xc);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01ae2);
	jc(0x1);
	push_base_offset(0x10);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	cmd_0c(0x2, 0x4);
	push_dword(0x42768);
	push_byte(0xc);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x10);
	sys1(0x4a);

L01ae2:
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L01ae8:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01b03:
	push_base_offset(0x4);
	push_word(0x930);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_offset(L01b60);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_offset(L01b7a);
	jmp();

L01b60:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L01b03);
	jc(0x0);

L01b7a:
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L01b80:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01b91:
	push_base_offset(0x4);
	push_word(0x930);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_offset(L01be0);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L01a83);
	call();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	memclr();

L01be0:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L01b91);
	jc(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01c00:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9b8);
	load(0x2);
	push_offset(L01c3f);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_dword(-0x3);
	push_offset(L01ae8);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01b80);
	call();
	push_word(0x9b8);
	push_byte(0x1);
	move(0x2);

L01c3f:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01c45:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9bc);
	load(0x2);
	push_offset(L01c84);
	jc(0x0);
	push_byte(0x1);
	push_byte(0x3);
	push_dword(-0x3);
	push_offset(L01ae8);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01b80);
	call();
	push_word(0x9bc);
	push_byte(0x1);
	move(0x2);

L01c84:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01c8a:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9b8);
	load(0x2);
	push_offset(L01ccc);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x2);
	push_dword(-0x3);
	push_offset(L01ae8);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01b80);
	call();
	push_word(0x9b8);
	push_byte(0x0);
	move(0x2);

L01ccc:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01cd2:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9bc);
	load(0x2);
	push_offset(L01d14);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x3);
	push_dword(-0x3);
	push_offset(L01ae8);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01b80);
	call();
	push_word(0x9bc);
	push_byte(0x0);
	move(0x2);

L01d14:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01d36);
	jc(0x1);
	push_offset(L01c00);
	call();
	push_offset(L01d3a);
	jmp();

L01d36:
	push_offset(L01c8a);
	call();

L01d3a:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01d5c);
	jc(0x1);
	push_offset(L01c45);
	call();
	push_offset(L01d60);
	jmp();

L01d5c:
	push_offset(L01cd2);
	call();

L01d60:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01d77:
	push_base_offset(0x4);
	push_word(0x92c);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01dbf);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01dbf);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	grp2(0x31);

L01dbf:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L01d77);
	jc(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01ddf:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);

L01dfd:
	push_word(0x504);
	load(0x2);
	push_offset(L01e28);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L01e28);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01e28);
	jc(0x1);
	sys1(0x5f);
	push_offset(L01dfd);
	jmp();

L01e28:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01e3d:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);

L01e60:
	push_word(0x504);
	load(0x2);
	push_offset(L01e9c);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L01e9c);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01e9c);
	jc(0x1);
	sys1(0x17);
	push_offset(L01e9c);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L01e9c);
	jc(0x0);
	sys1(0x5f);
	push_offset(L01e60);
	jmp();

L01e9c:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01eb6:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01f5a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L01f30);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	bool_or();
	push_offset(L01f30);
	jc(0x0);
	push_string("循環制御が行われているオブジェクトに対して待機要求が発行されました");
	cmd_79();
	push_offset(L01f5a);
	jmp();

L01f30:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L01f4c);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L01ddf);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01f5a);
	jmp();

L01f4c:
	push_base_offset(0x10);
	load(0x2);
	push_offset(L01e3d);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L01f5a:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L01f65:
	load_base();
	push_word(0x1f8);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0x1f4);
	move_arg(0x2);
	push_base_offset(0x1f8);
	move_arg(0x2);
	push_base_offset(0x1f8);
	load(0x2);
	push_offset(L0265f);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memclr();
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_base_offset(0x1f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x1c);
	add();
	push_base_offset(0x1ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x20);
	add();
	push_base_offset(0x1e8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x128);
	add();
	push_base_offset(0x1e4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x12c);
	add();
	push_base_offset(0x1e0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x130);
	add();
	push_base_offset(0x1dc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x134);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x138);
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02097);
	jc(0x1);
	push_base_offset(0x1c0);
	push_word(0x150);
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x70);
	memcpy();

L02097:
	push_dword(0x227a4);
	push_base_offset(0x1f8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1cc);
	load(0x2);
	push_offset(L020c7);
	jc(0x1);
	push_base_offset(0x1f8);
	load(0x2);
	push_byte(0x0);
	push_offset(L01eb6);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);

L020c7:
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1f8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L01f65);
	call();
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L01f65);
	call();
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1f0);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_base_offset(0x1e0);
	move_arg(0x2);
	push_base_offset(0x1e4);
	move_arg(0x2);
	push_base_offset(0x1e8);
	move_arg(0x2);
	push_base_offset(0x1ec);
	move_arg(0x2);
	push_base_offset(0x1f0);
	move_arg(0x2);
	push_base_offset(0x1f0);
	load(0x2);
	push_offset(L0265f);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x24);
	add();
	push_base_offset(0x1e8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x28);
	add();
	push_base_offset(0x1e4);
	load(0x2);
	push_base_offset(0x1e8);
	load(0x2);
	push_byte(0x10);
	mul();
	memcpy();
	push_base_offset(0x1c0);
	push_word(0x128);
	add();
	push_base_offset(0x1e0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x12c);
	add();
	push_base_offset(0x1dc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x130);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x134);
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x138);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_dword(0x227a4);
	push_base_offset(0x1f0);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c8);
	load(0x2);
	push_offset(L022fe);
	jc(0x1);
	push_base_offset(0x1f0);
	load(0x2);
	push_byte(0x0);
	push_offset(L01eb6);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);

L022fe:
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1f0);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x30);
	load(0x2);
	add();
	push_byte(0x3);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01f65);
	call();
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x2c);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x2c);
	load(0x2);
	add();
	push_byte(0x4);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L01f65);
	call();
	load_base();
	push_byte(0x2c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1c8);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1c8);
	load(0x2);
	add();
	push_offset(L02799);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x227a4);
	push_byte(0x0);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1c8);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1dc);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d8);
	move_arg(0x2);
	push_base_offset(0x1dc);
	move_arg(0x2);
	push_byte(0x0);
	push_base_offset(0x1dc);
	load(0x2);
	add();
	push_offset(L02799);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memclr();
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1d8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x13c);
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02578);
	jc(0x1);
	push_base_offset(0x1c0);
	push_word(0x150);
	add();
	push_base_offset(0x1c8);
	load(0x2);
	push_byte(0x70);
	memcpy();

L02578:
	push_dword(0x227a4);
	push_byte(0x0);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1dc);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1dc);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x1d4);
	add();
	store_base();
	push_base_offset(0x1c8);
	move_arg(0x2);
	push_base_offset(0x1cc);
	move_arg(0x2);
	push_base_offset(0x1d0);
	move_arg(0x2);
	push_base_offset(0x1d4);
	move_arg(0x2);
	push_base_offset(0x1d4);
	load(0x2);
	push_offset(L02799);
	call();
	push_base_offset(0x1c4);
	move_arg(0x2);
	push_base_offset(0x1c0);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0xc);
	add();
	push_byte(0x5);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1c0);
	push_byte(0x18);
	add();
	push_base_offset(0x1d0);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1cc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1c0);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1c8);
	load(0x2);
	move(0x2);
	push_dword(0x227a4);
	push_base_offset(0x1d4);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	push_base_offset(0x1c0);
	push_word(0x1c0);
	memcpy();
	push_base_offset(0x1c4);
	load(0x2);
	load_base();
	push_word(0x1d4);
	sub();
	store_base();
	ret();

L0265f:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x227a4);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02721);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x450);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_offset(L01eb6);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02721);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02721);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L02721);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	memclr();

L02721:
	push_base_offset(0x10);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L02738:
	push_base_offset(0x4);
	push_dword(0x227a4);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02779);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	geq();
	push_offset(L02779);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);

L02779:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x52);
	lt();
	push_offset(L02738);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L02799:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	push_dword(0x227a4);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0285b);
	jc(0x1);
	push_base_offset(0x8);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x450);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_offset(L01eb6);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L0285b);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0285b);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L0285b);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	memclr();

L0285b:
	push_base_offset(0x10);
	load(0x2);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L02877:
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L028d8);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	push_offset(L028d8);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1f7d4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_word(0x450);
	mul();
	add();
	push_word(0x450);
	memclr();
	push_offset(L028f2);
	jmp();

L028d8:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	lt();
	push_offset(L02877);
	jc(0x0);

L028f2:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0291c:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);

L0293a:
	push_word(0x504);
	load(0x2);
	push_offset(L02965);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L02965);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02965);
	jc(0x1);
	sys1(0x5f);
	push_offset(L0293a);
	jmp();

L02965:
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0297a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);

L0299d:
	push_word(0x504);
	load(0x2);
	push_offset(L029d9);
	jc(0x0);
	push_dword(0x4887c);
	load(0x2);
	push_offset(L029d9);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L029d9);
	jc(0x1);
	sys1(0x17);
	push_offset(L029d9);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L029d9);
	jc(0x0);
	sys1(0x5f);
	push_offset(L0299d);
	jmp();

L029d9:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	push_dword(0x4887c);
	load(0x2);
	bool_zero();
	bool_and();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02a1e);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0291c);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L02a2c);
	jmp();

L02a1e:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0297a);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L02a2c:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02a85);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0291c);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L02a85:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L02aa8:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L02aec);
	jc(0x1);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02aec);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);

L02aec:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L02aa8);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L02b0d:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L02b30);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L0291c);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L02b30:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L02b0d);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L02b61:
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02b90);
	jc(0x1);
	push_dword(0x2da64);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	move(0x2);

L02b90:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L02b61);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	push_dword(0x2da64);
	push_base_offset(0xc);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02bfe);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0291c);
	call();
	push_base_offset(0x8);
	move_arg(0x2);

L02bfe:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L02c09:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L02c75);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x40);
	lt();
	push_offset(L02c80);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x1a444);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a440);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L02c75:
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);
	push_offset(L02c8b);
	jmp();

L02c80:
	push_string("バストショット制御向けプリロード対象ビットマップ配列に空きがありません");
	cmd_79();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L02c8b:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x368);
	add();
	store_base();
	push_base_offset(0x2e4);
	move_arg(0x2);
	push_base_offset(0x2e8);
	move_arg(0x2);
	push_base_offset(0x2ec);
	move_arg(0x2);
	push_base_offset(0x2f0);
	move_arg(0x2);
	push_base_offset(0x2f4);
	move_arg(0x2);
	push_base_offset(0x2f8);
	move_arg(0x2);
	push_base_offset(0x2fc);
	move_arg(0x2);
	push_base_offset(0x300);
	move_arg(0x2);
	push_base_offset(0x304);
	move_arg(0x2);
	push_base_offset(0x308);
	move_arg(0x2);
	push_base_offset(0x30c);
	move_arg(0x2);
	push_base_offset(0x310);
	move_arg(0x2);
	push_base_offset(0x314);
	move_arg(0x2);
	push_base_offset(0x318);
	move_arg(0x2);
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x320);
	move_arg(0x2);
	push_base_offset(0x324);
	move_arg(0x2);
	push_base_offset(0x328);
	move_arg(0x2);
	push_base_offset(0x32c);
	move_arg(0x2);
	push_base_offset(0x330);
	move_arg(0x2);
	push_base_offset(0x334);
	move_arg(0x2);
	push_base_offset(0x338);
	move_arg(0x2);
	push_base_offset(0x33c);
	move_arg(0x2);
	push_base_offset(0x340);
	move_arg(0x2);
	push_base_offset(0x344);
	move_arg(0x2);
	push_base_offset(0x348);
	move_arg(0x2);
	push_base_offset(0x34c);
	move_arg(0x2);
	push_base_offset(0x350);
	move_arg(0x2);
	push_base_offset(0x354);
	move_arg(0x2);
	push_base_offset(0x358);
	move_arg(0x2);
	push_base_offset(0x35c);
	move_arg(0x2);
	push_base_offset(0x360);
	move_arg(0x2);
	push_base_offset(0x364);
	move_arg(0x2);
	push_base_offset(0x368);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L03783);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x1a434);
	add();
	load(0x2);
	push_offset(L03783);
	jc(0x0);
	push_base_offset(0x2e0);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	geq();
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x2f0);
	move_arg(0x2);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L02e05);
	jc(0x0);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x10);
	sub();
	lt();
	push_offset(L02def);
	jc(0x0);
	push_base_offset(0x2f8);
	load(0x2);
	push_word(0x80);
	push_byte(0x2);
	mul();
	lt();
	push_offset(L02dcf);
	jc(0x0);
	push_base_offset(0x2f8);
	push_word(0x732);
	push_word(0x100);
	sub();
	move(0x2);
	push_base_offset(0x2e0);
	push_byte(0x1);
	move(0x2);
	push_offset(L02e05);
	jmp();

L02dcf:
	push_base_offset(0x2f8);
	push_word(0x7b0);
	push_word(0x100);
	sub();
	push_base_offset(0x2f8);
	load(0x2);
	add();
	push_word(0x80);
	push_byte(0x2);
	mul();
	push_byte(0x10);
	sub();
	sub();
	move(0x2);
	push_offset(L02e05);
	jmp();

L02def:
	push_base_offset(0x2f8);
	push_word(0x500);
	push_word(0x100);
	sub();
	push_base_offset(0x2f8);
	load(0x2);
	add();
	push_word(0x80);
	sub();
	move(0x2);

L02e05:
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x368);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L02e2f);
	jc(0x0);
	push_string("バストショット制御コマンド情報配列に空きがありません");
	cmd_79();
	push_offset(L03783);
	jmp();

L02e2f:
	push_base_offset(0x124);
	push_dword(0x9fab8);
	push_dword(0xd0b4);
	add();
	push_base_offset(0x368);
	load(0x2);
	push_word(0x69c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L02e57:
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	lt();
	push_offset(L02eb3);
	jc(0x1);
	push_base_offset(0x1d4);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_word(0xb0);
	memcpy();
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L02ea2);
	jc(0x0);
	push_base_offset(0x120);
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	load(0x2);
	move(0x2);

L02ea2:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L02e57);
	jmp();

L02eb3:
	push_base_offset(0x1d4);
	push_word(0xb0);
	memclr();
	push_base_offset(0x1d4);
	push_byte(0x0);
	add();
	push_base_offset(0x364);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x4);
	add();
	push_base_offset(0x33c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x8);
	add();
	push_base_offset(0x338);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0xc);
	add();
	push_base_offset(0x334);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x10);
	add();
	push_base_offset(0x330);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x14);
	add();
	push_base_offset(0x32c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x18);
	add();
	push_base_offset(0x328);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x1c);
	add();
	push_base_offset(0x324);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x20);
	add();
	push_base_offset(0x320);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x24);
	add();
	push_base_offset(0x31c);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x28);
	add();
	push_base_offset(0x318);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x30);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x34);
	add();
	push_base_offset(0x314);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x38);
	add();
	push_base_offset(0x310);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x4c);
	add();
	push_base_offset(0x308);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x50);
	add();
	push_base_offset(0x304);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x54);
	add();
	push_base_offset(0x300);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x58);
	add();
	push_base_offset(0x2fc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x5c);
	add();
	push_base_offset(0x2f8);
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_byte(0x60);
	add();
	push_base_offset(0x2f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x30c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02fe0);
	jc(0x1);
	push_base_offset(0x1d4);
	push_byte(0x3c);
	add();
	push_base_offset(0x30c);
	load(0x2);
	push_byte(0x10);
	memcpy();

L02fe0:
	push_base_offset(0x360);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03038);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x360);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	move_arg(0x2);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L03046);
	jc(0x1);
	push_base_offset(0x2d4);
	load(0x0);
	push_byte(0x24);
	eq();
	push_offset(L03046);
	jc(0x0);
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	load(0x2);
	push_offset(L02c09);
	call();
	push_offset(L03783);
	jc(0x1);
	push_offset(L03046);
	jmp();

L03038:
	push_base_offset(0x1d4);
	push_byte(0x64);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03046:
	push_base_offset(0x35c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03091);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L03091);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x35c);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	move_arg(0x2);
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	load(0x2);
	push_offset(L02c09);
	call();
	push_offset(L03783);
	jc(0x1);
	push_offset(L0309f);
	jmp();

L03091:
	push_base_offset(0x1d4);
	push_byte(0x68);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L0309f:
	push_base_offset(0x1d4);
	push_byte(0x6c);
	add();
	push_base_offset(0x358);
	load(0x2);
	move(0x2);
	push_base_offset(0x344);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L030f7);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x344);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	move_arg(0x2);
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	load(0x2);
	push_offset(L02c09);
	call();
	push_offset(L03783);
	jc(0x1);
	push_base_offset(0x1d4);
	push_byte(0x74);
	add();
	push_base_offset(0x340);
	load(0x2);
	move(0x2);
	push_offset(L03105);
	jmp();

L030f7:
	push_base_offset(0x1d4);
	push_byte(0x70);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03105:
	push_base_offset(0x350);
	load(0x2);
	push_byte(0x2);
	geq();
	push_offset(L03132);
	jc(0x0);
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1d4);
	push_word(0x80);
	add();
	push_base_offset(0x350);
	load(0x2);
	move(0x2);
	push_offset(L032b9);
	jmp();

L03132:
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1d4);
	push_word(0x80);
	add();
	push_base_offset(0x350);
	load(0x2);
	move(0x2);
	push_base_offset(0x11c);
	push_base_offset(0x1d4);
	push_byte(0x7c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x354);
	load(0x2);
	push_offset(L0439a);
	call();
	push_offset(L032b1);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x348);
	load(0x2);
	push_offset(L0439a);
	call();
	push_offset(L032b1);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x34c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L032b9);
	jc(0x1);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0322a:
	push_base_offset(0x124);
	load(0x2);
	push_word(0x61c);
	add();
	push_base_offset(0x11c);
	load(0x2);
	add();
	push_base_offset(0x2dc);
	push_word(0x80);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	sub();
	push_base_offset(0x34c);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L0439a);
	call();
	push_offset(L032b1);
	jc(0x1);
	push_base_offset(0x11c);
	push_base_offset(0x11c);
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_word(0x618);
	add();
	load(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x350);
	load(0x2);
	lt();
	push_offset(L0322a);
	jc(0x0);
	push_offset(L032b9);
	jmp();

L032b1:
	push_string("バストショット制御向けアニメーション領域に空きがありません");
	cmd_79();
	push_offset(L03783);
	jmp();

L032b9:
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	push_base_offset(0x2f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x2f0);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L03373);
	jc(0x0);
	push_base_offset(0x2f0);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x2f0);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a43c);
	add();
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	push_byte(0x0);
	leq();
	push_offset(L03350);
	jc(0x1);
	push_base_offset(0x120);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	push_dword(0x9fab8);
	push_dword(0x1a438);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);

L03350:
	push_base_offset(0x2dc);
	load(0x2);
	push_word(0x100);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x2dc);
	load(0x2);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x1);
	sub();
	ternary();
	push_base_offset(0x1d4);
	push_byte(0x78);
	add();
	move_arg(0x2);

L03373:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0337a:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0337a);
	jc(0x0);
	push_base_offset(0x2ec);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03508);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L03508);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x2ec);
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_word(0x84);
	add();
	move_arg(0x2);
	push_base_offset(0x118);
	push_word(0xab4);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0345d);
	jc(0x0);
	push_byte(0x1);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x118);
	push_byte(0x0);
	add();
	move_arg(0x2);
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x118);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x2d8);
	push_byte(0x1);
	move(0x2);

L0342c:
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0342c);
	jc(0x0);

L0345d:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L03464:
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L034ea);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0x118);
	push_byte(0x4);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	sys1(0xdd);
	push_base_offset(0xd4);
	push_word(0xab0);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L034d5);
	jc(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L034d5);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);

L034d5:
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);

L034ea:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L03464);
	jc(0x0);
	push_offset(L03517);
	jmp();

L03508:
	push_base_offset(0x1d4);
	push_word(0x84);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03517:
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L0351e:
	push_base_offset(0x2e4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0360e);
	jc(0x1);
	push_base_offset(0x358);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0360e);
	jc(0x1);
	push_base_offset(0x2d8);
	load(0x2);
	push_base_offset(0x2e8);
	load(0x2);
	geq();
	push_offset(L0360e);
	jc(0x0);
	push_base_offset(0x2e4);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0360e);
	jc(0x1);
	push_base_offset(0x2d4);
	push_base_offset(0x2e4);
	load(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	cmd_6a();
	push_base_offset(0x2d4);
	cmd_6d();
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xd4);
	push_word(0xab0);
	load(0x2);
	push_base_offset(0x2d4);
	push_byte(0x0);
	sys1(0xd4);
	push_base_offset(0x2dc);
	move_arg(0x2);
	push_base_offset(0x2dc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L035ea);
	jc(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L035ea);
	jc(0x1);
	push_base_offset(0x2d4);
	push_byte(0x1);
	push_base_offset(0xd4);
	push_byte(0x4);
	add();
	load(0x2);
	sys1(0xdd);
	push_byte(0x0);
	push_base_offset(0x2d4);
	sys1(0xdc);
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_offset(L03626);
	jmp();

L035ea:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_offset(L03626);
	jmp();

L0360e:
	push_base_offset(0x1d4);
	push_word(0x88);
	add();
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03626:
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L0351e);
	jc(0x0);
	push_base_offset(0x2d8);
	push_byte(0x0);
	move(0x2);

L03647:
	push_base_offset(0x28);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L02c09);
	call();
	push_offset(L03783);
	jc(0x1);
	push_base_offset(0x2d8);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2d8);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L03647);
	jc(0x0);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L036ec);
	jc(0x1);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x59c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_word(0x5a0);
	add();
	push_byte(0x0);
	move(0x2);

L036ec:
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_word(0xb0);
	mul();
	add();
	push_base_offset(0x1d4);
	push_word(0xb0);
	memcpy();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x2e0);
	load(0x2);
	push_base_offset(0x364);
	load(0x2);
	push_byte(0x4);
	eq();
	push_base_offset(0x368);
	load(0x2);
	push_dword(0x45f14);
	load(0x2);
	eq();
	bool_and();
	bool_or();
	push_offset(L03758);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_base_offset(0x368);
	load(0x2);
	move(0x2);
	push_offset(L03783);
	jmp();

L03758:
	push_base_offset(0x368);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	load(0x2);
	eq();
	push_offset(L03783);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x244c4);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L03783:
	load_base();
	push_word(0x368);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x128);
	add();
	store_base();
	push_base_offset(0x124);
	move_arg(0x2);
	push_base_offset(0x128);
	move_arg(0x2);
	push_base_offset(0x120);
	push_base_offset(0x128);
	load(0x2);
	push_word(0xb0);
	memcpy();
	push_base_offset(0x70);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x70);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x20);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x24);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x28);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x20);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x24);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x28);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x2c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x30);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x34);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x24);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x38);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x28);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x44);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x4c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x64);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x4c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x68);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x50);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x6c);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x5c);
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	load(0x2);
	push_dword(-0x7fffffff);
	neq();
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x120);
	push_byte(0x6c);
	add();
	move_arg(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_base_offset(0x120);
	push_word(0xb0);
	memcpy();
	load_base();
	push_word(0x128);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x0);
	add();
	store_base();

L03a39:
	push_word(0x504);
	load(0x2);
	push_offset(L03a58);
	jc(0x0);
	push_dword(0x3ade4);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L03a58);
	jc(0x1);
	sys1(0x5f);
	push_offset(L03a39);
	jmp();

L03a58:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L03a64:
	load_base();
	push_byte(0x0);
	add();
	store_base();

L03a69:
	push_word(0x504);
	load(0x2);
	push_offset(L03a9a);
	jc(0x0);
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L03a9a);
	jc(0x1);
	push_dword(0x3adf4);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03a9a);
	jc(0x0);
	sys1(0x5f);
	push_offset(L03a69);
	jmp();

L03a9a:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x158);
	add();
	store_base();
	push_base_offset(0x150);
	move_arg(0x2);
	push_base_offset(0x154);
	move_arg(0x2);
	push_base_offset(0x158);
	move_arg(0x2);
	sys1(0x17);
	push_base_offset(0x148);
	move_arg(0x2);
	push_base_offset(0x148);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc8);
	add();
	load(0x2);
	bool_and();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	bool_or();
	push_byte(0x20);
	push_byte(0x10);
	add();
	load(0x1);
	push_byte(0xa);
	push_byte(0x1);
	add();
	eq();
	bool_or();
	push_byte(0x0);
	push_base_offset(0x154);
	load(0x2);
	ternary();
	push_base_offset(0x154);
	move_arg(0x2);
	push_dword(0x3adf4);
	push_byte(0x4);
	add();
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_offset(L03a64);
	call();
	push_base_offset(0x44);
	push_dword(0x42abc);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	grp2(0x38);
	push_base_offset(0x20);
	push_word(0x400);
	push_byte(0x69);
	add();
	grp1(0x16);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_offset(L03b4f);
	jc(0x1);
	push_word(0x400);
	push_byte(0x6a);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	grp2(0x1f);

L03b4f:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03bd8);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xba8);
	load(0x2);
	push_byte(0x20);
	push_word(0xf8);
	add();
	load(0x2);
	push_byte(0x20);
	push_word(0xf4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x400);
	push_byte(0x69);
	add();
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	push_byte(0x70);
	add();
	load(0x1);
	push_dword(0x9fab8);
	push_dword(0x2211c);
	add();
	load(0x2);
	push_byte(0x10);
	push_base_offset(0x8);
	load(0x2);
	call();
	push_base_offset(0x148);
	move_arg(0x2);
	sys1(0x41);
	push_byte(0x0);
	push_offset(L03bd8);
	jc(0x1);
	push_base_offset(0x148);
	load(0x2);
	push_offset(L03bd8);
	jc(0x0);
	push_base_offset(0x158);
	load(0x2);
	push_base_offset(0x144);
	push_string("未定義のキャラクター名 [ %s ] が指定されました");
	cmd_6f();
	push_base_offset(0x144);
	cmd_79();

L03bd8:
	push_base_offset(0x158);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L03d1f);
	jc(0x1);
	push_base_offset(0x24);
	load(0x2);
	push_offset(L03c83);
	jc(0x0);
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_byte(0x1);
	push_word(0x100);
	push_word(0x740);
	grp1(0x56);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L03db8);
	jmp();

L03c83:
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_word(0x400);
	push_byte(0x6a);
	add();
	push_word(0x100);
	push_byte(0x0);
	push_word(0x740);
	push_byte(0x1);
	grp1(0x58);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	move(0x2);
	push_offset(L03db8);
	jmp();

L03d1f:
	push_base_offset(0x24);
	load(0x2);
	push_offset(L03e48);
	jc(0x1);
	push_dword(0x42aac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_dword(0x22114);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x44);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x740);
	grp1(0x56);
	push_dword(0x3adf4);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x14);
	add();
	push_word(0x100);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x24);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x28);
	add();
	push_word(0x400);
	push_byte(0x69);
	add();
	move(0x2);

L03db8:
	push_dword(0x42aac);
	load(0x2);
	push_byte(0x1);
	grp1(0x30);
	push_dword(0x3adf4);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x14c);
	move_arg(0x2);
	push_base_offset(0x150);
	load(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0x14c);
	load(0x2);
	ternary();
	push_dword(0x3adf4);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_dword(0x3adf4);
	push_byte(0xc);
	add();
	push_dword(0x42aac);
	load(0x2);
	move(0x2);
	push_dword(0x3adf4);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14c);
	push_base_offset(0x154);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x1);
	geq();
	push_base_offset(0x14c);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_dword(0x3adf4);
	push_byte(0x1c);
	add();
	move_arg(0x2);

L03e48:
	load_base();
	push_word(0x158);
	sub();
	store_base();
	ret();

L03e4f:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);

L03e6c:
	push_word(0x504);
	load(0x2);
	push_offset(L03e8b);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L03e8b);
	jc(0x1);
	sys1(0x5f);
	push_offset(L03e6c);
	jmp();

L03e8b:
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L03e97:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x720);
	sys1(0x18);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);

L03eb9:
	push_word(0x504);
	load(0x2);
	push_offset(L03ee9);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L03ee9);
	jc(0x1);
	sys1(0x17);
	push_offset(L03ee9);
	jc(0x0);
	push_word(0x720);
	sys1(0x1a);
	push_offset(L03ee9);
	jc(0x0);
	sys1(0x5f);
	push_offset(L03eb9);
	jmp();

L03ee9:
	push_word(0x720);
	sys1(0x19);
	push_word(0x504);
	load(0x2);
	bool_zero();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L03f25);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03e4f);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_offset(L03f33);
	jmp();

L03f25:
	push_base_offset(0xc);
	load(0x2);
	push_offset(L03e97);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L03f33:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x94);
	add();
	store_base();
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x74);
	move_arg(0x2);
	push_base_offset(0x78);
	move_arg(0x2);
	push_base_offset(0x7c);
	move_arg(0x2);
	push_base_offset(0x80);
	move_arg(0x2);
	push_base_offset(0x84);
	move_arg(0x2);
	push_base_offset(0x88);
	move_arg(0x2);
	push_base_offset(0x8c);
	move_arg(0x2);
	push_base_offset(0x90);
	move_arg(0x2);
	push_base_offset(0x94);
	move_arg(0x2);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x70);
	load(0x2);
	push_dword(0x7fffffff);
	ternary();
	push_base_offset(0x70);
	move_arg(0x2);
	push_base_offset(0x6c);
	push_byte(0x6c);
	memclr();
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x8c);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x88);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x84);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	push_base_offset(0x7c);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	push_base_offset(0x78);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	push_base_offset(0x74);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	push_base_offset(0x70);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x24);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x28);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x30);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x34);
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x38);
	add();
	push_base_offset(0x70);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x40);
	add();
	push_word(0x101);
	push_base_offset(0x8c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x3c);
	add();
	push_base_offset(0x6c);
	push_byte(0x40);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x44);
	add();
	push_base_offset(0x88);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x48);
	add();
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x4c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x6c);
	push_byte(0x5c);
	add();
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x3ae20);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	push_base_offset(0x6c);
	push_byte(0x6c);
	memcpy();
	load_base();
	push_word(0x94);
	sub();
	store_base();
	ret();

L0410a:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3ae20);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x6c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_offset(L0416a);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x30);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);

L0416a:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0417c:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_offset(L0410a);
	call();
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x52);
	lt();
	push_offset(L0417c);
	jc(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x58);
	add();
	store_base();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x40);
	push_base_offset(0x44);
	load(0x2);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	div();
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x40);
	move_arg(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x2c);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x3c);
	move_arg(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x30);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x4);
	add();
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x3c);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x8);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x38);
	load(0x2);
	move(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x14);
	add();
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x34);
	push_byte(0x14);
	add();
	move_arg(0x2);
	push_base_offset(0x34);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x1c);
	add();
	push_base_offset(0x40);
	load(0x2);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x24);
	add();
	push_base_offset(0x4c);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x28);
	add();
	push_base_offset(0x48);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	sub();
	move(0x2);
	push_dword(0x3d0b8);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x34);
	push_byte(0x34);
	memcpy();
	load_base();
	push_byte(0x58);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_dword(0x3d0b8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L04394);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x60);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	memclr();

L04394:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0439a:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04400);
	jc(0x0);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L043ce:
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7);
	sar();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L043ce);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_offset(L04489);
	jmp();

L04400:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L04407:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	geq();
	push_offset(L044a2);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7f);
	and();
	move(0x0);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x7);
	sar();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L04475);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	load(0x0);
	push_word(0x80);
	or();
	move(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L04407);
	jmp();

L04475:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);

L04489:
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L044a2);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L044a2:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L044ad:
	load_base();
	push_word(0x428);
	add();
	store_base();
	push_base_offset(0x428);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("file._bp");
	sys1(0x40);
	push_base_offset(0x424);
	move_arg(0x2);
	push_byte(0x0);
	push_string("ErrorLog.txt");
	push_string("BGI.edb");
	ternary();
	push_base_offset(0x414);
	move_arg(0x2);
	push_base_offset(0x420);
	push_base_offset(0x414);
	load(0x2);
	push_byte(0x2);
	push_byte(0x0);
	push_base_offset(0x424);
	load(0x2);
	call();
	push_base_offset(0x418);
	move_arg(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L04510);
	jc(0x0);
	push_base_offset(0x418);
	load(0x2);
	push_base_offset(0x414);
	load(0x2);
	push_base_offset(0x410);
	push_string("[ %s ] を開けません\nエラーコード：%d");
	cmd_6f();
	push_base_offset(0x410);
	cmd_79();
	push_offset(L045fa);
	jmp();

L04510:
	push_base_offset(0x41c);
	push_base_offset(0x420);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x3);
	push_base_offset(0x424);
	load(0x2);
	call();
	push_base_offset(0x418);
	move_arg(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x41c);
	load(0x2);
	push_byte(0x0);
	gt();
	bool_and();
	push_offset(L0455f);
	jc(0x0);
	push_base_offset(0x41c);
	load(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_base_offset(0x414);
	load(0x2);
	push_base_offset(0x410);
	push_string("[ %s ] に書き込めません\nエラーコード：%d\nステータス：%d");
	cmd_6f();
	push_base_offset(0x410);
	cmd_79();
	push_offset(L045fa);
	jmp();

L0455f:
	push_base_offset(0x10);
	sys1(0xc);
	push_base_offset(0x428);
	load(0x2);
	push_base_offset(0x10);
	push_byte(0xc);
	add();
	load(0x1);
	push_base_offset(0x10);
	push_byte(0xa);
	add();
	load(0x1);
	push_base_offset(0x10);
	push_byte(0x8);
	add();
	load(0x1);
	push_base_offset(0x10);
	push_byte(0x6);
	add();
	load(0x1);
	push_base_offset(0x10);
	push_byte(0x2);
	add();
	load(0x1);
	push_base_offset(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_base_offset(0x410);
	push_string("%04d/%02d/%02d %02d:%02d:%02d,%s\r\n");
	cmd_6f();
	push_base_offset(0x410);
	cmd_68();
	push_base_offset(0x418);
	move_arg(0x2);
	push_base_offset(0x41c);
	push_base_offset(0x420);
	load(0x2);
	push_base_offset(0x410);
	push_base_offset(0x418);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x424);
	load(0x2);
	call();
	push_base_offset(0x418);
	move_arg(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x41c);
	load(0x2);
	push_byte(0x0);
	gt();
	bool_and();
	push_offset(L045fa);
	jc(0x0);
	push_base_offset(0x41c);
	load(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_base_offset(0x414);
	load(0x2);
	push_base_offset(0x410);
	push_string("[ %s ] に書き込めません\nエラーコード：%d\nステータス：%d");
	cmd_6f();
	push_base_offset(0x410);
	cmd_79();
	push_offset(L045fa);
	jmp();

L045fa:
	push_base_offset(0x41c);
	push_base_offset(0x420);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x424);
	load(0x2);
	call();
	push_base_offset(0x418);
	move_arg(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x41c);
	load(0x2);
	push_byte(0x0);
	gt();
	bool_and();
	push_offset(L0463f);
	jc(0x0);
	push_base_offset(0x41c);
	load(0x2);
	push_base_offset(0x418);
	load(0x2);
	push_base_offset(0x414);
	load(0x2);
	push_base_offset(0x410);
	push_string("[ %s ] をクローズできません\nエラーコード：%d\nステータス：%d");
	cmd_6f();
	push_base_offset(0x410);
	cmd_79();

L0463f:
	sys1(0x41);
	load_base();
	push_word(0x428);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x40c);
	add();
	store_base();
	push_base_offset(0x408);
	move_arg(0x2);
	push_base_offset(0x40c);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L04675);
	jc(0x0);
	push_byte(0x0);
	push_offset(L04675);
	jc(0x0);
	push_base_offset(0x408);
	load(0x2);
	load(0x0);
	push_byte(0x0);
	neq();
	push_offset(L04717);
	jc(0x1);

L04675:
	push_base_offset(0x40c);
	load(0x2);
	push_string("data01xxx.arc");
	cmd_69();
	push_offset(L0468f);
	jc(0x1);
	push_base_offset(0x4);
	push_string(" (スクリプト) ");
	move(0x2);
	push_offset(L046ff);
	jmp();

L0468f:
	push_base_offset(0x40c);
	load(0x2);
	push_string("data02xxx.arc");
	cmd_69();
	push_offset(L046a9);
	jc(0x1);
	push_base_offset(0x4);
	push_string(" (CG) ");
	move(0x2);
	push_offset(L046ff);
	jmp();

L046a9:
	push_base_offset(0x40c);
	load(0x2);
	push_string("data03xxx.arc");
	cmd_69();
	push_offset(L046c3);
	jc(0x1);
	push_base_offset(0x4);
	push_string(" (効果音) ");
	move(0x2);
	push_offset(L046ff);
	jmp();

L046c3:
	push_base_offset(0x40c);
	load(0x2);
	push_string("data04xxx.arc");
	cmd_69();
	push_offset(L046dd);
	jc(0x1);
	push_base_offset(0x4);
	push_string(" (音声) ");
	move(0x2);
	push_offset(L046ff);
	jmp();

L046dd:
	push_base_offset(0x40c);
	load(0x2);
	push_string("data05xxx.arc");
	cmd_69();
	push_offset(L046f7);
	jc(0x1);
	push_base_offset(0x4);
	push_string(" (ストリーム) ");
	move(0x2);
	push_offset(L046ff);
	jmp();

L046f7:
	push_base_offset(0x4);
	push_string("");
	move(0x2);

L046ff:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x408);
	load(0x2);
	push_base_offset(0x404);
	push_string("指定されたファイル [ %s ]%sは存在しません");
	cmd_6f();
	push_base_offset(0x404);
	push_offset(L044ad);
	call();

L04717:
	load_base();
	push_word(0x40c);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x404);
	add();
	store_base();
	push_base_offset(0x404);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L04746);
	jc(0x0);
	push_byte(0x0);
	push_offset(L04746);
	jc(0x0);
	push_base_offset(0x404);
	load(0x2);
	load(0x0);
	push_byte(0x0);
	neq();
	push_offset(L04759);
	jc(0x1);

L04746:
	push_base_offset(0x404);
	load(0x2);
	push_base_offset(0x400);
	push_string("指定された定義 [ %s ] は存在しません");
	cmd_6f();
	push_base_offset(0x400);
	push_offset(L044ad);
	call();

L04759:
	load_base();
	push_word(0x404);
	sub();
	store_base();
	ret();
