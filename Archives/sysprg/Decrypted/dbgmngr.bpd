	load_base();
	push_byte(0x5c);
	add();
	store_base();
	sys1(0x46);
	push_dword(0x42768);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_dword(0x15d618);
	push_byte(0x0);
	move(0x2);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);
	push_dword(0x15d620);
	push_byte(0x0);
	move(0x2);
	push_dword(0x15d624);
	push_byte(0x0);
	move(0x2);
	push_dword(0x15d8d6);
	push_string("lwrk[0]");
	cmd_6a();
	push_dword(0x15d66c);
	push_word(0x26a);
	memclr();
	push_byte(0x0);
	push_string("WorksAndFlagsDB");
	sys1(0x34);
	push_offset(L0007c);
	jc(0x1);
	push_dword(0x15d66c);
	push_byte(0x0);
	push_string("WorksAndFlagsDB");
	sys1(0x30);
	push_base_offset(0x18);
	move_arg(0x2);

L0007c:
	push_word(0xef0);
	push_word(0x2bc);
	push_word(0x258);
	push_byte(0x1);
	grp1(0x11);
	push_word(0xef1);
	push_word(0x2bc);
	push_byte(0x3c);
	push_byte(0x1);
	grp1(0x11);
	push_string("Debug window");
	push_byte(0x10);
	push_byte(0x2);
	add();
	load(0x1);
	push_byte(0x10);
	push_byte(0x4);
	add();
	load(0x1);
	push_word(0x2bc);
	push_word(0x258);
	usr1(0x10);
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x5c);
	load(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	usr1(0x14);
	push_string("変数／フラグ");
	push_byte(0x10);
	push_byte(0x6);
	add();
	load(0x1);
	push_byte(0x10);
	push_byte(0x8);
	add();
	load(0x1);
	push_word(0x21c);
	push_word(0x258);
	usr1(0x10);
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	usr1(0x14);
	push_base_offset(0x54);
	push_byte(0x7a);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4c);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x44);
	push_byte(0x13);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	push_byte(0x78);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x34);
	push_byte(0x79);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x54);
	sys1(0x12);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x4c);
	sys1(0x12);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x44);
	sys1(0x12);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x3c);
	sys1(0x12);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x34);
	sys1(0x12);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x14);
	push_byte(0x4);
	add();
	push_dword(-0x80000000);
	move(0x2);
	push_base_offset(0x4);
	push_dword(-0x80000000);
	move(0x2);

L00173:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L0034d);
	jc(0x0);
	push_dword(0x15d618);
	load(0x2);
	push_offset(L0034d);
	jc(0x0);
	sys1(0x8);
	push_base_offset(0xc);
	push_byte(0x4);
	add();
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	add();
	move_arg(0x2);
	push_byte(0x0);
	cmd_77();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	add();
	load(0x2);
	eq();
	push_base_offset(0xc);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x14);
	push_byte(0x4);
	add();
	load(0x2);
	eq();
	bool_and();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	eq();
	bool_and();
	push_offset(L00221);
	jc(0x0);
	push_base_offset(0x14);
	push_byte(0x0);
	add();
	push_base_offset(0xc);
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x14);
	push_byte(0x4);
	add();
	push_base_offset(0xc);
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_base_offset(0x5c);
	load(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0xc);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_offset(L003b9);
	call();

L00221:
	push_base_offset(0x4c);
	sys1(0x12);
	push_base_offset(0x18);
	move_arg(0x2);
	push_dword(0x15d61c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	neq();
	bool_or();
	push_offset(L00290);
	jc(0x1);
	push_base_offset(0x28);
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L00287);
	jc(0x1);
	push_word(0xb40);
	load(0x2);
	push_offset(L00275);
	jc(0x1);
	push_base_offset(0x5c);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x230ac);
	add();
	usr1(0x1c);

L00275:
	push_base_offset(0x5c);
	load(0x2);
	push_offset(L0053c);
	call();
	push_base_offset(0x58);
	load(0x2);
	push_offset(L00fbe);
	call();

L00287:
	push_dword(0x15d61c);
	push_byte(0x0);
	move(0x2);

L00290:
	push_base_offset(0x54);
	sys1(0x12);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	eq();
	push_offset(L002f1);
	jc(0x0);
	push_base_offset(0x2c);
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	bool_zero();
	move(0x1);
	push_dword(0x15d61c);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	move(0x2);
	push_base_offset(0x5c);
	load(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	usr1(0x14);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x10);
	push_byte(0x0);
	add();
	load(0x1);
	usr1(0x14);
	push_offset(L00173);
	jmp();

L002f1:
	push_base_offset(0x3c);
	sys1(0x12);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	eq();
	push_offset(L0031d);
	jc(0x0);
	push_base_offset(0x20);
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_offset(L01565);
	call();
	push_offset(L00173);
	jmp();

L0031d:
	push_base_offset(0x34);
	sys1(0x12);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	eq();
	push_offset(L00349);
	jc(0x0);
	push_base_offset(0x1c);
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_offset(L01606);
	call();
	push_offset(L00173);
	jmp();

L00349:
	push_offset(L00173);
	jmp();

L0034d:
	push_base_offset(0x5c);
	load(0x2);
	usr1(0x17);
	push_byte(0x10);
	push_byte(0x4);
	add();
	move_arg(0x1);
	push_byte(0x10);
	push_byte(0x2);
	add();
	move_arg(0x1);
	push_base_offset(0x5c);
	load(0x2);
	usr1(0x11);
	push_base_offset(0x58);
	load(0x2);
	usr1(0x17);
	push_byte(0x10);
	push_byte(0x8);
	add();
	move_arg(0x1);
	push_byte(0x10);
	push_byte(0x6);
	add();
	move_arg(0x1);
	push_base_offset(0x58);
	load(0x2);
	usr1(0x11);
	push_word(0xef0);
	grp1(0x12);
	push_word(0xef1);
	grp1(0x12);
	push_dword(0x42768);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_dword(0x42768);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x5c);
	sub();
	store_base();
	ret();

L003b9:
	load_base();
	push_word(0x118);
	add();
	store_base();
	push_base_offset(0x10c);
	move_arg(0x2);
	push_base_offset(0x110);
	move_arg(0x2);
	push_base_offset(0x114);
	move_arg(0x2);
	push_base_offset(0x118);
	move_arg(0x2);
	push_word(0xef1);
	push_byte(0x0);
	grp1(0x13);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_base_offset(0x114);
	load(0x2);
	push_base_offset(0x108);
	push_string("スクリーン座標系　　：% 5d , % 5d");
	cmd_6f();
	push_word(0xef1);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	sub();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	sub();
	push_base_offset(0x114);
	load(0x2);
	push_word(0x500);
	push_byte(0x1);
	sar();
	sub();
	push_base_offset(0x108);
	push_string("バストショット座標系：% 5d , % 5d");
	cmd_6f();
	push_word(0xef1);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	sub();
	push_base_offset(0x114);
	load(0x2);
	push_word(0x500);
	push_byte(0x1);
	sar();
	sub();
	push_base_offset(0x108);
	push_string("スプライト座標系　　：% 5d , % 5d");
	cmd_6f();
	push_word(0xef1);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0x3c0);
	push_base_offset(0x108);
	push_string("デバッグメモ：%s");
	cmd_6f();
	push_word(0xef1);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x118);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xef1);
	push_word(0x80);
	push_byte(0x0);
	usr1(0x19);
	load_base();
	push_word(0x118);
	sub();
	store_base();
	ret();

L0053c:
	load_base();
	push_word(0x944);
	add();
	store_base();
	push_base_offset(0x944);
	move_arg(0x2);
	sys1(0x4);
	push_base_offset(0x940);
	move_arg(0x2);
	push_base_offset(0x938);
	push_byte(0x0);
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	grp1(0x13);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("□ スクリプト情報 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_word(0xbc);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L00635);
	jc(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x72c);
	push_base_offset(0x420);
	push_dword(0x9fab8);
	push_word(0xc0);
	add();
	load(0x2);
	sys1(0x2b);
	push_offset(L00635);
	jc(0x1);
	push_dword(0x400000);
	push_word(0xb10);
	load(0x2);
	push_word(0x6100);
	push_dword(0x9fab8);
	push_word(0x528);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc4);
	add();
	load(0x2);
	push_base_offset(0x420);
	push_base_offset(0x72c);
	push_base_offset(0x82c);
	push_string("%s%s - 行番号 : %d < SP : %d / %d > < SC : %d / %d >");
	cmd_6f();
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);

L00635:
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	push_byte(0x1);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("□ BGM情報 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("　　　　　　　　　　ファイル名　　　　　　　　　　　　ループセクション　　　　　　　　　出力");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_byte(0x0);
	move(0x2);

L006b9:
	push_base_offset(0x114);
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_byte(0x0);
	push_byte(0x54);
	mul();
	add();
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x54);
	mul();
	add();
	move(0x2);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x1);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x0);
	push_byte(0x0);
	neq();
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x28);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x1);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x8);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x93c);
	load(0x2);
	push_base_offset(0x82c);
	push_string("BGM %.2d　　　　　　　%-32s　%-32s　% 4d");
	cmd_6f();
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x1);
	push_dword(0xffffff);
	push_dword(0x808080);
	ternary();
	push_base_offset(0x930);
	move_arg(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x930);
	load(0x2);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x3);
	lt();
	push_offset(L006b9);
	jc(0x0);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	push_byte(0x1);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("□ 効果音情報 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("　　　　　　　　　　ファイル名　　　　　　　　　　　　出力");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_byte(0x0);
	move(0x2);

L00807:
	push_base_offset(0x110);
	push_dword(0x44414);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	move(0x2);
	push_base_offset(0x940);
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	lt();
	push_offset(L00837);
	jc(0x0);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x34);
	memclr();

L00837:
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x14);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x93c);
	load(0x2);
	push_base_offset(0x82c);
	push_string("One-Shot SE %.2d  　　%-32s　% 4d");
	cmd_6f();
	push_base_offset(0x110);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0xffffff);
	push_dword(0x808080);
	ternary();
	push_base_offset(0x930);
	move_arg(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x930);
	load(0x2);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x4);
	lt();
	push_offset(L00807);
	jc(0x0);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	push_byte(0x1);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("　　　　　　　　　　ファイル名　　　　　　　　　　　　ループセクション　　　　　　　　　出力");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_byte(0x0);
	move(0x2);

L0091b:
	push_base_offset(0x114);
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_byte(0x4);
	push_byte(0x54);
	mul();
	add();
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x54);
	mul();
	add();
	move(0x2);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x1);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x0);
	push_byte(0x0);
	neq();
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x28);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x1);
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x8);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x93c);
	load(0x2);
	push_base_offset(0x82c);
	push_string("Streaming SE %.2d 　　%-32s　%-32s　% 4d");
	cmd_6f();
	push_base_offset(0x114);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x1);
	push_dword(0xffffff);
	push_dword(0x808080);
	ternary();
	push_base_offset(0x930);
	move_arg(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x930);
	load(0x2);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x4);
	lt();
	push_offset(L0091b);
	jc(0x0);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	push_byte(0x1);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("□ 背景情報 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("　　　　　　　　　　ファイル名　　　　　　　　　　　　Ｘ座標　Ｙ座標　Ｚ座標　回転角　輝度");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x1c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	push_dword(0x9fab8);
	push_dword(0xd08c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x14);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x10);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x92cc);
	add();
	push_word(0x80);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x82c);
	push_string("背景　　　　　　　　%-32s　% 6d　% 6d　% 6d　% 6d　% 4d");
	cmd_6f();
	push_dword(0x9fab8);
	push_dword(0xc560);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0xffffff);
	push_dword(0x808080);
	ternary();
	push_base_offset(0x930);
	move_arg(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x930);
	load(0x2);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	push_byte(0x1);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("□ バストショット／フェイス情報 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("　　　　　　　　　　ファイル名　　　　　　　　　　　　表情ファイル名　　　　　　　　　　Ｘ座標　Ｙ座標　Ｚ座標　回転角　透過度　優先度");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x108);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x93c);
	push_byte(0x0);
	move(0x2);

L00bc5:
	push_base_offset(0x10c);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_byte(0x20);
	push_byte(0x70);
	mul();
	add();
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00d55);
	jc(0x1);
	push_base_offset(0x934);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L00c80);
	jc(0x0);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x732);
	push_word(0x100);
	sub();
	eq();
	push_offset(L00c5b);
	jc(0x0);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x500);
	push_word(0x100);
	sub();
	push_word(0x80);
	add();
	push_byte(0x10);
	sub();
	lt();
	push_offset(L00c6a);
	jc(0x0);
	push_base_offset(0x934);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x7b0);
	push_word(0x100);
	sub();
	sub();
	push_word(0x80);
	push_byte(0x2);
	mul();
	add();
	push_byte(0x10);
	sub();
	move(0x2);
	push_offset(L00c80);
	jmp();

L00c5b:
	push_base_offset(0x934);
	push_word(0x80);
	push_byte(0x2);
	mul();
	move(0x2);
	push_offset(L00c80);
	jmp();

L00c6a:
	push_base_offset(0x934);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x500);
	push_word(0x100);
	sub();
	sub();
	push_word(0x80);
	add();
	move(0x2);

L00c80:
	push_base_offset(0x104);
	push_byte(0x0);
	move(0x0);
	push_base_offset(0x104);
	push_byte(0x0);
	push_dword(0x9fab8);
	push_dword(0x1d9d4);
	add();
	push_byte(0x20);
	push_byte(0x30);
	mul();
	add();
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x30);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	sys1(0xdd);
	push_base_offset(0x934);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x68);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0x104);
	push_dword(0x9fab8);
	push_dword(0x92cc);
	add();
	push_byte(0x0);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x20);
	push_byte(0x28);
	mul();
	add();
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x108);
	load(0x2);
	push_base_offset(0x82c);
	push_string("Bustshot %.2d 　　　　%-32s　%-32s　% 6d　% 6d　% 6d　% 6d　% 6d　% 6d");
	cmd_6f();
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00d55:
	push_base_offset(0x108);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_byte(0x1f);
	lt();
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x8);
	lt();
	bool_and();
	push_offset(L00bc5);
	jc(0x0);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	push_byte(0x1);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("□ スプライト情報 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_string("　　　　　　　　　　ファイル名　　　　　　　　　　　　マスクファイル名　　　　　　　　　Ｘ座標　Ｙ座標　Ｚ座標　回転角　透過度　優先度");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x93c);
	push_byte(0x0);
	move(0x2);

L00e03:
	push_base_offset(0x10c);
	push_dword(0x9fab8);
	push_dword(0xa960);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x70);
	mul();
	add();
	move(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00f81);
	jc(0x1);
	push_base_offset(0x934);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x6c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x80);
	lt();
	push_offset(L00e97);
	jc(0x0);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x500);
	push_word(0x100);
	sub();
	push_word(0x80);
	add();
	push_byte(0x10);
	sub();
	lt();
	push_offset(L00e81);
	jc(0x0);
	push_base_offset(0x934);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x7b0);
	push_word(0x100);
	sub();
	sub();
	push_word(0x80);
	push_byte(0x2);
	mul();
	add();
	push_byte(0x10);
	sub();
	move(0x2);
	push_offset(L00e97);
	jmp();

L00e81:
	push_base_offset(0x934);
	push_base_offset(0x934);
	load(0x2);
	push_word(0x500);
	push_word(0x100);
	sub();
	sub();
	push_word(0x80);
	add();
	move(0x2);

L00e97:
	push_base_offset(0x934);
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x68);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	bool_and();
	push_dword(0x9fab8);
	push_dword(0x92cc);
	add();
	push_byte(0x40);
	push_byte(0x28);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x10c);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x92cc);
	add();
	push_byte(0x0);
	push_byte(0x28);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	mul();
	add();
	push_byte(0x0);
	add();
	push_string("--------------------------------");
	ternary();
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x82c);
	push_string("Sprite %.2d 　　　　　%-32s　%-32s　% 6d　% 6d　% 6d　% 6d　% 6d　% 6d");
	cmd_6f();
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x938);
	load(0x2);
	push_base_offset(0x82c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x938);
	push_base_offset(0x938);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x93c);
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00f81:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	lt();
	push_base_offset(0x93c);
	load(0x2);
	push_byte(0x10);
	lt();
	bool_and();
	push_offset(L00e03);
	jc(0x0);
	push_base_offset(0x944);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3c);
	push_word(0xef0);
	push_word(0x80);
	push_byte(0x0);
	usr1(0x19);
	load_base();
	push_word(0x944);
	sub();
	store_base();
	ret();

L00fbe:
	load_base();
	push_word(0x120);
	add();
	store_base();
	push_base_offset(0x120);
	move_arg(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	grp1(0x13);
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_string("□ ローカル変数 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01037:
	push_dword(0x15d66c);
	push_word(0x208);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L010a5);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x86cc);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x11c);
	push_string("lwrk[%d]：%d");
	cmd_6f();
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);

L010a5:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x200);
	lt();
	push_offset(L01037);
	jc(0x0);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	gt();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x78);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_string("□ ローカルフラグ □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01157:
	push_dword(0x15d66c);
	push_word(0x108);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L011d4);
	jc(0x1);
	push_dword(0x9fab8);
	push_dword(0x85cc);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_string("TRUE");
	push_string("FALSE");
	ternary();
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x11c);
	push_string("lflg[%d]：%s");
	cmd_6f();
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);

L011d4:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x800);
	lt();
	push_offset(L01157);
	jc(0x0);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	gt();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x82);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_string("□ グローバル変数 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01287:
	push_dword(0x15d66c);
	push_word(0x100);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L012ed);
	jc(0x1);
	push_word(0x2c0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x11c);
	push_string("gwrk[%d]：%d");
	cmd_6f();
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);

L012ed:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x40);
	lt();
	push_offset(L01287);
	jc(0x0);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	gt();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_word(0x82);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_string("□ グローバルフラグ □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L0139f:
	push_dword(0x15d66c);
	push_byte(0x0);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L01413);
	jc(0x1);
	push_word(0x1c0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_string("TRUE");
	push_string("FALSE");
	ternary();
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x11c);
	push_string("gflg[%d]：%s");
	cmd_6f();
	push_word(0xef0);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);

L01413:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_word(0x800);
	lt();
	push_offset(L0139f);
	jc(0x0);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	gt();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_string("□ 文字列変数 □");
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffc0c0);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L014b8:
	push_dword(0x15d66c);
	push_word(0x268);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L01531);
	jc(0x1);
	push_dword(0x400000);
	push_word(0x6100);
	add();
	push_word(0x100);
	sub();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	shl();
	add();
	push_offset(L02082);
	call();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x11c);
	push_string("lstr[%d]：%s");
	cmd_6f();
	push_word(0xef0);
	push_byte(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x11c);
	push_byte(0x0);
	push_byte(0xa);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	grp3(0x1e);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xa);
	push_byte(0x64);
	push_byte(0x0);
	add();
	mul();
	push_byte(0x64);
	div();
	add();
	move(0x2);

L01531:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	lt();
	push_offset(L014b8);
	jc(0x0);
	push_base_offset(0x120);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xef0);
	push_word(0x80);
	push_byte(0x0);
	usr1(0x19);
	load_base();
	push_word(0x120);
	sub();
	store_base();
	ret();

L01565:
	load_base();
	push_word(0x218);
	add();
	store_base();
	push_base_offset(0x218);
	push_dword(0x15d8d6);
	cmd_6a();

L01574:
	push_base_offset(0x218);
	push_string("変数／フラグの登録");
	push_base_offset(0x218);
	push_byte(0xf);
	usr1(0x84);
	push_offset(L015ff);
	jc(0x1);
	push_base_offset(0x218);
	cmd_68();
	push_offset(L01598);
	jc(0x0);
	push_string("変数／フラグが入力されていません");
	usr1(0x80);
	push_offset(L01574);
	jmp();

L01598:
	push_base_offset(0x18);
	push_base_offset(0xc);
	push_base_offset(0x218);
	push_offset(L018e6);
	call();
	push_offset(L01574);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L015d0);
	jc(0x1);
	push_base_offset(0x218);
	push_base_offset(0x118);
	push_string("すでに登録済みの変数／フラグです\n\n%s");
	cmd_6f();
	push_base_offset(0x118);
	usr1(0x80);
	push_offset(L01574);
	jmp();

L015d0:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	push_offset(L01fdd);
	call();
	push_string("WorksAndFlagsDB");
	push_dword(0x15d66c);
	push_word(0x26a);
	sys1(0x32);
	push_dword(0x15d8d6);
	push_base_offset(0x218);
	cmd_6a();
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L015ff:
	load_base();
	push_word(0x218);
	sub();
	store_base();
	ret();

L01606:
	load_base();
	push_word(0x218);
	add();
	store_base();
	push_dword(0x10000);
	sys1(0x20);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_dword(0x10000);
	memclr();
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01631:
	push_dword(0x15d66c);
	push_word(0x208);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L0167d);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	push_string("lwrk[%d]\n");
	cmd_6f();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	move(0x2);

L0167d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x200);
	lt();
	push_offset(L01631);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L0169f:
	push_dword(0x15d66c);
	push_word(0x108);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L016eb);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	push_string("lflg[%d]\n");
	cmd_6f();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	move(0x2);

L016eb:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x800);
	lt();
	push_offset(L0169f);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L0170d:
	push_dword(0x15d66c);
	push_word(0x100);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L01759);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	push_string("gwrk[%d]\n");
	cmd_6f();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	move(0x2);

L01759:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x40);
	lt();
	push_offset(L0170d);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L0177a:
	push_dword(0x15d66c);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L017c5);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	push_string("gflg[%d]\n");
	cmd_6f();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	move(0x2);

L017c5:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x800);
	lt();
	push_offset(L0177a);
	jc(0x0);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L017e7:
	push_dword(0x15d66c);
	push_word(0x268);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02047);
	call();
	push_offset(L01833);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	push_string("lstr[%d]\n");
	cmd_6f();
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	cmd_68();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	add();
	move(0x2);

L01833:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	lt();
	push_offset(L017e7);
	jc(0x0);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L0186c);
	jc(0x1);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	add();
	push_byte(0x1);
	sub();
	push_byte(0x0);
	move(0x0);

L0186c:
	push_base_offset(0x218);
	push_string("変数／フラグの登録削除");
	push_string("削除したい項目を選択してください");
	push_base_offset(0x18);
	load(0x2);
	usr1(0x8c);
	push_offset(L018d8);
	jc(0x1);
	push_base_offset(0x218);
	cmd_68();
	push_offset(L018d8);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x10);
	push_base_offset(0x218);
	push_offset(L018e6);
	call();
	push_offset(L018d8);
	jc(0x1);
	push_base_offset(0x218);
	push_base_offset(0x118);
	push_string("%s の登録を削除しますか？");
	cmd_6f();
	push_base_offset(0x118);
	push_byte(0x0);
	usr1(0x81);
	push_offset(L0186c);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	push_offset(L01fdd);
	call();
	push_string("WorksAndFlagsDB");
	push_dword(0x15d66c);
	push_word(0x26a);
	sys1(0x32);
	push_dword(0x15d61c);
	push_byte(0x1);
	move(0x2);

L018d8:
	push_base_offset(0x18);
	load(0x2);
	sys1(0x21);
	load_base();
	push_word(0x218);
	sub();
	store_base();
	ret();

L018e6:
	load_base();
	push_word(0x24c);
	add();
	store_base();
	push_base_offset(0x244);
	move_arg(0x2);
	push_base_offset(0x248);
	move_arg(0x2);
	push_base_offset(0x24c);
	move_arg(0x2);
	push_base_offset(0x30);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x244);
	load(0x2);
	cmd_68();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L01bb4);
	call();
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x0);
	eq();
	push_offset(L01aa2);
	jc(0x0);
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	push_string("[");
	cmd_66();
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L01961);
	jc(0x0);
	push_base_offset(0x240);
	push_string("変数／フラグ番号の開始記号 [ が記述されていません");
	cmd_6a();
	push_offset(L01b9c);
	jmp();

L01961:
	push_base_offset(0x3c);
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	push_string("]");
	cmd_66();
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L019b0);
	jc(0x0);
	push_base_offset(0x240);
	push_string("変数／フラグ番号の終端記号 ] が記述されていません");
	cmd_6a();
	push_offset(L01b9c);
	jmp();

L019b0:
	push_base_offset(0x38);
	push_base_offset(0x244);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_string("lwrk");
	push_byte(0x4);
	memcmp();
	push_offset(L019fd);
	jc(0x1);
	push_base_offset(0x40);
	push_dword(0x15d66c);
	push_word(0x208);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_word(0x200);
	move(0x2);
	push_offset(L01aad);
	jmp();

L019fd:
	push_base_offset(0x3c);
	load(0x2);
	push_string("lflg");
	push_byte(0x4);
	memcmp();
	push_offset(L01a27);
	jc(0x1);
	push_base_offset(0x40);
	push_dword(0x15d66c);
	push_word(0x108);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_word(0x800);
	move(0x2);
	push_offset(L01aad);
	jmp();

L01a27:
	push_base_offset(0x3c);
	load(0x2);
	push_string("gwrk");
	push_byte(0x4);
	memcmp();
	push_offset(L01a50);
	jc(0x1);
	push_base_offset(0x40);
	push_dword(0x15d66c);
	push_word(0x100);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x40);
	move(0x2);
	push_offset(L01aad);
	jmp();

L01a50:
	push_base_offset(0x3c);
	load(0x2);
	push_string("gflg");
	push_byte(0x4);
	memcmp();
	push_offset(L01a79);
	jc(0x1);
	push_base_offset(0x40);
	push_dword(0x15d66c);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_word(0x800);
	move(0x2);
	push_offset(L01aad);
	jmp();

L01a79:
	push_base_offset(0x3c);
	load(0x2);
	push_string("lstr");
	push_byte(0x4);
	memcmp();
	push_offset(L01aa2);
	jc(0x1);
	push_base_offset(0x40);
	push_dword(0x15d66c);
	push_word(0x268);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x10);
	move(0x2);
	push_offset(L01aad);
	jmp();

L01aa2:
	push_base_offset(0x240);
	push_string("変数／フラグが記述されていません");
	cmd_6a();
	push_offset(L01b9c);
	jmp();

L01aad:
	push_base_offset(0x28);
	push_base_offset(0x4);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_offset(L01bb4);
	call();
	push_base_offset(0x18);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L01ae9);
	jc(0x0);
	push_base_offset(0x240);
	push_string("変数／フラグ番号が記述されていません");
	cmd_6a();
	push_offset(L01b9c);
	jmp();

L01ae9:
	push_base_offset(0xc);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	push_base_offset(0x18);
	load(0x2);
	push_offset(L01d6f);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01b33);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	eq();
	push_string("変数／フラグ番号が記述されていません");
	push_string("変数／フラグ番号の中に数字ではない文字が記述されています");
	ternary();
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x240);
	push_base_offset(0x34);
	load(0x2);
	cmd_6a();
	push_offset(L01b9c);
	jmp();

L01b33:
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	lt();
	bool_and();
	push_offset(L01b79);
	jc(0x0);
	push_base_offset(0x140);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x4);
	memcpy();
	push_base_offset(0x140);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1);
	sub();
	push_byte(0x0);
	push_base_offset(0x140);
	push_base_offset(0x240);
	push_string("指定された [ %s ] の番号は [ %d ] ～ [ %d ] の範囲で指定する必要があります");
	cmd_6f();
	push_offset(L01b9c);
	jmp();

L01b79:
	push_base_offset(0x24c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	move(0x2);
	push_base_offset(0x248);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x30);
	push_byte(0x1);
	move(0x2);
	push_offset(L01ba8);
	jmp();

L01b9c:
	push_base_offset(0x240);
	usr1(0x80);
	push_base_offset(0x30);
	push_byte(0x0);
	move(0x2);

L01ba8:
	push_base_offset(0x30);
	load(0x2);
	load_base();
	push_word(0x24c);
	sub();
	store_base();
	ret();

L01bb4:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01c59);
	jc(0x1);

L01be1:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	geq();
	push_offset(L01c4d);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	cmd_6c();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	neq();
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x8140);
	neq();
	bool_and();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x9);
	neq();
	bool_and();
	push_offset(L01c4d);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01be1);
	jmp();

L01c4d:
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L01c59:
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01d69);
	jc(0x1);

L01c66:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	geq();
	push_offset(L01cd2);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	cmd_6c();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	eq();
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x8140);
	eq();
	bool_or();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x9);
	eq();
	bool_or();
	push_offset(L01cd2);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01c66);
	jmp();

L01cd2:
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L01cde:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	geq();
	push_offset(L01d69);
	jc(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	cmd_6c();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	neq();
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x8140);
	neq();
	bool_and();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x9);
	neq();
	bool_and();
	push_offset(L01d4a);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01cde);
	jmp();

L01d4a:
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01c66);
	jmp();

L01d69:
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L01d6f:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	geq();
	push_offset(L01dc5);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	load(0x0);
	push_byte(0x2d);
	eq();
	push_offset(L01dc5);
	jc(0x1);
	push_base_offset(0x14);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01dd0);
	jmp();

L01dc5:
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_offset(L01dd0);
	jmp();

L01dd0:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	sub();
	push_byte(0x2);
	geq();
	push_offset(L01e0f);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_string("0x");
	push_byte(0x2);
	memcmp();
	push_offset(L01e1a);
	jc(0x0);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_string("0X");
	push_byte(0x2);
	memcmp();
	push_offset(L01e1a);
	jc(0x0);

L01e0f:
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_offset(L01e2e);
	jmp();

L01e1a:
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);

L01e2e:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	lt();
	push_offset(L01e49);
	jc(0x0);
	push_base_offset(0xc);
	push_byte(0x1);
	move(0x2);
	push_offset(L01fd2);
	jmp();

L01e49:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L01e50:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	geq();
	push_offset(L01fb7);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L01f53);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x30);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x39);
	leq();
	bool_and();
	push_offset(L01eb2);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	mul();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x30);
	sub();
	add();
	move(0x2);
	push_offset(L01fa6);
	jmp();

L01eb2:
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x61);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x66);
	leq();
	bool_and();
	push_offset(L01efd);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	mul();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x61);
	sub();
	push_byte(0xa);
	add();
	add();
	move(0x2);
	push_offset(L01fa6);
	jmp();

L01efd:
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x41);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x46);
	leq();
	bool_and();
	push_offset(L01f48);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	mul();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x41);
	sub();
	push_byte(0xa);
	add();
	add();
	move(0x2);
	push_offset(L01fa6);
	jmp();

L01f48:
	push_base_offset(0xc);
	push_byte(0x2);
	move(0x2);
	push_offset(L01fd2);
	jmp();

L01f53:
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x30);
	geq();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x39);
	leq();
	bool_and();
	push_offset(L01f9b);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xa);
	mul();
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	push_byte(0x30);
	sub();
	add();
	move(0x2);
	push_offset(L01fa6);
	jmp();

L01f9b:
	push_base_offset(0xc);
	push_byte(0x2);
	move(0x2);
	push_offset(L01fd2);
	jmp();

L01fa6:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L01e50);
	jmp();

L01fb7:
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x4);
	load(0x2);
	ternary();
	push_base_offset(0x20);
	load(0x2);
	move_arg(0x2);

L01fd2:
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L01fdd:
	load_base();
	push_byte(0x18);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0xc);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x7);
	and();
	shl();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	not();
	and();
	push_base_offset(0x4);
	load(0x2);
	or();
	move(0x0);
	load_base();
	push_byte(0x18);
	sub();
	store_base();
	ret();

L02047:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x7);
	and();
	sar();
	push_byte(0x1);
	and();
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L02082:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_dword(0x400000);
	lt();
	push_dword(0x9faa8);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	add();
	push_dword(0x9fab8);
	push_word(0x52c);
	add();
	push_base_offset(0x8);
	load(0x2);
	add();
	push_dword(0x400000);
	sub();
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	ternary();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
