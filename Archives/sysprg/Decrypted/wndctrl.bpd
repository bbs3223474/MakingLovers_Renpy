	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	push_offset(L00065);
	push_offset(L000cd);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x8);
	push_dword(0x3ade4);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();
	push_dword(0x3ade4);
	push_byte(0x10);
	memclr();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00033:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x514);
	push_word(0x514);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L0004b:
	load_base();
	push_byte(0x0);
	add();
	store_base();

L00050:
	sys1(0x5f);
	push_word(0x514);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L00050);
	jc(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00065:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_offset(L00033);
	call();
	push_offset(L0004b);
	call();
	push_word(0x900);
	push_byte(0x1);
	move(0x2);
	push_word(0x904);
	push_dword(0x9fab8);
	push_dword(0x25e30);
	add();
	load(0x2);
	move(0x2);
	push_word(0x908);
	push_dword(0x9fab8);
	push_dword(0x25e34);
	add();
	load(0x2);
	move(0x2);
	push_word(0x100);
	push_byte(0x0);
	push_dword(0x3ade4);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x1);
	push_offset(L00314);
	call();
	push_word(0x900);
	push_byte(0x0);
	move(0x2);
	push_word(0x904);
	push_byte(0x0);
	move(0x2);
	push_word(0x908);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L000cd:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_offset(L00033);
	call();
	push_offset(L0004b);
	call();
	push_word(0x900);
	push_byte(0x1);
	move(0x2);
	push_word(0x904);
	push_dword(0x9fab8);
	push_dword(0x25e30);
	add();
	load(0x2);
	move(0x2);
	push_word(0x908);
	push_dword(0x9fab8);
	push_dword(0x25e34);
	add();
	load(0x2);
	move(0x2);
	push_byte(0x0);
	push_word(0x100);
	push_dword(0x3ade4);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x1);
	push_offset(L00314);
	call();
	push_word(0x900);
	push_byte(0x0);
	move(0x2);
	push_word(0x904);
	push_byte(0x0);
	move(0x2);
	push_word(0x908);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L00135:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x900);
	load(0x2);
	push_offset(L002ce);
	jc(0x1);
	push_word(0x8f8);
	load(0x2);
	push_offset(L001d4);
	jc(0x1);
	push_dword(0x42abc);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);
	push_word(0x4fc);
	load(0x2);
	bool_zero();
	push_word(0x8fc);
	load(0x2);
	bool_and();
	push_offset(L0018c);
	jc(0x1);
	push_dword(0x42ab0);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L0018c:
	push_word(0x9b4);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L001d4);
	jc(0x1);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L001d4);
	jc(0x1);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L001d4:
	push_dword(0x42aa8);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);
	push_word(0xb0c);
	load(0x2);
	push_offset(L0024d);
	jc(0x0);
	push_word(0xb74);
	load(0x2);
	push_offset(L0024d);
	jc(0x0);
	push_dword(0x42a80);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0024d);
	jc(0x1);
	push_dword(0x42a80);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);
	push_dword(0x42a84);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00230);
	jc(0x1);
	push_dword(0x42a84);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L00230:
	push_dword(0x42a88);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0024d);
	jc(0x1);
	push_dword(0x42a88);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L0024d:
	push_word(0x8f8);
	load(0x2);
	push_offset(L002ce);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x3f);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00280);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x3f);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L00280:
	push_dword(0x45f14);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L002ce);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x45f14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L002ce);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x45f14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L002ce:
	push_word(0x904);
	load(0x2);
	push_offset(L002ec);
	jc(0x1);
	push_dword(0x42abc);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L002ec:
	push_word(0x908);
	load(0x2);
	push_offset(L0030a);
	jc(0x1);
	push_dword(0x42abc);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L0030a:
	push_byte(0x0);
	grp1(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00314:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	move_arg(0x2);
	push_word(0x710);
	sys1(0x18);
	push_base_offset(0x24);
	push_byte(0x1);
	push_word(0x80);
	or();
	push_word(0x100);
	or();
	push_word(0x2000);
	or();
	move(0x2);
	push_base_offset(0x24);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x1c);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x18);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	move(0x2);

L003b0:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L00490);
	jc(0x0);
	push_base_offset(0x24);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	neq();
	push_base_offset(0x2c);
	load(0x2);
	bool_and();
	push_offset(L0047a);
	jc(0x0);
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L003b0);
	jc(0x0);
	push_base_offset(0x28);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	sub();
	push_base_offset(0x18);
	load(0x2);
	div();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	leq();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	mul();
	push_base_offset(0x14);
	load(0x2);
	div();
	add();
	push_offset(L00135);
	call();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	lt();
	push_offset(L003b0);
	jc(0x0);

L0047a:
	push_base_offset(0x34);
	load(0x2);
	push_offset(L00135);
	call();
	push_word(0x3e8);
	push_word(0x3e8);
	div();
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L00490:
	push_word(0x710);
	sys1(0x19);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();
