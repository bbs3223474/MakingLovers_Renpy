	load_base();
	push_word(0x114);
	add();
	store_base();

L00006:
	push_dword(0x22798);
	push_byte(0x0);
	move(0x2);

L0000f:
	sys1(0x5f);
	push_base_offset(0x114);
	sys1(0x49);
	push_offset(L0003f);
	jc(0x1);
	push_base_offset(0x114);
	load(0x2);
	push_dword(0x40ffffff);
	eq();
	push_offset(L000c2);
	jc(0x0);
	push_base_offset(0x114);
	load(0x2);
	push_base_offset(0x110);
	push_string("アニメーションマネージャ・スレーブスレッドは無効なメッセージ [ $%.8X ] を受信しました");
	cmd_6f();
	push_base_offset(0x110);
	cmd_79();
	push_offset(L0000f);
	jmp();

L0003f:
	push_dword(0x22794);
	load(0x2);
	push_offset(L0000f);
	jc(0x1);
	push_word(0x4f4);
	load(0x2);
	push_offset(L0000f);
	jc(0x0);
	push_dword(0x22798);
	push_byte(0x1);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L00073:
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L000c9);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	bool_or();
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x60);
	lt();
	push_offset(L00073);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L00006);
	jc(0x1);
	push_byte(0x0);
	grp1(0x0);
	push_offset(L00006);
	jmp();

L000c2:
	load_base();
	push_word(0x114);
	sub();
	store_base();
	ret();

L000c9:
	load_base();
	push_word(0xc8);
	add();
	store_base();
	push_base_offset(0xc4);
	move_arg(0x2);
	push_base_offset(0xc8);
	move_arg(0x2);
	push_base_offset(0xc0);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xbc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xb8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xb4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xb0);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xac);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x98);
	push_word(0x3b90);
	push_base_offset(0xc8);
	load(0x2);
	push_word(0x520);
	mul();
	add();
	move(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00963);
	jc(0x1);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00963);
	jc(0x1);
	push_base_offset(0xa0);
	push_byte(0x0);
	move(0x2);

L0013d:
	push_base_offset(0xa0);
	load(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	geq();
	push_offset(L004ce);
	jc(0x0);
	push_base_offset(0x94);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L001ac);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L004bd);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L004bd);
	jc(0x0);
	push_base_offset(0xb4);
	push_base_offset(0xb4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L004bd);
	jmp();

L001ac:
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x50);
	add();
	load(0x2);
	push_offset(L001fb);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	lt();
	push_offset(L001fb);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L004bd);
	jc(0x0);
	push_base_offset(0xb4);
	push_base_offset(0xb4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L004bd);
	jmp();

L001fb:
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	bool_or();
	push_offset(L0023f);
	jc(0x1);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x50);
	add();
	load(0x2);
	push_offset(L0023f);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_offset(L00254);
	jmp();

L0023f:
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x48);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	leq();
	push_offset(L004bd);
	jc(0x1);

L00254:
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L00292);
	jc(0x1);
	push_dword(0x227a0);
	load(0x2);
	push_offset(L00292);
	jc(0x1);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00292);
	jc(0x1);
	push_base_offset(0x2c);
	push_byte(0x1);
	move(0x2);

L00292:
	push_base_offset(0x28);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	move(0x2);

L002a1:
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L003a0);
	jc(0x0);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	lt();
	push_offset(L00391);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x50);
	add();
	load(0x2);
	push_offset(L00344);
	jc(0x0);
	push_base_offset(0x28);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	push_base_offset(0x28);
	load(0x2);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L0045f);
	jc(0x0);
	push_base_offset(0xb4);
	push_base_offset(0xb4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0045f);
	jmp();

L00344:
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L00391);
	jc(0x1);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	push_base_offset(0x28);
	load(0x2);
	move(0x2);
	push_offset(L0045f);
	jmp();

L00391:
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	push_base_offset(0x28);
	load(0x2);
	move(0x2);

L003a0:
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x48);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00402);
	jc(0x1);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x54);
	add();
	load(0x2);
	push_offset(L00402);
	jc(0x1);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x1);
	add();
	sys1(0x2);
	push_base_offset(0xa4);
	move_arg(0x2);
	push_base_offset(0x24);
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0xa4);
	load(0x2);
	add();
	move(0x2);

L00402:
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x48);
	add();
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	add();
	push_base_offset(0x24);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L0045f);
	jc(0x1);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x48);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	leq();
	push_offset(L002a1);
	jc(0x0);

L0045f:
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L004bd);
	jc(0x0);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x3);
	eq();
	push_byte(0x1);
	push_base_offset(0xbc);
	load(0x2);
	ternary();
	push_base_offset(0xbc);
	move_arg(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x4);
	eq();
	push_byte(0x1);
	push_base_offset(0xb8);
	load(0x2);
	ternary();
	push_base_offset(0xb8);
	move_arg(0x2);
	push_base_offset(0x8c);
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x94);
	load(0x2);
	move(0x2);
	push_base_offset(0xb0);
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L004bd:
	push_base_offset(0xa0);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0013d);
	jmp();

L004ce:
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00913);
	jc(0x0);
	push_base_offset(0xbc);
	load(0x2);
	push_offset(L0059b);
	jc(0x1);
	push_base_offset(0x98);
	load(0x2);
	push_word(0x498);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0059b);
	jc(0x1);
	push_base_offset(0x94);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x98);
	load(0x2);
	push_word(0x498);
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0xa0);
	push_byte(0x0);
	move(0x2);

L0051b:
	push_base_offset(0xa0);
	load(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_word(0x4a0);
	add();
	load(0x2);
	geq();
	push_offset(L0059b);
	jc(0x0);
	push_base_offset(0x90);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x98);
	load(0x2);
	push_word(0x4a4);
	add();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x44);
	add();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8c);
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0xb0);
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xa0);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0051b);
	jmp();

L0059b:
	push_base_offset(0xb8);
	load(0x2);
	push_offset(L0065b);
	jc(0x1);
	push_base_offset(0x98);
	load(0x2);
	push_word(0x49c);
	add();
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L0065b);
	jc(0x1);
	push_base_offset(0x94);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x98);
	load(0x2);
	push_word(0x49c);
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0xa0);
	push_byte(0x0);
	move(0x2);

L005db:
	push_base_offset(0xa0);
	load(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_word(0x4c8);
	add();
	load(0x2);
	geq();
	push_offset(L0065b);
	jc(0x0);
	push_base_offset(0x90);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x98);
	load(0x2);
	push_word(0x4cc);
	add();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x44);
	add();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8c);
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x90);
	load(0x2);
	move(0x2);
	push_base_offset(0xb0);
	push_base_offset(0xb0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xa0);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L005db);
	jmp();

L0065b:
	push_base_offset(0xa0);
	push_byte(0x0);
	move(0x2);

L00662:
	push_base_offset(0xa0);
	load(0x2);
	push_base_offset(0xb0);
	load(0x2);
	geq();
	push_offset(L0088a);
	jc(0x0);
	push_base_offset(0x94);
	push_base_offset(0x8c);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x9c);
	push_byte(0x0);
	move(0x2);

L0068c:
	push_base_offset(0x9c);
	load(0x2);
	push_base_offset(0xac);
	load(0x2);
	geq();
	push_offset(L0076c);
	jc(0x0);
	push_base_offset(0x90);
	push_base_offset(0x5c);
	push_base_offset(0x9c);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	geq();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	add();
	leq();
	bool_and();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	geq();
	bool_and();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	add();
	leq();
	bool_and();
	push_offset(L00879);
	jc(0x0);
	push_base_offset(0x9c);
	push_base_offset(0x9c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L0068c);
	jmp();

L0076c:
	push_base_offset(0x9c);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00779:
	push_base_offset(0x9c);
	load(0x2);
	push_base_offset(0xb0);
	load(0x2);
	geq();
	push_offset(L00859);
	jc(0x0);
	push_base_offset(0x90);
	push_base_offset(0x8c);
	push_base_offset(0x9c);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	geq();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	add();
	leq();
	bool_and();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	geq();
	bool_and();
	push_base_offset(0x94);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x94);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	add();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	add();
	leq();
	bool_and();
	push_offset(L00879);
	jc(0x0);
	push_base_offset(0x9c);
	push_base_offset(0x9c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L00779);
	jmp();

L00859:
	push_base_offset(0x5c);
	push_base_offset(0xac);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x94);
	load(0x2);
	move(0x2);
	push_base_offset(0xac);
	push_base_offset(0xac);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00879:
	push_base_offset(0xa0);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L00662);
	jmp();

L0088a:
	push_base_offset(0x98);
	load(0x2);
	push_word(0x508);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L008cf);
	jc(0x1);
	push_base_offset(0x20);
	push_offset(L0096f);
	push_offset(L00a74);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x98);
	load(0x2);
	push_base_offset(0xac);
	load(0x2);
	push_base_offset(0x5c);
	push_base_offset(0x20);
	push_base_offset(0x98);
	load(0x2);
	push_word(0x508);
	add();
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();

L008cf:
	push_base_offset(0x98);
	load(0x2);
	push_word(0x50c);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L0090c);
	jc(0x1);
	push_base_offset(0x14);
	push_offset(L00ff0);
	push_offset(L01000);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x98);
	load(0x2);
	push_base_offset(0x14);
	push_base_offset(0x98);
	load(0x2);
	push_word(0x50c);
	add();
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();

L0090c:
	push_base_offset(0xc0);
	push_byte(0x1);
	move(0x2);

L00913:
	push_base_offset(0xb4);
	load(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	geq();
	push_offset(L0092c);
	jc(0x0);
	push_offset(L00963);
	jmp();

L0092c:
	push_base_offset(0x98);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	push_dword(0x40001000);
	push_base_offset(0xc8);
	load(0x2);
	cmd_0c(0x2, 0x2);
	push_dword(0x42768);
	push_byte(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x8);
	sys1(0x4a);
	push_offset(L00963);
	jmp();

L00963:
	push_base_offset(0xc0);
	load(0x2);
	load_base();
	push_word(0xc8);
	sub();
	store_base();
	ret();

L0096f:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x0);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x514);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L009dd);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	grp1(0x57);
	push_offset(L00a6e);
	jmp();

L009dd:
	push_base_offset(0x10);
	load(0x2);
	push_word(0x514);
	add();
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x518);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_word(0x518);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x1e);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x53);

L00a6e:
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L00a74:
	load_base();
	push_byte(0x48);
	add();
	store_base();
	push_base_offset(0x40);
	move_arg(0x2);
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L00fea);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L00a9c:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x44);
	load(0x2);
	geq();
	push_offset(L00fea);
	jc(0x0);
	push_base_offset(0x38);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x514);
	add();
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L00b0f);
	jc(0x0);
	push_base_offset(0x18);
	push_base_offset(0x48);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_offset(L00b61);
	jmp();

L00b0f:
	push_base_offset(0x18);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x514);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x518);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x518);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	add();
	move(0x2);

L00b61:
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);

L00b68:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	geq();
	push_offset(L00e9e);
	jc(0x0);
	push_base_offset(0x3c);
	push_base_offset(0x48);
	load(0x2);
	push_byte(0x18);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x60);
	mul();
	add();
	move(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	add();
	lt();
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	add();
	lt();
	bool_and();
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	add();
	lt();
	bool_and();
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	add();
	lt();
	bool_and();
	push_offset(L00e8d);
	jc(0x1);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_byte(0x0);
	lt();
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x4);
	eq();
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x4c);
	add();
	load(0x2);
	push_byte(0x7);
	eq();
	bool_or();
	bool_and();
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	push_base_offset(0xc);
	load(0x2);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x34);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x34);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x30);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x0);
	lt();
	push_base_offset(0x30);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x30);
	load(0x2);
	ternary();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_base_offset(0x2c);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x2c);
	load(0x2);
	ternary();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x28);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x24);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00dc2);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_byte(0x0);
	grp1(0x13);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_word(0x80);
	push_byte(0x0);
	grp1(0x18);
	push_offset(L00e0e);
	jmp();

L00dc2:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	gt();
	bool_or();
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	lt();
	bool_or();
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	lt();
	bool_or();
	push_offset(L00e0e);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_byte(0x0);
	grp1(0x13);

L00e0e:
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	add();
	push_base_offset(0x34);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	add();
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	grp1(0x1e);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_byte(0x20);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x38);
	add();
	load(0x2);
	add();
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x3c);
	add();
	load(0x2);
	grp1(0x18);

L00e8d:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L00b68);
	jmp();

L00e9e:
	push_base_offset(0x48);
	load(0x2);
	push_word(0x4f0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	bool_zero();
	push_base_offset(0x48);
	load(0x2);
	push_word(0x500);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L00fa9);
	jc(0x0);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x1e);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x4f0);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00f4d);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x4f0);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x4f0);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x4f0);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	grp2(0x1d);

L00f4d:
	push_base_offset(0x48);
	load(0x2);
	push_word(0x500);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00f89);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_base_offset(0x48);
	load(0x2);
	push_word(0x500);
	add();
	load(0x2);
	push_dword(0xffffff);
	push_word(0x100);
	grp2(0x1d);

L00f89:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x40);
	add();
	load(0x2);
	push_word(0x80);
	push_byte(0x0);
	grp1(0x18);

L00fa9:
	push_base_offset(0x48);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x14);
	add();
	push_byte(0xc);
	add();
	load(0x2);
	grp1(0x53);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L00a9c);
	jmp();

L00fea:
	load_base();
	push_byte(0x48);
	sub();
	store_base();
	ret();

L00ff0:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01000:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
