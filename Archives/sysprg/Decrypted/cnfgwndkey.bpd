	load_base();
	push_word(0x1be0);
	add();
	store_base();
	push_base_offset(0x1bdc);
	move_arg(0x2);
	push_base_offset(0x1be0);
	move_arg(0x2);
	push_base_offset(0x1bb0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1bac);
	push_byte(0x0);
	move(0x2);
	push_string("sysprg.arc");
	push_string("environ._bp");
	sys1(0x40);
	push_base_offset(0x1950);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("overlap._bp");
	sys1(0x40);
	push_base_offset(0x194c);
	move_arg(0x2);
	push_base_offset(0x6e8);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x1948);
	move(0x2);
	push_base_offset(0x6e8);
	push_byte(0x1);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x1328);
	move(0x2);
	push_base_offset(0x6e8);
	push_byte(0x2);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0xf54);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x0);
	add();
	push_byte(0x3);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x4);
	add();
	push_base_offset(0x6e8);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x628);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x628);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x628);
	push_base_offset(0x1bdc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	push_byte(0x1);
	push_word(0x470);
	load(0x2);
	call();
	push_base_offset(0x628);
	push_byte(0x20);
	push_base_offset(0x1bdc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L01379);
	call();
	push_base_offset(0x4fc);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4f8);
	push_byte(0x0);
	move(0x2);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x80);
	push_base_offset(0x4f4);
	move_arg(0x2);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x870);
	grp1(0x85);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0x1400);
	push_byte(0x0);
	add();
	grp1(0x86);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1a);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0x88);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x88);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x0);
	grp2(0x89);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x0);
	grp1(0x87);
	push_base_offset(0x4f4);
	load(0x2);
	push_byte(0x1);
	grp3(0x88);
	push_base_offset(0x4f4);
	load(0x2);
	push_base_offset(0x628);
	grp1(0xb7);
	push_base_offset(0x600);
	push_base_offset(0x4fc);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4f4);
	load(0x2);
	move(0x2);
	push_base_offset(0x4fc);
	push_base_offset(0x4fc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	grp1(0x50);
	push_base_offset(0x4f0);
	move_arg(0x2);
	push_base_offset(0x4f0);
	load(0x2);
	push_word(0x500);
	push_byte(0x0);
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0xd);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x880);
	grp1(0x56);
	push_base_offset(0x4f0);
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0xd);
	add();
	grp1(0x38);
	push_base_offset(0x5fc);
	push_base_offset(0x4f8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4f0);
	load(0x2);
	move(0x2);
	push_base_offset(0x4f8);
	push_base_offset(0x4f8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	grp1(0x50);
	push_base_offset(0x4ec);
	move_arg(0x2);
	push_base_offset(0x4ec);
	load(0x2);
	push_byte(0xa);
	push_word(0x2b0);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_byte(0x1);
	push_byte(0x0);
	push_word(0x880);
	grp1(0x56);
	push_base_offset(0x4ec);
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	grp1(0x38);
	push_base_offset(0x5fc);
	push_base_offset(0x4f8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4ec);
	load(0x2);
	move(0x2);
	push_base_offset(0x4f8);
	push_base_offset(0x4f8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x0);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0xb);
	push_byte(0x34);
	mul();
	add();
	push_word(0x25c);
	push_byte(0x18);
	push_byte(0x69);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x1);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0xc);
	push_byte(0x34);
	mul();
	add();
	push_word(0x2c6);
	push_byte(0x18);
	push_word(0x81);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x2);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0xd);
	push_byte(0x34);
	mul();
	add();
	push_word(0x348);
	push_byte(0x18);
	push_word(0x81);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x3);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0xe);
	push_byte(0x34);
	mul();
	add();
	push_word(0x3ca);
	push_byte(0x18);
	push_word(0x81);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x5);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0xf);
	push_byte(0x34);
	mul();
	add();
	push_word(0x188);
	push_byte(0x18);
	push_byte(0x69);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x6);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0x10);
	push_byte(0x34);
	mul();
	add();
	push_word(0x1f2);
	push_byte(0x18);
	push_byte(0x69);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x8);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0x11);
	push_byte(0x34);
	mul();
	add();
	push_word(0x35e);
	push_word(0x293);
	push_word(0x81);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0x9);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0x12);
	push_byte(0x34);
	mul();
	add();
	push_word(0x3e0);
	push_word(0x293);
	push_word(0x81);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0xa);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0x13);
	push_byte(0x34);
	mul();
	add();
	push_word(0x462);
	push_word(0x293);
	push_word(0x81);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x1ad0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0xb);
	push_base_offset(0x1b90);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x39f);
	push_word(0x39f);
	push_word(0x39f);
	push_word(0x39f);
	push_word(0x39f);
	cmd_0c(0x2, 0xb);
	push_base_offset(0x1b50);
	push_word(0x9f);
	push_word(0xef);
	push_word(0x13f);
	push_word(0x18f);
	push_word(0x1df);
	push_word(0x22f);
	push_word(0x9f);
	push_word(0xef);
	push_word(0x13f);
	push_word(0x18f);
	push_word(0x1df);
	cmd_0c(0x2, 0xb);
	push_base_offset(0x1bb4);
	push_byte(0x0);
	move(0x2);

L004c8:
	push_base_offset(0xa4);
	push_base_offset(0x4ec);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_base_offset(0x1ad0);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_base_offset(0x1b90);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x1b50);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x91);
	push_byte(0x19);
	push_base_offset(0xa4);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x1bb4);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0xb);
	lt();
	push_offset(L004c8);
	jc(0x0);
	push_base_offset(0x9c);
	push_word(0x1400);
	push_byte(0x1a);
	add();
	push_word(0x1000);
	push_byte(0x34);
	add();
	push_byte(0xb);
	add();
	cmd_0c(0x2, 0x2);
	push_base_offset(0x4e8);
	push_byte(0x14);
	push_byte(0x34);
	mul();
	add();
	push_word(0x35e);
	push_word(0x25d);
	push_word(0x185);
	push_byte(0x33);
	push_base_offset(0x4ec);
	push_base_offset(0x9c);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x8c);
	push_word(0x9c0);
	push_byte(0x1);
	push_byte(0x4c);
	mul();
	add();
	move(0x2);
	push_base_offset(0x8c);
	load(0x2);
	push_word(0x369);
	push_word(0x212);
	push_word(0x8c6);
	push_offset(L021cc);
	call();
	push_base_offset(0x5fc);
	push_base_offset(0x4f8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x8c);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4f8);
	push_base_offset(0x4f8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x88);
	push_base_offset(0x5fc);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x84);
	push_base_offset(0x4f8);
	load(0x2);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x600);
	push_base_offset(0x88);
	push_base_offset(0x84);
	push_base_offset(0x4fc);
	load(0x2);
	push_word(0x96);
	push_word(0x47c);
	load(0x2);
	call();
	push_base_offset(0x4f4);
	load(0x2);
	grp2(0xb8);
	push_base_offset(0x80);
	move_arg(0x2);
	push_word(0x46c);
	push_base_offset(0x80);
	load(0x2);
	move(0x2);
	push_dword(0x42ae4);
	push_base_offset(0x4f4);
	load(0x2);
	move(0x2);
	push_byte(0x0);
	push_offset(L0063b);
	jc(0x1);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L0063b);
	jc(0x0);
	push_byte(0x32);
	push_byte(0x0);
	add();
	push_word(0x4a0);
	load(0x2);
	add();
	push_offset(L018e1);
	call();

L0063b:
	push_word(0x4ac);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x2c);
	load(0x2);
	move(0x2);
	push_base_offset(0x58);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x20);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L00682:
	push_base_offset(0x18);
	load(0x2);
	push_offset(L006a7);
	jc(0x1);
	push_base_offset(0x600);
	push_base_offset(0x88);
	push_base_offset(0x84);
	push_base_offset(0x4fc);
	load(0x2);
	push_word(0x478);
	load(0x2);
	call();
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);

L006a7:
	push_base_offset(0x58);
	load(0x2);
	push_offset(L0071a);
	jc(0x1);
	push_base_offset(0x628);
	push_base_offset(0x1bdc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_word(0x470);
	load(0x2);
	call();
	push_base_offset(0x628);
	push_byte(0x20);
	push_base_offset(0x1bdc);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L01379);
	call();
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0071a);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	push_word(0x96);
	ternary();
	push_base_offset(0x1b94);
	move_arg(0x2);
	push_base_offset(0x600);
	push_base_offset(0x88);
	push_base_offset(0x84);
	push_base_offset(0x4fc);
	load(0x2);
	push_base_offset(0x1b94);
	load(0x2);
	push_word(0x47c);
	load(0x2);
	call();

L0071a:
	push_base_offset(0x58);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x80);
	load(0x2);
	push_base_offset(0x628);
	grp2(0xba);
	push_base_offset(0x1c);
	push_word(0x40c);
	load(0x2);
	move(0x2);

L00735:
	sys1(0x5f);
	push_word(0x460);
	push_byte(0x0);
	move(0x2);
	push_word(0x4f4);
	load(0x2);
	push_offset(L00d58);
	jc(0x0);
	push_word(0x404);
	load(0x2);
	push_offset(L00735);
	jc(0x0);
	push_word(0x4b0);
	load(0x2);
	push_offset(L00767);
	jc(0x1);
	push_word(0x4b0);
	push_byte(0x0);
	move(0x2);
	push_offset(L00735);
	jmp();

L00767:
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L007f2);
	jc(0x1);
	push_word(0x40c);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	neq();
	push_offset(L007f2);
	jc(0x1);
	push_word(0x450);
	load(0x2);
	push_offset(L007f2);
	jc(0x0);
	push_base_offset(0x1a90);
	push_word(0x414);
	load(0x2);
	push_offset(L00f04);
	call();
	push_base_offset(0x1a90);
	cmd_68();
	push_base_offset(0x1bbc);
	move_arg(0x2);
	push_base_offset(0x1bbc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L007f2);
	jc(0x1);
	push_byte(0x20);
	push_base_offset(0x2c);
	load(0x2);
	push_word(0x414);
	load(0x2);
	push_offset(L01770);
	call();
	push_word(0x96);
	push_offset(L0183e);
	call();
	push_base_offset(0x1b94);
	move_arg(0x2);
	push_base_offset(0x8c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x1b94);
	load(0x2);
	push_offset(L025d8);
	call();
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x418);
	push_byte(0x1);
	move(0x2);
	push_offset(L00682);
	jmp();

L007f2:
	push_base_offset(0x1c);
	push_word(0x40c);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1bbc);
	sys1(0x49);
	push_offset(L00891);
	jc(0x1);
	push_base_offset(0x1bbc);
	load(0x2);
	push_byte(0xc);
	eq();
	push_offset(L00833);
	jc(0x1);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x54);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x50);
	push_byte(0x2);
	move(0x2);
	push_offset(L00a21);
	jmp();

L00833:
	push_base_offset(0x1bbc);
	load(0x2);
	push_byte(0xb);
	eq();
	push_offset(L00859);
	jc(0x1);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x54);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x50);
	push_byte(0x0);
	move(0x2);
	push_offset(L00a21);
	jmp();

L00859:
	push_base_offset(0x1bbc);
	load(0x2);
	push_byte(0x4);
	eq();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x1bbc);
	load(0x2);
	ternary();
	push_base_offset(0x1bbc);
	move_arg(0x2);
	push_base_offset(0x1bb0);
	push_base_offset(0x1bbc);
	load(0x2);
	move(0x2);
	push_base_offset(0x1bbc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00d58);
	jc(0x0);
	push_offset(L00d44);
	jmp();

L00891:
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L008af);
	jc(0x1);
	push_base_offset(0x4e8);
	push_byte(0x15);
	push_byte(0x3);
	push_base_offset(0x194c);
	load(0x2);
	call();

L008af:
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);

L008b6:
	push_base_offset(0x7c);
	push_base_offset(0x80);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0x7c);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000007);
	eq();
	push_offset(L00938);
	jc(0x1);
	push_base_offset(0x54);
	push_base_offset(0x7c);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x50);
	push_base_offset(0x7c);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x7c);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x7c);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00a21);
	jc(0x0);
	push_offset(L008b6);
	jmp();

L00938:
	push_base_offset(0x7c);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L0098d);
	jc(0x1);
	push_base_offset(0x54);
	push_base_offset(0x7c);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x50);
	push_base_offset(0x7c);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L00a21);
	jc(0x0);
	push_offset(L008b6);
	jmp();

L0098d:
	push_base_offset(0x7c);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L00a11);
	jc(0x1);
	push_base_offset(0x54);
	push_base_offset(0x7c);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x50);
	push_base_offset(0x7c);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	eq();
	push_base_offset(0x50);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	eq();
	bool_and();
	push_offset(L008b6);
	jc(0x0);
	push_base_offset(0x24);
	push_base_offset(0x54);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	push_base_offset(0x50);
	load(0x2);
	move(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L008b6);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L018e1);
	call();
	push_offset(L008b6);
	jmp();

L00a11:
	push_base_offset(0x7c);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L008b6);
	jc(0x1);

L00a21:
	push_base_offset(0x70);
	push_base_offset(0x80);
	load(0x2);
	grp1(0xbc);
	push_word(0x4ac);
	push_base_offset(0x70);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	bool_zero();
	bool_and();
	push_base_offset(0x10);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_word(0x4ac);
	load(0x2);
	push_offset(L00735);
	jc(0x0);
	push_word(0x444);
	load(0x2);
	push_base_offset(0x70);
	push_byte(0x0);
	add();
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L00682);
	jc(0x0);
	push_word(0x444);
	load(0x2);
	push_offset(L00735);
	jc(0x0);
	push_word(0x460);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L00a9a);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_byte(0x0);
	push_byte(0x0);
	add();
	push_byte(0x0);
	push_byte(0x3);
	add();
	ternary();
	push_offset(L018e1);
	call();

L00a9a:
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	geq();
	bool_and();
	push_offset(L00bc9);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L00b07);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00b07);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L00b07);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00b07);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	eq();
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x4);
	neq();
	bool_and();
	push_offset(L00b07);
	jc(0x0);
	push_byte(0x78);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L00b07:
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00d58);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00b3f);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L00b95);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L00c02);
	jc(0x0);

L00b3f:
	push_base_offset(0x80);
	load(0x2);
	push_byte(0x0);
	sys1(0xa8);
	push_base_offset(0x54);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	push_base_offset(0x4f4);
	load(0x2);
	push_word(0x474);
	load(0x2);
	call();
	push_base_offset(0x1bac);
	move_arg(0x2);
	push_base_offset(0x1bb0);
	move_arg(0x2);
	push_base_offset(0x80);
	load(0x2);
	push_byte(0x1);
	sys1(0xa8);
	push_base_offset(0x1bb0);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00d58);
	jc(0x0);
	push_base_offset(0x1bb0);
	load(0x2);
	push_dword(0x7fffffff);
	eq();
	push_offset(L00682);
	jc(0x0);
	push_offset(L00d44);
	jmp();

L00b95:
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x4);
	eq();
	push_offset(L00b3f);
	jc(0x1);
	push_byte(0x20);
	push_offset(L00e3d);
	call();
	push_byte(0x20);
	push_base_offset(0x1950);
	load(0x2);
	push_offset(L00ee9);
	call();
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x418);
	push_byte(0x1);
	move(0x2);
	push_offset(L00682);
	jmp();

L00bc9:
	push_word(0x96);
	push_offset(L0183e);
	call();
	push_base_offset(0x1b94);
	move_arg(0x2);
	push_base_offset(0x8c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x1b94);
	load(0x2);
	push_offset(L025d8);
	call();
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x418);
	push_byte(0x1);
	move(0x2);
	push_offset(L00682);
	jmp();

L00c02:
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L00c39);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	eq();
	push_offset(L00c39);
	jc(0x0);
	push_base_offset(0x4e8);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x0);
	push_byte(0x2);
	push_base_offset(0x194c);
	load(0x2);
	call();

L00c39:
	push_base_offset(0x4e8);
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	push_byte(0x1);
	push_byte(0x2);
	push_base_offset(0x194c);
	load(0x2);
	call();
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_offset(L00c94);
	jc(0x0);
	push_word(0x96);
	push_offset(L0183e);
	call();
	push_base_offset(0x1b94);
	move_arg(0x2);
	push_base_offset(0x8c);
	load(0x2);
	push_byte(0x0);
	push_word(0x1400);
	push_byte(0x21);
	add();
	push_base_offset(0x1b94);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	push_offset(L02364);
	call();
	push_offset(L00cc0);
	jmp();

L00c94:
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	eq();
	push_offset(L00cc0);
	jc(0x1);
	push_word(0x96);
	push_offset(L0183e);
	call();
	push_base_offset(0x1b94);
	move_arg(0x2);
	push_base_offset(0x8c);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0x1b94);
	load(0x2);
	push_offset(L025d8);
	call();

L00cc0:
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	eq();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x50);
	load(0x2);
	ternary();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x18);
	push_byte(0x0);
	move(0x2);
	push_word(0x418);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_base_offset(0x18);
	load(0x2);
	bool_or();
	move(0x2);
	push_offset(L00682);
	jmp();
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x1);
	move(0x2);
	push_word(0x418);
	push_byte(0x1);
	move(0x2);
	push_offset(L00682);
	jmp();
	push_byte(0x20);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	push_offset(L01770);
	call();
	push_base_offset(0x2c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x1);
	move(0x2);
	push_word(0x418);
	push_byte(0x1);
	move(0x2);
	push_offset(L00682);
	jmp();

L00d44:
	push_base_offset(0x600);
	push_base_offset(0x88);
	push_base_offset(0x84);
	push_base_offset(0x4fc);
	load(0x2);
	push_word(0x478);
	load(0x2);
	call();

L00d58:
	push_dword(0x42ae4);
	push_byte(0x0);
	move(0x2);
	push_word(0x460);
	push_byte(0x1);
	move(0x2);
	push_word(0x4ac);
	push_byte(0x0);
	move(0x2);
	push_word(0x46c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x80);
	load(0x2);
	grp1(0xb9);

L00d7d:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L00d93);
	jc(0x0);
	push_word(0x508);
	load(0x2);
	push_offset(L00d7d);
	jc(0x0);

L00d93:
	push_dword(0x42ac8);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00db9);
	jc(0x0);
	push_base_offset(0x600);
	push_base_offset(0x88);
	push_base_offset(0x84);
	push_base_offset(0x4fc);
	load(0x2);
	push_word(0x96);
	push_word(0x480);
	load(0x2);
	call();

L00db9:
	push_base_offset(0x4f4);
	load(0x2);
	grp1(0x81);
	push_base_offset(0x4f0);
	load(0x2);
	grp1(0x51);
	push_base_offset(0x4ec);
	load(0x2);
	grp1(0x51);
	push_base_offset(0x8c);
	load(0x2);
	push_offset(L02199);
	call();
	push_base_offset(0x1bb8);
	push_word(0x1400);
	push_byte(0x5e);
	add();
	move(0x2);
	push_base_offset(0x1bb4);
	push_byte(0x0);
	move(0x2);

L00de9:
	push_base_offset(0x1bb8);
	load(0x2);
	grp1(0x12);
	push_base_offset(0x1bb8);
	load(0x2);
	push_byte(0x1);
	add();
	grp1(0x12);
	push_base_offset(0x1bb8);
	push_base_offset(0x1bb8);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x1bb4);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1bb4);
	load(0x2);
	push_byte(0xb);
	lt();
	push_offset(L00de9);
	jc(0x0);
	push_word(0x418);
	push_byte(0x1);
	move(0x2);
	sys1(0x41);
	sys1(0x41);
	push_base_offset(0x1bb0);
	load(0x2);
	push_base_offset(0x1bac);
	load(0x2);
	load_base();
	push_word(0x1be0);
	sub();
	store_base();
	ret();

L00e3d:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x0);
	add();
	push_byte(0x11);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x1);
	add();
	push_byte(0x20);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x2);
	add();
	push_byte(0x48);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x3);
	add();
	push_byte(0x41);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x4);
	add();
	push_byte(0x52);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x5);
	add();
	push_byte(0x4f);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x6);
	add();
	push_byte(0x4b);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x7);
	add();
	push_byte(0x0);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x8);
	add();
	push_byte(0x53);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0x9);
	add();
	push_byte(0x4c);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0xa);
	add();
	push_byte(0x54);
	move(0x0);
	push_byte(0x20);
	push_word(0xb6);
	add();
	push_byte(0xb);
	add();
	push_byte(0x45);
	move(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00ee9:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L01cb2);
	call();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00f04:
	load_base();
	push_word(0x1e6);
	add();
	store_base();
	push_base_offset(0x1e2);
	move_arg(0x2);
	push_base_offset(0x1e6);
	move_arg(0x2);
	push_base_offset(0xda);
	push_byte(0x40);
	memclr();
	push_base_offset(0x9a);
	push_byte(0x40);
	memclr();
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L011b1);
	jc(0x1);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x70);
	geq();
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x7b);
	leq();
	bool_and();
	push_offset(L00f59);
	jc(0x1);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x70);
	sub();
	push_byte(0x1);
	add();
	push_base_offset(0xda);
	push_string("F%d");
	cmd_6f();
	push_offset(L011b1);
	jmp();

L00f59:
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x60);
	geq();
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x6f);
	leq();
	bool_and();
	push_offset(L00fd8);
	jc(0x1);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x69);
	leq();
	push_offset(L00f8f);
	jc(0x1);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x60);
	sub();
	push_base_offset(0xda);
	push_string("Num_%d");
	cmd_6f();
	push_offset(L011b1);
	jmp();

L00f8f:
	push_base_offset(0x1da);
	push_string("Num_＊");
	push_string("Num_＋");
	push_byte(0x0);
	push_string("Num_－");
	push_string("Num_．");
	push_string("Num_／");
	cmd_0c(0x2, 0x6);
	push_base_offset(0x1da);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x6a);
	sub();
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L011b1);
	jc(0x1);
	push_base_offset(0xda);
	push_base_offset(0x1da);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x6a);
	sub();
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	cmd_6a();
	push_offset(L011b1);
	jmp();

L00fd8:
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x30);
	geq();
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x39);
	leq();
	bool_and();
	push_offset(L01001);
	jc(0x1);
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x30);
	sub();
	push_base_offset(0xda);
	push_string("%d");
	cmd_6f();
	push_offset(L011b1);
	jmp();

L01001:
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x41);
	geq();
	push_base_offset(0x1e2);
	load(0x2);
	push_byte(0x5a);
	leq();
	bool_and();
	push_offset(L01032);
	jc(0x1);
	push_base_offset(0xda);
	push_byte(0x0);
	add();
	push_base_offset(0x1e2);
	load(0x2);
	move(0x0);
	push_base_offset(0xda);
	push_byte(0x1);
	add();
	push_byte(0x0);
	move(0x0);
	push_offset(L011b1);
	jmp();

L01032:
	push_base_offset(0x5a);
	push_word(0xbd);
	push_word(0xde);
	push_word(0xdc);
	push_word(0xc0);
	push_word(0xdb);
	push_word(0xbb);
	push_word(0xba);
	push_word(0xdd);
	push_word(0xbc);
	push_word(0xbe);
	push_word(0xbf);
	push_word(0xe2);
	cmd_0c(0x0, 0xc);
	push_base_offset(0x1da);
	push_string("－");
	push_string("＾");
	push_string("￥");
	push_string("＠");
	push_string("［");
	push_string("；");
	push_string("：");
	push_string("］");
	push_string("，");
	push_string("．");
	push_string("／");
	push_string("＼");
	cmd_0c(0x2, 0xc);
	push_base_offset(0x1de);
	push_byte(0x0);
	move(0x2);

L0108d:
	push_base_offset(0x5a);
	push_base_offset(0x1de);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_base_offset(0x1e2);
	load(0x2);
	push_word(0xff);
	and();
	neq();
	push_offset(L010c1);
	jc(0x0);
	push_base_offset(0xda);
	push_base_offset(0x1da);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	cmd_6a();
	push_offset(L011b1);
	jmp();

L010c1:
	push_base_offset(0x1de);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0xc);
	lt();
	push_offset(L0108d);
	jc(0x0);
	push_base_offset(0x5a);
	push_byte(0x0);
	add();
	push_byte(0x8);
	push_byte(0x9);
	push_byte(0xd);
	push_byte(0x10);
	push_byte(0x11);
	push_byte(0x12);
	push_byte(0x1b);
	push_byte(0x20);
	push_byte(0x21);
	push_byte(0x22);
	cmd_0c(0x0, 0xa);
	push_base_offset(0x5a);
	push_byte(0xa);
	add();
	push_byte(0x23);
	push_byte(0x24);
	push_byte(0x25);
	push_byte(0x26);
	push_byte(0x27);
	push_byte(0x28);
	push_byte(0x2d);
	push_byte(0x2e);
	push_byte(0x2f);
	cmd_0c(0x0, 0x9);
	push_base_offset(0x1da);
	push_byte(0x0);
	push_byte(0x2);
	shl();
	add();
	push_string("BackSpace");
	push_string("Tab");
	push_string("Enter");
	push_string("Shift");
	push_string("Ctrl");
	push_string("Alt");
	push_string("Esc");
	push_string("Space");
	push_string("PageUp");
	push_string("PageDown");
	cmd_0c(0x2, 0xa);
	push_base_offset(0x1da);
	push_byte(0xa);
	push_byte(0x2);
	shl();
	add();
	push_string("End");
	push_string("Home");
	push_string("←");
	push_string("↑");
	push_string("→");
	push_string("↓");
	push_string("Insert");
	push_string("Delete");
	push_string("Help");
	cmd_0c(0x2, 0x9);
	push_base_offset(0x1de);
	push_byte(0x0);
	move(0x2);

L0116b:
	push_base_offset(0x5a);
	push_base_offset(0x1de);
	load(0x2);
	add();
	load(0x0);
	push_base_offset(0x1e2);
	load(0x2);
	neq();
	push_offset(L01197);
	jc(0x0);
	push_base_offset(0xda);
	push_base_offset(0x1da);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	cmd_6a();
	push_offset(L011b1);
	jmp();

L01197:
	push_base_offset(0x1de);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x13);
	lt();
	push_offset(L0116b);
	jc(0x0);

L011b1:
	push_base_offset(0x12);
	push_string("0");
	cmd_6a();
	push_base_offset(0x10);
	push_string("０");
	cmd_6a();
	push_base_offset(0x1a);
	push_string("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");
	move(0x2);
	push_base_offset(0x16);
	push_string("０１２３４５６７８９ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ");
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0x9a);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0xda);
	move(0x2);
	push_base_offset(0x1de);
	push_byte(0x0);
	move(0x2);

L011e6:
	push_base_offset(0x12);
	push_base_offset(0x1a);
	load(0x2);
	push_base_offset(0x1de);
	load(0x2);
	add();
	push_byte(0x1);
	memcpy();
	push_base_offset(0x10);
	push_base_offset(0x16);
	load(0x2);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x2);
	mul();
	add();
	push_byte(0x2);
	memcpy();
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x12);
	push_base_offset(0x10);
	cmd_67();
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0xc);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	push_base_offset(0x1de);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1de);
	load(0x2);
	push_byte(0xa);
	push_byte(0x1a);
	add();
	push_byte(0x1a);
	add();
	lt();
	push_offset(L011e6);
	jc(0x0);
	push_base_offset(0x1e6);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	cmd_6a();
	load_base();
	push_word(0x1e6);
	sub();
	store_base();
	ret();

L0126c:
	load_base();
	push_byte(0x28);
	add();
	store_base();
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x24);
	load(0x2);
	grp2(0x1f);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	push_base_offset(0x24);
	load(0x2);
	push_byte(0x1);
	add();
	grp2(0x1f);
	push_base_offset(0x18);
	push_base_offset(0x24);
	load(0x2);
	grp1(0x16);
	push_base_offset(0x1c);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	push_byte(0x50);
	push_byte(0x0);
	push_byte(0x1);
	grp2(0x9b);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x18);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x4);
	add();
	sub();
	push_byte(0x1);
	sar();
	push_base_offset(0x18);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x12);
	push_byte(0x4);
	add();
	sub();
	push_byte(0x1);
	sar();
	push_base_offset(0x20);
	load(0x2);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x12);
	push_byte(0x50);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_byte(0xc);
	push_byte(0xc);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x0);
	grp3(0x9c);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	push_base_offset(0x18);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x4);
	add();
	sub();
	push_byte(0x1);
	sar();
	push_base_offset(0x18);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x12);
	push_byte(0x4);
	add();
	sub();
	push_byte(0x1);
	sar();
	push_base_offset(0x20);
	load(0x2);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x0);
	push_dword(0xffffff);
	push_byte(0x0);
	push_byte(0x12);
	push_byte(0x50);
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_byte(0xc);
	push_byte(0xc);
	push_byte(0x0);
	push_word(0x80);
	push_byte(0x0);
	grp3(0x9c);
	load_base();
	push_byte(0x28);
	sub();
	store_base();
	ret();

L01379:
	load_base();
	push_word(0x2ac);
	add();
	store_base();
	push_base_offset(0x2a0);
	move_arg(0x2);
	push_base_offset(0x2a4);
	move_arg(0x2);
	push_base_offset(0x2a8);
	move_arg(0x2);
	push_base_offset(0x2ac);
	move_arg(0x2);
	push_base_offset(0x29c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x29c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x29c);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x29c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x290);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x29c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x290);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x34);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x29c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x250);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x29c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x250);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_base_offset(0x2ac);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x0);
	add();
	push_byte(0xb);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x8);
	add();
	push_base_offset(0x18c);
	load(0x2);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0xc);
	add();
	push_base_offset(0x2a0);
	load(0x2);
	move(0x2);
	push_base_offset(0x290);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2ac);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	push_byte(0x40);
	mul();
	add();
	push_base_offset(0x290);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x164);
	push_word(0x39f);
	push_word(0x39f);
	push_word(0x39f);
	push_word(0x39f);
	push_word(0x39f);
	cmd_0c(0x2, 0xb);
	push_base_offset(0x124);
	push_word(0x9f);
	push_word(0xef);
	push_word(0x13f);
	push_word(0x18f);
	push_word(0x1df);
	push_word(0x22f);
	push_word(0x9f);
	push_word(0xef);
	push_word(0x13f);
	push_word(0x18f);
	push_word(0x1df);
	cmd_0c(0x2, 0xb);
	push_base_offset(0x180);
	push_word(0x1400);
	push_byte(0x5e);
	add();
	move(0x2);
	push_base_offset(0x17c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x180);
	push_word(0x1400);
	push_byte(0x5e);
	add();
	push_byte(0x2);
	push_base_offset(0x17c);
	load(0x2);
	mul();
	add();
	move(0x2);

L0158a:
	push_base_offset(0x17c);
	load(0x2);
	push_offset(L016c3);
	call();
	push_base_offset(0x184);
	move_arg(0x2);
	push_base_offset(0xe0);
	push_base_offset(0x2a8);
	load(0x2);
	push_word(0xb6);
	add();
	push_base_offset(0x184);
	load(0x2);
	add();
	load(0x0);
	push_offset(L00f04);
	call();
	push_base_offset(0x180);
	load(0x2);
	push_word(0x1400);
	push_byte(0x17);
	add();
	push_base_offset(0xe0);
	push_offset(L0126c);
	call();
	push_base_offset(0x250);
	push_byte(0x0);
	add();
	push_base_offset(0x4);
	load(0x2);
	bool_zero();
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x8);
	add();
	push_base_offset(0x164);
	push_base_offset(0x17c);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x250);
	push_byte(0xc);
	add();
	push_base_offset(0x124);
	push_base_offset(0x17c);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x180);
	load(0x2);
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x180);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x180);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x250);
	push_byte(0x30);
	add();
	push_base_offset(0x250);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	load(0x2);
	push_base_offset(0x17c);
	load(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x250);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x180);
	push_base_offset(0x180);
	load(0x2);
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x17c);
	push_base_offset(0x17c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x17c);
	load(0x2);
	push_byte(0xb);
	lt();
	push_offset(L0158a);
	jc(0x0);
	push_base_offset(0x250);
	push_byte(0x34);
	add();
	push_byte(0x1);
	move(0x2);
	load_base();
	push_word(0x2ac);
	sub();
	store_base();
	ret();

L016c3:
	load_base();
	push_byte(0x30);
	add();
	store_base();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x3);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x4);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x5);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x6);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x8);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x9);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xa);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0xa);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xb);
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x30);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	load_base();
	push_byte(0x30);
	sub();
	store_base();
	ret();

L01770:
	load_base();
	push_byte(0x1c);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_offset(L016c3);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);

L017a0:
	push_base_offset(0x1c);
	load(0x2);
	push_word(0xb6);
	add();
	push_base_offset(0xc);
	load(0x2);
	add();
	load(0x0);
	push_base_offset(0x14);
	load(0x2);
	push_word(0xff);
	and();
	neq();
	push_offset(L017d1);
	jc(0x0);
	push_base_offset(0x10);
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_byte(0x1);
	move(0x2);

L017d1:
	push_base_offset(0xc);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	lt();
	push_base_offset(0x4);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L017a0);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L0181e);
	jc(0x1);
	push_base_offset(0x1c);
	load(0x2);
	push_word(0xb6);
	add();
	push_base_offset(0x10);
	load(0x2);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_word(0xb6);
	add();
	push_base_offset(0x8);
	load(0x2);
	add();
	load(0x0);
	move(0x0);

L0181e:
	push_base_offset(0x1c);
	load(0x2);
	push_word(0xb6);
	add();
	push_base_offset(0x8);
	load(0x2);
	add();
	push_base_offset(0x14);
	load(0x2);
	push_word(0xff);
	and();
	move(0x0);
	load_base();
	push_byte(0x1c);
	sub();
	store_base();
	ret();

L0183e:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L01862);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L0187e);
	jmp();

L01862:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L0187e);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L0187e:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1f4);
	add();
	move(0x2);

L018a8:
	sys1(0x4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	geq();
	push_offset(L018cf);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L018cf);
	jc(0x0);
	sys1(0x5f);
	push_offset(L018a8);
	jmp();

L018cf:
	sys1(0x5f);
	push_word(0x450);
	load(0x2);
	push_offset(L018cf);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L018e1:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L01c37);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L01c37);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L01c37);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L01c37);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L01a90);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L01a03);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L01a61);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L01a32);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L01abf);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L01aee);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L01b1d);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L01b4c);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L01b7b);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L01baa);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L01bd9);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L01c08);
	jc(0x0);
	push_offset(L01ca7);
	jmp();
	push_offset(L01c37);
	jmp();

L01a03:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01a32:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01a61:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01a90:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01abf:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01aee:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01b1d:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01b4c:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01b7b:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01baa:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01bd9:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01c08:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L01c37);
	jmp();

L01c37:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L01c72);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L01c72);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L01c72:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L01ca7:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L01cb2:
	load_base();
	push_word(0xd0);
	add();
	store_base();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xcc);
	push_word(0x91c);
	load(0x2);
	move(0x2);
	push_word(0x91c);
	push_base_offset(0xd0);
	load(0x2);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x20);
	push_word(0xb6);
	add();
	move(0x2);
	push_base_offset(0x3c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x38);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x34);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x30);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc4);
	push_byte(0x0);
	move(0x2);

L01d0d:
	push_base_offset(0x3c);
	push_base_offset(0x3c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0xd);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x38);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x11);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x34);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x26);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x30);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x28);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x2c);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x21);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x22);
	eq();
	bool_or();
	move(0x2);
	push_base_offset(0xc4);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0xc);
	lt();
	push_offset(L01d0d);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01e19);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L01e67);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L01ed7);
	jc(0x0);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L01f21);
	jc(0x0);
	push_offset(L020c1);
	jmp();

L01e19:
	push_base_offset(0xc0);
	push_byte(0xe);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0xf);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01f6b);
	jmp();

L01e67:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1);
	ternary();
	push_base_offset(0xc8);
	move_arg(0x2);
	push_base_offset(0x80);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x3);
	push_base_offset(0xd0);
	load(0x2);
	push_offset(L020cd);
	call();
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01f6b);
	jmp();

L01ed7:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01f6b);
	jmp();

L01f21:
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x40);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0xc0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x80);
	push_base_offset(0xc0);
	sys1(0x1b);
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x3c);
	load(0x2);
	push_byte(0x0);
	push_byte(0xd);
	ternary();
	push_base_offset(0x80);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_word(0x100);
	push_base_offset(0x80);
	sys1(0x1b);
	push_offset(L01f6b);
	jmp();

L01f6b:
	push_base_offset(0x24);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_word(0x200);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x34);
	load(0x2);
	push_offset(L01fa6);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x26);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01fa6:
	push_base_offset(0x2c);
	load(0x2);
	push_offset(L01fc9);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x21);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L01fc9:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_word(0x1000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_offset(L02005);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02005:
	push_base_offset(0x28);
	load(0x2);
	push_offset(L02028);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x22);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L02028:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_word(0x2000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x4);
	push_base_offset(0x24);
	move(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x0);
	push_word(0xff);
	and();
	push_byte(0x0);
	neq();
	push_offset(L0207c);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x0);
	push_word(0xff);
	and();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L0207c:
	push_base_offset(0x38);
	load(0x2);
	push_offset(L0209f);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x11);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);

L0209f:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_dword(-0x80000000);
	push_base_offset(0x24);
	sys1(0x1b);
	push_base_offset(0x24);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_byte(0x1);
	push_base_offset(0x24);
	sys1(0x62);

L020c1:
	push_base_offset(0xcc);
	load(0x2);
	load_base();
	push_word(0xd0);
	sub();
	store_base();
	ret();

L020cd:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x24);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xe);
	move(0x2);
	push_base_offset(0x24);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xf);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x38);
	load(0x2);
	move(0x2);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);

L02120:
	push_byte(0x20);
	push_word(0xc6);
	add();
	push_base_offset(0x28);
	load(0x2);
	add();
	load(0x0);
	push_base_offset(0x34);
	load(0x2);
	neq();
	push_offset(L0216b);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x24);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L0216b:
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x3);
	lt();
	push_offset(L02120);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x2c);
	load(0x2);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();

L02199:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L021c6);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	grp1(0x51);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4c);
	memclr();

L021c6:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L021cc:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L02199);
	call();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0xc);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x14);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	grp1(0x50);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	grp1(0x38);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L022b5);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x33);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0xc);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x10);
	add();
	push_base_offset(0x4);
	load(0x2);
	move(0x2);

L022b5:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L022f4);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x36);

L022f4:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02329);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp1(0x34);

L02329:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0235e);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	grp2(0x31);

L0235e:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L02364:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L025d2);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_offset(L0276f);
	call();
	push_offset(L0254e);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L024d0);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L024d0);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L02451);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	div();
	move(0x2);
	push_offset(L0249f);
	jmp();

L02451:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L0249f);
	jc(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	sub();
	push_base_offset(0x14);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	div();
	move(0x2);

L0249f:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x57);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x38);
	push_byte(0x0);
	grp1(0x0);
	push_offset(L0254e);
	jmp();

L024d0:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x20);
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_byte(0x1);
	push_word(0x100);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	grp1(0x56);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_dword(0x7fffffff);
	push_byte(0x0);
	push_base_offset(0x18);
	load(0x2);
	grp1(0x38);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x1);
	grp1(0x54);

L0254e:
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x18);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0xc);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x10);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);

L025d2:
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L025d8:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02769);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02769);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L0276f);
	call();
	push_offset(L0264a);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x14);
	memclr();
	push_offset(L02769);
	jmp();

L0264a:
	push_base_offset(0x4);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02712);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L026c1);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	sub();
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	div();
	move(0x2);
	push_offset(L0270e);
	jmp();

L026c1:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L026d7);
	jc(0x1);
	push_offset(L02712);
	jmp();

L026d7:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x2);
	eq();
	push_offset(L0270e);
	jc(0x1);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	div();
	move(0x2);

L0270e:
	push_offset(L02736);
	jmp();

L02712:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x18);
	add();
	push_byte(0x2);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x20);
	add();
	move_arg(0x2);

L02736:
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x10);
	add();
	push_base_offset(0x8);
	load(0x2);
	move(0x2);

L02769:
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L0276f:
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L027e5);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x2);
	push_byte(0x1);
	sub();
	move(0x2);

L0279e:
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	leq();
	push_offset(L027e5);
	jc(0x0);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L027d4);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x1);
	move(0x2);
	push_offset(L027e5);
	jmp();

L027d4:
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	push_offset(L0279e);
	jmp();

L027e5:
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L02864);
	jc(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L02864);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L02850);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x24);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x14);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_offset(L02864);
	jmp();

L02850:
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_offset(L0276f);
	call();
	push_base_offset(0x4);
	move_arg(0x2);

L02864:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
