	load_base();
	push_word(0xe0);
	add();
	store_base();
	push_word(0x4f8);
	push_word(0x4f8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);

L00013:
	push_base_offset(0xcc);
	sys1(0x49);
	push_offset(L00023);
	jc(0x0);
	sys1(0x5f);
	push_offset(L00013);
	jmp();

L00023:
	push_base_offset(0xc8);
	push_dword(0x227a4);
	push_base_offset(0xcc);
	load(0x2);
	push_word(0x1c0);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00ca3);
	jc(0x1);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x10);
	add();
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L00c97);
	jc(0x1);
	push_base_offset(0xc0);
	push_base_offset(0xcc);
	load(0x2);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0xc4);
	push_dword(0x2cd64);
	push_base_offset(0xc0);
	load(0x2);
	push_byte(0x34);
	mul();
	add();
	move(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00c97);
	jc(0x1);
	push_base_offset(0xbc);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x50);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x30);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4c);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x74);
	push_base_offset(0xc8);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x6c);
	push_base_offset(0xc8);
	load(0x2);
	push_word(0x140);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x54);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x14);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc8);
	load(0x2);
	push_word(0x150);
	add();
	move(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0xb8);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_base_offset(0xb8);
	ternary();
	push_base_offset(0x98);
	move_arg(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x1);
	push_byte(0x2);
	ternary();
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	lt();
	push_base_offset(0x54);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x54);
	load(0x2);
	ternary();
	push_base_offset(0x48);
	move_arg(0x2);
	push_base_offset(0x44);
	push_word(0x7d00);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x48);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x40);
	push_word(0x7d00);
	push_base_offset(0x48);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x3c);
	push_word(0x7d00);
	not();
	push_byte(0x1);
	add();
	push_base_offset(0x48);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x38);
	push_word(0x7d00);
	push_base_offset(0x48);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x34);
	push_word(0x7e00);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x30);
	push_word(0x7fff);
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x80);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x82);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x8f);
	push_byte(0x1);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x0);
	grp1(0x35);
	push_base_offset(0x28);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xd8);
	push_byte(0x0);
	move(0x2);

L001e9:
	push_base_offset(0x24);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x20);
	grp2(0x38);
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	push_base_offset(0x24);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x94);
	push_byte(0x4);
	add();
	push_base_offset(0x24);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	sub();
	move(0x2);
	push_base_offset(0x94);
	push_byte(0x8);
	add();
	push_base_offset(0x24);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L002d6);
	jc(0x1);
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x4);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x8);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x8);
	add();
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x70);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_base_offset(0x74);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x68);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	sub();
	move(0x2);
	push_offset(L00511);
	jmp();

L002d6:
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L00344);
	jc(0x1);
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x8);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x70);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x68);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	move(0x2);
	push_offset(L00511);
	jmp();

L00344:
	push_base_offset(0xd8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_offset(L003ce);
	jc(0x1);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x3);
	eq();
	push_offset(L003f7);
	jc(0x1);
	push_byte(0x2);
	sys1(0x2);
	push_base_offset(0xdc);
	move_arg(0x2);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	lt();
	bool_and();
	push_offset(L003f7);
	jc(0x0);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x1);
	eq();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	gt();
	bool_and();
	push_offset(L003f7);
	jc(0x0);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L003f7);
	jmp();

L003ce:
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L00476);
	jc(0x0);
	push_base_offset(0xd8);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x1);
	sub();
	geq();
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x2);
	eq();
	bool_and();
	push_offset(L00476);
	jc(0x1);

L003f7:
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x2);
	sar();
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x8);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x2);
	sar();
	move(0x2);
	push_base_offset(0x70);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x2);
	sar();
	move(0x2);
	push_base_offset(0x68);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_byte(0x2);
	sar();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x2);
	sar();
	move(0x2);
	push_offset(L00511);
	jmp();

L00476:
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	eq();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x1);
	shl();
	not();
	push_byte(0x1);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x1);
	shl();
	ternary();
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	move_arg(0x2);
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);
	push_base_offset(0x84);
	push_byte(0x8);
	add();
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);
	push_base_offset(0x70);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);
	push_base_offset(0x68);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);
	push_base_offset(0x2c);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x2c);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L00511:
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00729);
	jc(0x0);
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	load(0x2);
	cmd_43();
	push_base_offset(0x64);
	move_arg(0x2);
	push_base_offset(0x64);
	load(0x2);
	push_byte(0x5a);
	push_byte(0x10);
	shl();
	eq();
	push_base_offset(0x64);
	load(0x2);
	push_word(0x10e);
	push_byte(0x10);
	shl();
	eq();
	or();
	push_byte(0x0);
	push_base_offset(0x64);
	load(0x2);
	ternary();
	push_base_offset(0x64);
	move_arg(0x2);
	push_base_offset(0x64);
	load(0x2);
	push_word(0xb4);
	push_byte(0x10);
	shl();
	gt();
	push_offset(L00590);
	jc(0x0);
	push_base_offset(0x64);
	load(0x2);
	push_byte(0x5a);
	push_byte(0x10);
	shl();
	gt();
	push_base_offset(0x64);
	load(0x2);
	push_word(0xb4);
	push_byte(0x10);
	shl();
	sub();
	push_base_offset(0x64);
	load(0x2);
	ternary();
	push_base_offset(0x64);
	move_arg(0x2);
	push_offset(L005ba);
	jmp();

L00590:
	push_base_offset(0x64);
	load(0x2);
	push_word(0x10e);
	push_byte(0x10);
	shl();
	gt();
	push_base_offset(0x64);
	load(0x2);
	push_word(0x168);
	push_byte(0x10);
	shl();
	sub();
	push_base_offset(0x64);
	load(0x2);
	push_word(0xb4);
	push_byte(0x10);
	shl();
	sub();
	ternary();
	push_base_offset(0x64);
	move_arg(0x2);

L005ba:
	push_base_offset(0x64);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	cos();
	push_base_offset(0x60);
	move_arg(0x2);
	push_base_offset(0x64);
	load(0x2);
	not();
	push_byte(0x1);
	add();
	sin();
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0xd0);
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	add();
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x44);
	load(0x2);
	lt();
	push_base_offset(0x44);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	gt();
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xb8);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x10);
	shl();
	push_base_offset(0x54);
	load(0x2);
	push_base_offset(0x5c);
	load(0x2);
	mul();
	sub();
	move(0x2);
	push_base_offset(0xd0);
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	push_base_offset(0x94);
	push_byte(0x4);
	add();
	load(0x2);
	add();
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	add();
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	lt();
	push_base_offset(0x3c);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	gt();
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xb8);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x10);
	shl();
	push_base_offset(0x54);
	load(0x2);
	push_base_offset(0x60);
	load(0x2);
	mul();
	sub();
	move(0x2);
	push_base_offset(0xd0);
	push_base_offset(0x94);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x84);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x1);
	sar();
	add();
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	lt();
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	gt();
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xb8);
	push_byte(0x0);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);

L00729:
	push_base_offset(0xd0);
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x84);
	push_byte(0x0);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x44);
	load(0x2);
	lt();
	push_base_offset(0x44);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x40);
	load(0x2);
	gt();
	push_base_offset(0x40);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xb8);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0xd0);
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	push_base_offset(0x94);
	push_byte(0x4);
	add();
	load(0x2);
	add();
	push_base_offset(0x84);
	push_byte(0x4);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x3c);
	load(0x2);
	lt();
	push_base_offset(0x3c);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	gt();
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xb8);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0xd0);
	push_base_offset(0x94);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x84);
	push_byte(0x8);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x34);
	load(0x2);
	lt();
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x30);
	load(0x2);
	gt();
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0xd0);
	load(0x2);
	ternary();
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xb8);
	push_byte(0x1);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x10);
	shl();
	move(0x2);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x41);
	push_base_offset(0x74);
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x81);
	push_base_offset(0x70);
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x0);
	grp1(0x35);
	push_base_offset(0x74);
	push_base_offset(0x74);
	load(0x2);
	push_base_offset(0x70);
	load(0x2);
	add();
	push_word(0x168);
	mod();
	move(0x2);
	push_base_offset(0x74);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x74);
	load(0x2);
	push_base_offset(0x74);
	load(0x2);
	push_word(0x168);
	add();
	ternary();
	push_base_offset(0x74);
	move_arg(0x2);
	push_base_offset(0x6c);
	push_base_offset(0x6c);
	load(0x2);
	push_base_offset(0x68);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_word(0x100);
	leq();
	push_base_offset(0x6c);
	load(0x2);
	push_word(0x100);
	ternary();
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0xbc);
	load(0x2);
	push_base_offset(0x58);
	load(0x2);
	push_base_offset(0x98);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_word(0x100);
	push_base_offset(0x2c);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_base_offset(0xc8);
	load(0x2);
	push_word(0x13c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0xc8);
	add();
	load(0x2);
	bool_and();
	push_word(0x710);
	grp1(0x29);
	push_base_offset(0xdc);
	move_arg(0x2);
	push_word(0x518);
	push_word(0x518);
	load(0x2);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x1);
	eq();
	bool_or();
	move(0x2);
	push_word(0x4f4);
	load(0x2);
	push_offset(L00a09);
	jc(0x0);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_offset(L00a09);
	jc(0x0);
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L00a09);
	jc(0x0);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00a09);
	jc(0x0);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x2);
	eq();
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x3);
	eq();
	bool_or();
	push_offset(L009df);
	jc(0x1);
	push_base_offset(0x28);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xe0);
	push_base_offset(0x28);
	load(0x2);
	push_byte(0x3);
	geq();
	move(0x2);
	push_base_offset(0xe0);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x28);
	load(0x2);
	ternary();
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0xe0);
	load(0x2);
	push_offset(L001e9);
	jc(0x1);

L009df:
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L001e9);
	jc(0x0);
	push_base_offset(0xd8);
	push_base_offset(0xd8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xd8);
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	lt();
	push_offset(L001e9);
	jc(0x0);

L00a09:
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00c8f);
	jc(0x0);
	push_base_offset(0x4c);
	load(0x2);
	push_byte(0x1);
	eq();
	push_offset(L00ba8);
	jc(0x1);
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L00a5e);
	jc(0x1);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x41);
	push_base_offset(0x74);
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x81);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x0);
	grp1(0x35);
	push_offset(L00c8f);
	jmp();

L00a5e:
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x94);
	push_byte(0x4);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x94);
	push_byte(0x8);
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x4);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x74);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x6c);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x68);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_word(0x100);
	leq();
	push_base_offset(0x6c);
	load(0x2);
	push_word(0x100);
	ternary();
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0xbc);
	load(0x2);
	push_base_offset(0x94);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	push_base_offset(0x94);
	push_byte(0x4);
	add();
	load(0x2);
	add();
	push_byte(0x10);
	shl();
	push_base_offset(0x94);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	grp2(0x33);
	push_base_offset(0xbc);
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	grp1(0x32);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x41);
	push_base_offset(0x74);
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x81);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x0);
	grp1(0x35);
	push_offset(L00c8f);
	jmp();

L00ba8:
	push_base_offset(0x50);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L00c8f);
	jc(0x0);
	push_base_offset(0x74);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x44);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x18);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x6c);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x68);
	add();
	load(0x2);
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x1c);
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x6c);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0x6c);
	load(0x2);
	push_word(0x100);
	leq();
	push_base_offset(0x6c);
	load(0x2);
	push_word(0x100);
	ternary();
	push_base_offset(0x6c);
	move_arg(0x2);
	push_base_offset(0xbc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x20);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_word(0x2d0);
	push_byte(0x1);
	sar();
	push_byte(0x1);
	sub();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x24);
	add();
	load(0x2);
	add();
	push_byte(0x10);
	shl();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	grp2(0x33);
	push_base_offset(0xbc);
	load(0x2);
	push_base_offset(0x6c);
	load(0x2);
	grp1(0x32);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x41);
	push_base_offset(0x74);
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_word(0x81);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x38);
	push_base_offset(0xbc);
	load(0x2);
	push_byte(0x0);
	grp1(0x35);

L00c8f:
	push_base_offset(0xc4);
	load(0x2);
	push_byte(0x34);
	memclr();

L00c97:
	push_base_offset(0xc8);
	load(0x2);
	push_byte(0x10);
	add();
	push_byte(0x2);
	move(0x2);

L00ca3:
	push_word(0x4f8);
	push_word(0x4f8);
	load(0x2);
	push_byte(0x1);
	sub();
	move(0x2);
	load_base();
	push_word(0xe0);
	sub();
	store_base();
	ret();
