	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	push_word(0x41c);
	load(0x2);
	move(0x2);
	push_word(0x41c);
	push_byte(0x1);
	move(0x2);
	push_dword(0x44074);
	push_offset(L0028a);
	move(0x2);
	push_dword(0x44078);
	push_offset(L003a1);
	move(0x2);
	push_byte(0x0);
	push_offset(L00039);
	jc(0x1);
	push_offset(L02c0d);
	call();
	push_offset(L0005b);
	jmp();

L00039:
	push_byte(0x0);
	push_offset(L00053);
	jc(0x1);
	push_byte(0x0);
	push_offset(L00746);
	call();
	push_offset(L00053);
	jc(0x1);
	push_offset(L01440);
	call();
	push_offset(L0005b);
	jmp();

L00053:
	push_offset(L00115);
	call();
	push_offset(L00856);
	call();

L0005b:
	push_word(0x41c);
	push_base_offset(0x4);
	load(0x2);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_word(0x1f4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x1f4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0xed0);
	push_string("sysgrp.arc");
	push_string("SGInfo990000");
	grp1(0x10);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0xed0);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x7000);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	push_word(0x100);
	grp1(0x43);
	push_byte(0x1);
	push_byte(0x1);
	grp1(0x4c);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_word(0xfa);
	push_byte(0x1);
	push_word(0x710);
	grp1(0x20);
	push_offset(L000d6);
	jc(0x0);
	push_word(0x3a98);
	push_byte(0x1);
	push_word(0x710);
	sys1(0x5c);

L000d6:
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_byte(0x0);
	push_word(0x100);
	push_base_offset(0x4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x1);
	push_word(0x710);
	grp1(0x20);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_byte(0x1);
	push_byte(0x0);
	grp1(0x4c);
	push_word(0xed0);
	grp1(0x12);
	push_word(0x3e8);
	push_byte(0x0);
	push_word(0x710);
	sys1(0x5c);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L00115:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_byte(0x0);
	push_offset(L0014a);
	jc(0x1);
	push_string("data01xxx.arc");
	push_string("MakerLogo");
	sys1(0x34);
	push_offset(L00157);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0xc);
	move_arg(0x2);
	push_string("MakerLogo");
	push_byte(0x0);
	push_byte(0xa);
	push_base_offset(0xc);
	load(0x2);
	call();
	sys1(0x41);

L0014a:
	push_string("data01xxx.arc");
	push_string("MakerLogo");
	sys1(0x34);
	push_offset(L001ac);
	jc(0x1);

L00157:
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_string("MakerLogo");
	push_byte(0x4);
	push_base_offset(0x8);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_word(0x420);
	push_byte(0x1);
	move(0x2);
	push_word(0x428);
	push_byte(0x1);
	move(0x2);
	push_string("sysprg.arc");
	push_string("scrdrv._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_word(0x428);
	push_byte(0x0);
	move(0x2);

L001ac:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L001b2:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_byte(0x0);
	push_offset(L001e7);
	jc(0x1);
	push_string("data01xxx.arc");
	push_string("TitleLogo");
	sys1(0x34);
	push_offset(L001f4);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0xc);
	move_arg(0x2);
	push_string("TitleLogo");
	push_byte(0x0);
	push_byte(0xa);
	push_base_offset(0xc);
	load(0x2);
	call();
	sys1(0x41);

L001e7:
	push_string("data01xxx.arc");
	push_string("TitleLogo");
	sys1(0x34);
	push_offset(L00284);
	jc(0x1);

L001f4:
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_string("TitleLogo");
	push_byte(0x4);
	push_base_offset(0x8);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_word(0x420);
	push_byte(0x1);
	move(0x2);
	push_word(0x42c);
	push_byte(0x1);
	move(0x2);
	push_string("sysprg.arc");
	push_string("scrdrv._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_word(0x42c);
	push_byte(0x0);
	move(0x2);
	push_dword(0x9fa54);
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_byte(0x0);
	push_byte(0x54);
	mul();
	add();
	push_byte(0x54);
	memcpy();
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_byte(0x0);
	push_byte(0x54);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L00284);
	jc(0x1);
	push_word(0x7b4);
	push_byte(0x1);
	move(0x2);

L00284:
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L0028a:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x38);
	move_arg(0x2);
	push_word(0x7b4);
	load(0x2);
	push_offset(L0039b);
	jc(0x0);
	push_dword(0x9fa54);
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L0030c);
	jc(0x1);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0030c);
	jc(0x1);
	push_base_offset(0x8);
	push_dword(0x9fa54);
	push_byte(0x8);
	add();
	move(0x2);
	push_dword(0x9fa54);
	push_byte(0x28);
	add();
	load(0x0);
	push_byte(0x0);
	neq();
	push_dword(0x9fa54);
	push_byte(0x28);
	add();
	push_dword(0x9fa54);
	push_byte(0x8);
	add();
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x30);
	push_dword(0x9fa54);
	push_byte(0x4);
	add();
	load(0x1);
	move(0x2);
	push_base_offset(0x2c);
	push_dword(0x9fa54);
	push_byte(0x6);
	add();
	load(0x1);
	move(0x2);
	push_offset(L0034f);
	jmp();

L0030c:
	push_base_offset(0x28);
	push_string("title_bgm");
	push_dword(0x15d5f0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x8);
	push_base_offset(0x28);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x28);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x30);
	push_word(0x80);
	move(0x2);
	push_base_offset(0x2c);
	push_byte(0x40);
	move(0x2);

L0034f:
	push_base_offset(0x8);
	load(0x2);
	push_offset(L02d86);
	call();
	push_offset(L0039b);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L02d86);
	call();
	push_offset(L0039b);
	jc(0x1);
	push_byte(0x0);
	push_byte(0x0);
	snd1(0x14);
	push_byte(0x0);
	push_string("data05xxx.arc");
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	snd1(0x12);
	push_byte(0x0);
	push_byte(0x1);
	snd1(0x14);
	push_word(0x7b4);
	push_byte(0x1);
	move(0x2);

L0039b:
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();

L003a1:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x7b4);
	load(0x2);
	push_offset(L003df);
	jc(0x1);
	push_word(0x7b4);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_base_offset(0x8);
	load(0x2);
	snd1(0x19);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L003df);
	jc(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L003df:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L003e5:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00411:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x3);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L00433:
	load_base();
	push_word(0x130);
	add();
	store_base();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L006b0);
	jc(0x0);
	push_base_offset(0x1c);
	push_string("me");
	push_string("an");
	push_string("ku");
	push_string("hi");
	push_string("ak");
	push_string("");
	cmd_0c(0x2, 0x6);
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x6);
	eq();
	push_offset(L00494);
	jc(0x1);

L00475:
	push_byte(0x5);
	sys1(0x2);
	push_base_offset(0x124);
	move_arg(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_dword(0x45f28);
	load(0x2);
	eq();
	push_offset(L00475);
	jc(0x0);
	push_offset(L004c9);
	jmp();

L00494:
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x1);
	geq();
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x5);
	add();
	lt();
	bool_and();
	push_base_offset(0x12c);
	load(0x2);
	push_byte(0x1);
	sub();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x124);
	move_arg(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L006b0);
	jc(0x0);

L004c9:
	push_dword(0x45f28);
	push_base_offset(0x124);
	load(0x2);
	move(0x2);
	push_byte(0x0);
	push_offset(L004e9);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);

L004e9:
	push_base_offset(0x20);
	push_base_offset(0x1c);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice01");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice02");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x1);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice03");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x2);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice04");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x3);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice05");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice06");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x5);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice07");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x6);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice08");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x7);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x120);
	push_string("%s_title_voice09");
	cmd_6f();
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x120);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_offset(L02eb3);
	call();
	push_base_offset(0x130);
	load(0x2);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_byte(0x0);
	push_offset(L006ac);
	jc(0x1);
	sys1(0x41);

L006ac:
	push_offset(L006b4);
	jmp();

L006b0:
	push_offset(L006b4);
	jmp();

L006b4:
	load_base();
	push_word(0x130);
	sub();
	store_base();
	ret();

L006bb:
	load_base();
	push_word(0x144);
	add();
	store_base();
	push_base_offset(0x13c);
	move_arg(0x2);
	push_base_offset(0x140);
	move_arg(0x2);
	push_base_offset(0x144);
	move_arg(0x2);
	push_base_offset(0x138);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	load_base();
	push_word(0x144);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0xc);
	push_word(0x1c0);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x8);
	push_byte(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x7);
	and();
	shl();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	load(0x0);
	push_base_offset(0x8);
	load(0x2);
	not();
	and();
	push_base_offset(0x4);
	load(0x2);
	or();
	move(0x0);
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L00746:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x1c0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	load(0x0);
	push_byte(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x7);
	and();
	shl();
	and();
	push_byte(0x0);
	neq();
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0077d:
	load_base();
	push_byte(0x54);
	add();
	store_base();
	push_base_offset(0x4c);
	move_arg(0x2);
	push_base_offset(0x50);
	move_arg(0x2);
	push_base_offset(0x54);
	move_arg(0x2);
	push_base_offset(0x48);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x40);
	push_byte(0x43);
	push_byte(0x4f);
	push_byte(0x4d);
	push_byte(0x50);
	push_byte(0x4c);
	push_byte(0x45);
	push_byte(0x54);
	push_byte(0x45);
	push_byte(0x0);
	cmd_0c(0x2, 0x9);
	push_base_offset(0x44);
	push_byte(0x0);
	move(0x2);

L007b7:
	push_base_offset(0x40);
	push_base_offset(0x54);
	load(0x2);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00827);
	jc(0x0);
	push_base_offset(0x44);
	load(0x2);
	push_base_offset(0x4c);
	load(0x2);
	geq();
	push_offset(L0084b);
	jc(0x0);
	push_base_offset(0x40);
	push_base_offset(0x54);
	load(0x2);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x50);
	load(0x2);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	neq();
	push_offset(L0083b);
	jc(0x0);
	push_base_offset(0x54);
	load(0x2);
	push_base_offset(0x54);
	load(0x2);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x44);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_offset(L007b7);
	jmp();

L00827:
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x48);
	push_byte(0x1);
	move(0x2);
	push_offset(L0084b);
	jmp();

L0083b:
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x48);
	push_byte(0x0);
	move(0x2);

L0084b:
	push_base_offset(0x48);
	load(0x2);
	load_base();
	push_byte(0x54);
	sub();
	store_base();
	ret();

L00856:
	load_base();
	push_word(0x1490);
	add();
	store_base();
	push_base_offset(0x7a4);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	push_base_offset(0x125c);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x4);
	add();
	push_base_offset(0x7a4);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x764);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x14);
	add();
	push_byte(0x2);
	push_word(0x200);
	or();
	push_byte(0x40);
	or();
	push_word(0x80);
	or();
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x20);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x764);
	push_byte(0x24);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1480);
	push_byte(0x0);
	move(0x2);
	push_dword(0x45f18);
	push_byte(0x1);
	move(0x2);
	push_dword(0x45f1c);
	push_byte(0x1);
	move(0x2);
	push_dword(0x45f20);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_word(0x7b8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x73c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x734);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x738);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x730);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	cmd_0c(0x2, 0x4);

L00941:
	push_word(0x440);
	load(0x2);
	push_offset(L00959);
	jc(0x1);
	push_base_offset(0x734);
	push_byte(0x0);
	move(0x2);
	push_word(0x440);
	push_byte(0x0);
	move(0x2);

L00959:
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x11c);
	move_arg(0x2);
	push_base_offset(0x6e8);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0xce);
	push_byte(0x3);
	push_base_offset(0x11c);
	load(0x2);
	call();
	push_base_offset(0x1490);
	move_arg(0x2);
	push_base_offset(0x1490);
	load(0x2);
	push_offset(L00999);
	jc(0x1);
	push_base_offset(0x6e8);
	push_byte(0x7);
	push_base_offset(0x11c);
	load(0x2);
	call();
	push_base_offset(0x1490);
	move_arg(0x2);

L00999:
	push_word(0xbe8);
	push_base_offset(0x1490);
	load(0x2);
	move(0x2);
	sys1(0x41);

L009a5:
	push_byte(0x5);
	sys1(0x2);
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x148c);
	load(0x2);
	push_dword(0x45f28);
	load(0x2);
	eq();
	push_offset(L009a5);
	jc(0x0);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x6);
	eq();
	push_byte(0x1);
	push_base_offset(0x148c);
	load(0x2);
	add();
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_word(0x7b8);
	load(0x2);
	push_word(0x7bc);
	load(0x2);
	push_base_offset(0x148c);
	load(0x2);
	ternary();
	push_word(0x7bc);
	move_arg(0x2);
	push_word(0x2c0);
	push_byte(0xb);
	push_byte(0x4);
	mul();
	add();
	push_word(0x7bc);
	load(0x2);
	move(0x2);
	push_dword(0x45f18);
	load(0x2);
	push_offset(L00a63);
	jc(0x1);
	push_offset(L001b2);
	call();
	push_dword(0x45f18);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1480);
	push_dword(0x9fab8);
	push_dword(0x86cc);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x1480);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x1480);
	load(0x2);
	push_byte(0x5);
	leq();
	bool_and();
	push_base_offset(0x1480);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x1480);
	move_arg(0x2);
	push_word(0x7bc);
	push_word(0x2c0);
	push_byte(0xb);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);

L00a63:
	push_word(0x7bc);
	load(0x2);
	push_word(0x7b8);
	load(0x2);
	bool_zero();
	push_offset(L003e5);
	call();
	push_word(0x7b8);
	load(0x2);
	push_offset(L00aa4);
	jc(0x0);
	push_base_offset(0x1480);
	load(0x2);
	push_base_offset(0x145c);
	push_string("SGTitle99%02d00");
	cmd_6f();
	push_word(0x800);
	push_byte(0x32);
	add();
	push_string("sysgrp.arc");
	push_base_offset(0x145c);
	grp1(0x10);
	push_word(0x800);
	push_byte(0x3f);
	add();
	push_word(0x800);
	push_byte(0x32);
	add();
	grp2(0x1f);

L00aa4:
	push_base_offset(0x114);
	push_byte(0x4);
	push_byte(0xe);
	mul();
	memclr();
	push_base_offset(0x114);
	push_word(0x7bc);
	load(0x2);
	push_offset(L00433);
	call();
	push_base_offset(0x720);
	push_offset(L01bb1);
	call();
	push_base_offset(0x734);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x2);
	push_word(0x200);
	or();
	push_byte(0x0);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x764);
	push_byte(0x14);
	add();
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x40);
	or();
	push_word(0x80);
	or();
	move(0x2);
	push_base_offset(0x764);
	push_base_offset(0x734);
	load(0x2);
	push_base_offset(0x720);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_offset(L01cc8);
	call();
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x80);
	push_base_offset(0xdc);
	move_arg(0x2);
	push_base_offset(0x73c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_byte(0x0);
	push_word(0x100);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_dword(0x42aec);
	load(0x2);
	push_byte(0x0);
	neq();
	push_byte(0x0);
	push_base_offset(0x148c);
	load(0x2);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_dword(0x42af4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_byte(0x0);
	push_base_offset(0x148c);
	load(0x2);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_word(0x800);
	push_byte(0x3f);
	add();
	grp1(0x86);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x1);
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_word(0x790);
	grp1(0x85);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1a);
	push_byte(0x64);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp2(0x88);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x500);
	push_word(0x2d0);
	grp1(0x88);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	grp2(0x89);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	grp1(0x87);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x1);
	grp1(0x82);
	push_base_offset(0xdc);
	load(0x2);
	push_base_offset(0x764);
	grp1(0xb7);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x1);
	grp1(0x84);
	grp1(0xe0);
	push_base_offset(0xd8);
	move_arg(0x2);
	push_base_offset(0xd8);
	load(0x2);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0xe8);
	push_base_offset(0xd8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x148c);
	load(0x2);
	grp1(0xe5);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x800);
	push_byte(0x3f);
	add();
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x7fff);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x43);
	push_byte(0x1);
	push_word(0x7b8);
	load(0x2);
	grp1(0x4c);
	push_word(0x7b8);
	push_byte(0x0);
	move(0x2);
	push_dword(0x45f1c);
	load(0x2);
	push_offset(L00c30);
	jc(0x1);

L00c30:
	push_byte(0x0);
	push_offset(L0028a);
	call();
	push_base_offset(0x738);
	load(0x2);
	push_word(0x96);
	push_word(0x1f4);
	ternary();
	push_offset(L02fe3);
	call();
	push_base_offset(0xd4);
	move_arg(0x2);
	push_base_offset(0xd4);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0x73c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00c9f);
	jc(0x1);
	push_base_offset(0x73c);
	load(0x2);
	push_word(0x100);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x73c);
	load(0x2);
	grp1(0x51);
	push_base_offset(0x73c);
	push_byte(0x0);
	move(0x2);
	push_offset(L00d34);
	jmp();

L00c9f:
	push_dword(0x42af4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00cdf);
	jc(0x1);
	push_dword(0x42af4);
	load(0x2);
	push_word(0x100);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x1);
	push_word(0xe00);
	grp1(0x22);
	push_dword(0x42af4);
	load(0x2);
	grp1(0x51);
	push_dword(0x42af4);
	push_byte(0x0);
	move(0x2);
	push_offset(L00d34);
	jmp();

L00cdf:
	push_dword(0x42aec);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00d1d);
	jc(0x1);
	push_dword(0x42aec);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_dword(0x42aec);
	load(0x2);
	grp1(0x61);
	push_dword(0x42aec);
	push_byte(0x0);
	move(0x2);
	push_offset(L00d34);
	jmp();

L00d1d:
	push_base_offset(0xd8);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);

L00d34:
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_dword(0x45f1c);
	load(0x2);
	push_offset(L00d6c);
	jc(0x1);
	push_byte(0x20);
	push_word(0x96);
	add();
	load(0x1);
	push_byte(0x20);
	push_byte(0x2a);
	add();
	load(0x1);
	push_byte(0x0);
	gt();
	bool_and();
	push_offset(L00d63);
	jc(0x1);

L00d63:
	push_dword(0x45f1c);
	push_byte(0x0);
	move(0x2);

L00d6c:
	push_base_offset(0xdc);
	load(0x2);
	grp2(0xb8);
	push_base_offset(0xd0);
	move_arg(0x2);
	push_base_offset(0xd0);
	load(0x2);
	push_base_offset(0x764);
	grp2(0xba);
	push_base_offset(0xa8);
	push_byte(0x0);
	move(0x2);
	push_word(0x43c);
	push_base_offset(0xd0);
	load(0x2);
	move(0x2);
	push_word(0x438);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x9c);
	push_byte(0x0);
	move(0x2);
	push_dword(0x46330);
	push_byte(0x0);
	move(0x2);

L00daa:
	sys1(0x5f);
	push_word(0x404);
	load(0x2);
	push_offset(L00daa);
	jc(0x0);
	push_base_offset(0x9c);
	push_dword(0x46334);
	push_dword(0x46330);
	load(0x2);
	push_offset(L0077d);
	call();
	push_base_offset(0x1490);
	move_arg(0x2);
	push_dword(0x46330);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1490);
	load(0x2);
	push_offset(L00dfa);
	jc(0x1);
	push_base_offset(0xa8);
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xa4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xa0);
	push_byte(0xc);
	move(0x2);
	push_offset(L01122);
	jmp();

L00dfa:
	push_base_offset(0xcc);
	push_base_offset(0xd0);
	load(0x2);
	grp1(0xbf);
	push_base_offset(0xcc);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000006);
	eq();
	push_offset(L00e51);
	jc(0x0);
	push_base_offset(0xcc);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000007);
	eq();
	push_offset(L00ecf);
	jc(0x0);
	push_base_offset(0xcc);
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x10000002);
	eq();
	push_offset(L0102a);
	jc(0x0);
	push_base_offset(0xcc);
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L00dfa);
	jc(0x0);
	push_offset(L01104);
	jmp();

L00e51:
	push_base_offset(0xa4);
	push_base_offset(0xcc);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa0);
	push_base_offset(0xcc);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L00ea1);
	jc(0x1);
	push_base_offset(0x720);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00eac);
	jc(0x1);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0xb);
	eq();
	push_offset(L00eac);
	jc(0x0);

L00ea1:
	push_base_offset(0xa8);
	push_byte(0x1);
	move(0x2);
	push_offset(L01104);
	jmp();

L00eac:
	push_base_offset(0x98);
	push_dword(0x10000002);
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	cmd_0c(0x2, 0x3);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x98);
	sys1(0xac);
	push_offset(L00dfa);
	jmp();

L00ecf:
	push_base_offset(0xa4);
	push_base_offset(0xcc);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa0);
	push_base_offset(0xcc);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x78);
	push_base_offset(0xcc);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0x74);
	push_base_offset(0xcc);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0xb);
	neq();
	push_offset(L00dfa);
	jc(0x0);
	push_base_offset(0x720);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L01007);
	jc(0x1);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x0);
	neq();
	push_offset(L00ffc);
	jc(0x1);
	push_base_offset(0x74);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x74);
	load(0x2);
	push_word(0x154);
	lt();
	bool_and();
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x74);
	load(0x2);
	push_word(0x154);
	geq();
	push_base_offset(0x74);
	load(0x2);
	push_word(0x1b8);
	lt();
	bool_and();
	push_byte(0x1);
	push_base_offset(0x148c);
	load(0x2);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x74);
	load(0x2);
	push_word(0x1b8);
	geq();
	push_base_offset(0x74);
	load(0x2);
	push_word(0x250);
	lt();
	bool_and();
	push_byte(0x2);
	push_base_offset(0x148c);
	load(0x2);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x74);
	load(0x2);
	push_word(0x250);
	geq();
	push_base_offset(0x74);
	load(0x2);
	push_word(0x500);
	lt();
	bool_and();
	push_byte(0x3);
	push_base_offset(0x148c);
	load(0x2);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L01007);
	jc(0x0);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_base_offset(0x148c);
	load(0x2);
	push_base_offset(0x730);
	push_offset(L006bb);
	call();
	push_offset(L01007);
	jc(0x1);
	push_byte(0x32);
	push_byte(0x0);
	add();
	push_word(0x4a0);
	load(0x2);
	add();
	push_offset(L03086);
	call();
	push_offset(L01007);
	jmp();

L00ffc:
	push_base_offset(0xa8);
	push_byte(0x1);
	move(0x2);
	push_offset(L01104);
	jmp();

L01007:
	push_base_offset(0x98);
	push_dword(0x10000002);
	push_byte(0x0);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	cmd_0c(0x2, 0x3);
	push_base_offset(0xd0);
	load(0x2);
	push_byte(0x3);
	push_base_offset(0x98);
	sys1(0xac);
	push_offset(L00dfa);
	jmp();

L0102a:
	push_base_offset(0xa4);
	push_base_offset(0xcc);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa0);
	push_base_offset(0xcc);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x10);
	shl();
	push_byte(0x10);
	sar();
	move(0x2);
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	push_offset(L00dfa);
	jc(0x0);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0xb);
	eq();
	push_offset(L00dfa);
	jc(0x0);
	push_base_offset(0xa4);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L0108b);
	jc(0x1);
	push_base_offset(0x720);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00dfa);
	jc(0x1);

L0108b:
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_byte(0x0);
	neq();
	push_offset(L010a7);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x8);
	add();
	push_offset(L03086);
	call();
	push_offset(L00dfa);
	jmp();

L010a7:
	push_base_offset(0x114);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00dfa);
	jc(0x1);
	push_dword(0x45f24);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L010e5);
	jc(0x1);
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_dword(0x45f24);
	load(0x2);
	add();
	snd1(0x25);
	push_dword(0x45f24);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L010e5:
	push_byte(0x32);
	push_byte(0x3);
	add();
	push_base_offset(0xa0);
	load(0x2);
	add();
	push_offset(L03086);
	call();
	push_dword(0x45f24);
	push_base_offset(0xa0);
	load(0x2);
	move(0x2);
	push_offset(L00dfa);
	jmp();

L01104:
	push_base_offset(0xc0);
	push_base_offset(0xd0);
	load(0x2);
	grp1(0xbc);
	push_base_offset(0xc0);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0xa8);
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L00daa);
	jc(0x0);

L01122:
	push_word(0x438);
	push_byte(0x0);
	move(0x2);
	push_word(0x43c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xd0);
	load(0x2);
	grp1(0xb9);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x0);
	push_byte(0xc);
	add();
	push_byte(0x0);
	push_byte(0x0);
	add();
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	neq();
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	ternary();
	push_offset(L03086);
	call();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x7);
	eq();
	bool_or();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x8);
	eq();
	bool_or();
	push_offset(L01199);
	jc(0x1);
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L01199:
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	eq();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x9);
	eq();
	bool_or();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	eq();
	bool_or();
	push_offset(L01283);
	jc(0x1);
	push_byte(0x1);
	push_byte(0x1);
	grp1(0x4c);
	push_word(0x96);
	push_offset(L02fe3);
	call();
	push_base_offset(0xd4);
	move_arg(0x2);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0xdc);
	load(0x2);
	push_word(0x100);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	eq();
	push_byte(0x1);
	push_byte(0x0);
	ternary();
	push_base_offset(0x734);
	move_arg(0x2);
	push_base_offset(0x734);
	load(0x2);
	push_byte(0x0);
	eq();
	push_byte(0x2);
	push_word(0x200);
	or();
	push_byte(0x0);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x764);
	push_byte(0x14);
	add();
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x40);
	or();
	push_word(0x80);
	or();
	move(0x2);
	push_base_offset(0x764);
	push_base_offset(0x734);
	load(0x2);
	push_base_offset(0x720);
	push_byte(0x20);
	push_byte(0x78);
	add();
	load(0x1);
	push_offset(L01cc8);
	call();
	push_base_offset(0xdc);
	load(0x2);
	push_base_offset(0x764);
	grp1(0xb7);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0xdc);
	load(0x2);
	push_byte(0x0);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_byte(0x5);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_byte(0x1);
	push_byte(0x0);
	grp1(0x4c);
	push_offset(L00d6c);
	jmp();

L01283:
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x5);
	eq();
	push_offset(L01298);
	jc(0x1);
	push_offset(L017ff);
	call();
	push_offset(L00d6c);
	jmp();

L01298:
	push_base_offset(0x70);
	push_word(0x3e8);
	push_byte(0x0);
	push_word(0x3e8);
	push_byte(0x0);
	push_byte(0x0);
	push_word(0x3e8);
	push_word(0x3e8);
	push_word(0x3e8);
	push_word(0x3e8);
	push_byte(0x0);
	push_word(0x3e8);
	push_word(0x3e8);
	push_word(0x3e8);
	push_byte(0x0);
	cmd_0c(0x2, 0xe);
	push_base_offset(0x70);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L012ed);
	jc(0x1);
	push_base_offset(0x70);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	push_offset(L003a1);
	call();

L012ed:
	push_word(0x7b8);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x1);
	eq();
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x3);
	eq();
	bool_or();
	move(0x2);
	push_byte(0x1);
	push_word(0x7b8);
	load(0x2);
	grp1(0x4c);
	push_base_offset(0x70);
	push_word(0x1f4);
	push_word(0x96);
	push_word(0x1f4);
	push_word(0x96);
	push_byte(0x0);
	push_word(0x1f4);
	push_word(0x1f4);
	push_word(0x1f4);
	push_word(0x1f4);
	push_byte(0x0);
	push_word(0x1f4);
	push_word(0x1f4);
	push_word(0x1f4);
	push_word(0x96);
	cmd_0c(0x2, 0xe);
	push_base_offset(0x70);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L02fe3);
	call();
	push_base_offset(0xd4);
	move_arg(0x2);
	push_base_offset(0xd4);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x5);
	push_byte(0x0);
	ternary();
	push_base_offset(0x148c);
	move_arg(0x2);
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0xd8);
	load(0x2);
	push_word(0x100);
	push_base_offset(0xd4);
	load(0x2);
	push_word(0xfa);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	grp1(0x22);
	push_base_offset(0x148c);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_base_offset(0xd8);
	load(0x2);
	push_base_offset(0xdc);
	load(0x2);
	grp1(0xe9);
	push_base_offset(0xd8);
	load(0x2);
	grp1(0xe1);
	push_base_offset(0xdc);
	load(0x2);
	grp1(0x81);
	push_offset(L00411);
	call();
	push_word(0x7b8);
	load(0x2);
	push_offset(L013c1);
	jc(0x0);
	push_word(0x800);
	push_byte(0x3f);
	add();
	grp1(0x12);

L013c1:
	push_base_offset(0x38);
	push_offset(L01418);
	push_offset(L01485);
	push_offset(L01526);
	push_offset(L01553);
	push_byte(0x0);
	push_offset(L0168b);
	push_offset(L015fb);
	push_offset(L016ec);
	push_offset(L0172c);
	push_byte(0x0);
	push_offset(L016ac);
	push_byte(0x0);
	push_offset(L0176c);
	push_offset(L015e2);
	cmd_0c(0x2, 0xe);
	push_base_offset(0x38);
	push_base_offset(0xa0);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();
	push_base_offset(0x738);
	move_arg(0x2);
	push_base_offset(0x1490);
	move_arg(0x2);
	push_base_offset(0x1490);
	load(0x2);
	push_offset(L00941);
	jc(0x0);
	load_base();
	push_word(0x1490);
	sub();
	store_base();
	ret();

L01418:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("nameinput._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_offset(L01440);
	call();
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01440:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_word(0x400);
	load(0x2);
	push_string("Test");
	push_string("Main");
	ternary();
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_byte(0x0);
	push_offset(L01815);
	call();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01485:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("syswnd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_base_offset(0xc);
	push_word(0x448);
	load(0x2);
	bool_zero();
	move(0x2);
	push_word(0x448);
	load(0x2);
	push_offset(L014cf);
	jc(0x1);
	push_word(0x1f4);
	push_byte(0x1);
	push_offset(L003a1);
	call();
	push_byte(0x0);
	push_offset(L01815);
	call();
	push_offset(L01519);
	jmp();

L014cf:
	push_dword(0x483f0);
	load(0x2);
	push_offset(L01519);
	jc(0x1);
	push_dword(0x48400);
	push_byte(0x1);
	move(0x2);
	push_dword(0x48404);
	push_offset(L01a77);
	call();
	push_dword(0x48400);
	push_byte(0x0);
	move(0x2);
	push_word(0x440);
	load(0x2);
	push_offset(L01512);
	jc(0x0);
	push_offset(L01553);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_offset(L01519);
	jmp();

L01512:
	push_base_offset(0xc);
	push_byte(0x0);
	move(0x2);

L01519:
	push_byte(0x1);
	push_base_offset(0xc);
	load(0x2);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L01526:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x448);
	push_byte(0x1);
	move(0x2);
	push_word(0x44c);
	push_word(0xce);
	move(0x2);
	push_word(0x1f4);
	push_byte(0x1);
	push_offset(L003a1);
	call();
	push_byte(0x0);
	push_offset(L01815);
	call();
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01553:
	load_base();
	push_byte(0x8);
	add();
	store_base();

L01558:
	push_string("sysprg.arc");
	push_string("syswnd._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_base_offset(0x8);
	push_word(0x448);
	load(0x2);
	bool_zero();
	move(0x2);
	push_word(0x448);
	load(0x2);
	push_offset(L0159d);
	jc(0x1);
	push_word(0x1f4);
	push_byte(0x1);
	push_offset(L003a1);
	call();
	push_byte(0x0);
	push_offset(L01815);
	call();
	push_offset(L015d5);
	jmp();

L0159d:
	push_dword(0x483f0);
	load(0x2);
	push_offset(L015d5);
	jc(0x1);
	push_dword(0x48400);
	push_byte(0x1);
	move(0x2);
	push_dword(0x48404);
	push_offset(L01a77);
	call();
	push_dword(0x48400);
	push_byte(0x0);
	move(0x2);
	push_word(0x440);
	load(0x2);
	push_offset(L01558);
	jc(0x1);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L015d5:
	push_byte(0x1);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L015e2:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_byte(0x20);
	push_word(0xae);
	add();
	push_byte(0x4);
	move(0x1);
	push_offset(L01553);
	call();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L015fb:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("omakecg._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("omakerecollections._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("omakecg._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("omakemusic._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0168b:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x3e8);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);
	push_word(0x7fff);
	push_byte(0x0);
	sys1(0xa1);

L016a0:
	sys1(0x5f);
	push_offset(L016a0);
	jmp();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L016ac:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_string("playMovie");
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_byte(0x1);
	push_offset(L01815);
	call();
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L016ec:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_string("ExStory01");
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_byte(0x0);
	push_offset(L01815);
	call();
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0172c:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_string("ExStory02");
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_byte(0x0);
	push_offset(L01815);
	call();
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L0176c:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_byte(0x0);
	push_offset(L017a1);
	jc(0x1);
	push_string("data01xxx.arc");
	push_string("complete");
	sys1(0x34);
	push_offset(L017ae);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0xc);
	move_arg(0x2);
	push_string("complete");
	push_byte(0x0);
	push_byte(0xa);
	push_base_offset(0xc);
	load(0x2);
	call();
	sys1(0x41);

L017a1:
	push_string("data01xxx.arc");
	push_string("complete");
	sys1(0x34);
	push_offset(L017f5);
	jc(0x1);

L017ae:
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x8);
	move_arg(0x2);
	push_string("complete");
	push_byte(0x4);
	push_base_offset(0x8);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_word(0x420);
	push_byte(0x1);
	move(0x2);
	push_string("sysprg.arc");
	push_string("scrdrv._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);

L017f5:
	push_byte(0x1);
	push_byte(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L017ff:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x4000);
	push_byte(0x0);
	sys1(0xa1);
	push_offset(L03033);
	call();
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01815:
	load_base();
	push_word(0x12c);
	add();
	store_base();
	push_word(0x420);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("scrdrv._bp");
	sys1(0x40);
	push_base_offset(0x120);
	move_arg(0x2);
	push_word(0x448);
	load(0x2);
	push_offset(L018e9);
	jc(0x0);
	push_byte(0x0);
	push_offset(L01885);
	jc(0x1);
	push_string("data01xxx.arc");
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_byte(0x0);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	sys1(0x34);
	push_offset(L018c2);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x11c);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_byte(0x0);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	push_byte(0x0);
	push_byte(0xa);
	push_base_offset(0x11c);
	load(0x2);
	call();
	sys1(0x41);

L01885:
	push_string("data01xxx.arc");
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_byte(0x0);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	sys1(0x34);
	push_offset(L018c2);
	jc(0x0);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_byte(0x0);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x118);
	push_string("指定されたスクリプト [ %s ] は存在しません");
	cmd_6f();
	push_base_offset(0x118);
	cmd_79();
	push_offset(L01a37);
	jmp();

L018c2:
	push_word(0x49c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L018d9);
	jc(0x0);
	push_word(0x49c);
	load(0x2);
	push_word(0x1f4);
	snd1(0x26);

L018d9:
	push_base_offset(0x120);
	load(0x2);
	call();
	push_word(0x448);
	load(0x2);
	push_offset(L01a37);
	jc(0x1);

L018e9:
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x18);
	move_arg(0x2);
	push_word(0x44c);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x18);
	load(0x2);
	call();
	push_base_offset(0x128);
	move_arg(0x2);
	sys1(0x41);
	push_word(0x448);
	push_byte(0x0);
	move(0x2);
	push_word(0x44c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x128);
	load(0x2);
	push_byte(0x0);
	eq();
	push_offset(L01932);
	jc(0x0);
	push_string("指定されたユーザーデータから異常が検出されたので読み込みを中止します");
	usr1(0x80);
	push_offset(L01a37);
	jmp();

L01932:
	push_dword(0x400000);
	sys1(0x20);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x124);
	push_byte(0x0);
	move(0x2);

L0194c:
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	push_string("framework._bs");
	cmd_69();
	push_base_offset(0x12c);
	move_arg(0x2);
	push_base_offset(0x12c);
	load(0x2);
	push_string("system.arc");
	push_string("data01xxx.arc");
	ternary();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	sys1(0x34);
	push_offset(L01a21);
	jc(0x1);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x0);
	add();
	sys1(0x30);
	push_base_offset(0x128);
	move_arg(0x2);
	push_base_offset(0xc);
	push_byte(0x8);
	memclr();
	push_base_offset(0xc);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x128);
	load(0x2);
	sys2(0xe9);
	push_base_offset(0xc);
	push_dword(0x9fab8);
	push_word(0x6634);
	add();
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x38);
	mul();
	add();
	push_byte(0x20);
	add();
	push_byte(0x8);
	memcmp();
	push_offset(L01a21);
	jc(0x1);
	push_base_offset(0x124);
	push_base_offset(0x124);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x124);
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x6630);
	add();
	load(0x2);
	lt();
	push_offset(L0194c);
	jc(0x0);
	push_base_offset(0x10);
	push_byte(0x1);
	move(0x2);

L01a21:
	push_base_offset(0x14);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x10);
	load(0x2);
	push_offset(L018c2);
	jc(0x0);
	push_string("指定されたユーザーデータは互換性を失っているので読み込みを中止します");
	usr1(0x80);

L01a37:
	push_dword(0x11196c);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01a58);
	jc(0x1);
	push_dword(0x11196c);
	load(0x2);
	sys1(0x21);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);

L01a58:
	push_dword(0x45f18);
	push_byte(0x1);
	move(0x2);
	push_dword(0x45f1c);
	push_byte(0x1);
	move(0x2);
	push_offset(L03457);
	call();
	sys1(0x41);
	load_base();
	push_word(0x12c);
	sub();
	store_base();
	ret();

L01a77:
	load_base();
	push_word(0x374);
	add();
	store_base();
	push_base_offset(0x374);
	move_arg(0x2);
	push_string("data01xxx.arc");
	push_base_offset(0x374);
	load(0x2);
	sys1(0x34);
	push_offset(L01ada);
	jc(0x0);
	push_byte(0x0);
	push_offset(L01ac6);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x60);
	move_arg(0x2);
	push_base_offset(0x36c);
	push_base_offset(0x374);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x60);
	load(0x2);
	call();
	push_base_offset(0x370);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x370);
	load(0x2);
	push_offset(L01ada);
	jc(0x0);

L01ac6:
	push_base_offset(0x374);
	load(0x2);
	push_base_offset(0x36c);
	push_string("指定されたスクリプト [ %s ] は存在しません");
	cmd_6f();
	push_base_offset(0x36c);
	cmd_79();
	push_offset(L01baa);
	jmp();

L01ada:
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x374);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x5c);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_base_offset(0x58);
	push_byte(0x54);
	memclr();
	push_base_offset(0x58);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x1);
	push_base_offset(0x58);
	push_byte(0x4);
	add();
	push_word(0x80);
	move(0x1);
	push_base_offset(0x58);
	push_byte(0x6);
	add();
	push_byte(0x40);
	move(0x1);
	push_base_offset(0x58);
	push_byte(0x8);
	add();
	push_string("title_bgm");
	cmd_6a();
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_byte(0x0);
	push_byte(0x54);
	mul();
	add();
	push_base_offset(0x58);
	push_byte(0x54);
	memcpy();
	push_word(0x420);
	push_byte(0x0);
	move(0x2);
	push_string("sysprg.arc");
	push_string("scrdrv._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);
	push_dword(0x48438);
	push_byte(0x0);
	push_byte(0x54);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x1);
	push_offset(L01b8b);
	jc(0x1);
	push_word(0x7b4);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_offset(L0028a);
	call();

L01b8b:
	push_dword(0x9fab8);
	push_dword(0x20e74);
	add();
	push_byte(0x0);
	push_byte(0x54);
	mul();
	add();
	push_byte(0x54);
	memclr();
	push_dword(0x48438);
	push_byte(0xd);
	push_byte(0x54);
	mul();
	memclr();

L01baa:
	load_base();
	push_word(0x374);
	sub();
	store_base();
	ret();

L01bb1:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0xbe8);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_byte(0x46);
	push_offset(L00746);
	call();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	ternary();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	bool_zero();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	bool_zero();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	bool_zero();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xa);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xb);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	bool_zero();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xd);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L01cc8:
	load_base();
	push_word(0x1ac);
	add();
	store_base();
	push_base_offset(0x1a0);
	move_arg(0x2);
	push_base_offset(0x1a4);
	move_arg(0x2);
	push_base_offset(0x1a8);
	move_arg(0x2);
	push_base_offset(0x1ac);
	move_arg(0x2);
	push_base_offset(0x19c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x19c);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x34);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x19c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x18c);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x18);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x20);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x24);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x19c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0xc8);
	push_byte(0x24);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x19c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0xc8);
	push_byte(0x3c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x190);
	push_base_offset(0x1ac);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x0);
	add();
	push_byte(0xe);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x8);
	add();
	push_base_offset(0x190);
	load(0x2);
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xc8);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1ac);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x0);
	push_byte(0x40);
	mul();
	add();
	push_base_offset(0xc8);
	push_byte(0x40);
	memcpy();
	push_base_offset(0x78);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x2b2);
	push_word(0x2b2);
	push_word(0x2b2);
	push_word(0x2b2);
	push_word(0x2b2);
	cmd_0c(0x2, 0x5);
	push_base_offset(0x78);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	push_word(0x2b2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x6);
	push_base_offset(0x40);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0xf5);
	push_word(0x131);
	push_word(0x16d);
	push_word(0x1a9);
	push_word(0x1e5);
	cmd_0c(0x2, 0x5);
	push_base_offset(0x40);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	push_word(0x221);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	cmd_0c(0x2, 0x6);
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_word(0xbe8);
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x8);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x8);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x8);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0xc);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0xc);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0xc);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x3);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1a4);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x10);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x10);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x10);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x4);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x14);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x14);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x14);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x5);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_base_offset(0x1a8);
	load(0x2);
	push_byte(0x0);
	eq();
	push_base_offset(0x1a4);
	load(0x2);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x10);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x10);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x10);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x4);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x6);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x1c);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x1c);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x6);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	load(0x2);
	push_word(0x100);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x7);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x20);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x20);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x20);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x7);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	load(0x2);
	push_word(0x100);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x8);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_base_offset(0x78);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_base_offset(0x40);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x24);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x24);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x24);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x28);
	add();
	push_byte(0x8);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	load(0x2);
	push_word(0x100);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	load(0x2);
	push_byte(0x5);
	add();
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0x9);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_word(0x2b2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_word(0x1e5);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x36);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x36);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x800);
	push_byte(0x36);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_word(0x800);
	push_byte(0x35);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_word(0x800);
	push_byte(0x3a);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x0);
	add();
	push_word(0x2d0);
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x4);
	add();
	push_word(0x26c);
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0xa);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_word(0x161);
	push_byte(0x5a);
	ternary();
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	move_arg(0x2);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_word(0x1e6);
	push_byte(0x0);
	ternary();
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_base_offset(0x1a0);
	load(0x2);
	push_byte(0x0);
	eq();
	push_word(0x800);
	push_byte(0x34);
	add();
	push_word(0x800);
	push_byte(0x34);
	add();
	push_byte(0x2);
	add();
	ternary();
	push_base_offset(0x84);
	move_arg(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_base_offset(0x84);
	load(0x2);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_base_offset(0x84);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0xb);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0xc);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x18c);
	push_byte(0x0);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x8);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0xc);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x18c);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x190);
	load(0x2);
	push_byte(0xd);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x18c);
	push_word(0xc4);
	memcpy();
	load_base();
	push_word(0x1ac);
	sub();
	store_base();
	ret();

L02c0d:
	load_base();
	push_word(0x340);
	add();
	store_base();
	push_byte(0x0);
	push_byte(0x0);
	push_string("Archive\\data01*");
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x25);
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_byte(0x1);
	geq();
	push_offset(L02d7f);
	jc(0x1);
	push_base_offset(0x2c);
	load(0x2);
	sys1(0x20);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x2c);
	load(0x2);
	push_string("Archive\\data01*");
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x25);
	push_base_offset(0x28);
	move_arg(0x2);
	push_dword(0x15e8e6);
	push_byte(0x1);
	move(0x2);
	push_string("sysprg.arc");
	push_string("userdata._bp");
	sys1(0x40);
	push_base_offset(0x24);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("scrdrv._bp");
	sys1(0x40);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x1c);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x30);
	load(0x2);
	move(0x2);

L02c8a:
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x33c);
	push_string("Archive\\%s");
	cmd_6f();
	push_byte(0x0);
	push_base_offset(0x10);
	push_base_offset(0x33c);
	sys2(0x39);
	push_base_offset(0x10);
	load(0x2);
	sys1(0x20);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0xc);
	push_base_offset(0x33c);
	sys2(0x39);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);

L02cca:
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x24);
	load(0x2);
	call();
	push_dword(0x11196c);
	push_byte(0x0);
	move(0x2);
	push_byte(0x0);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0xda);
	push_base_offset(0x20);
	load(0x2);
	call();
	push_base_offset(0x4);
	load(0x2);
	cmd_68();
	push_base_offset(0x340);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x340);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	lt();
	push_offset(L02cca);
	jc(0x0);
	push_base_offset(0x14);
	load(0x2);
	sys1(0x21);
	push_base_offset(0x18);
	load(0x2);
	cmd_68();
	push_base_offset(0x340);
	move_arg(0x2);
	push_base_offset(0x18);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x340);
	load(0x2);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	lt();
	push_offset(L02c8a);
	jc(0x0);
	sys1(0x41);
	sys1(0x41);
	push_dword(0x15e8e6);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x30);
	load(0x2);
	sys1(0x21);

L02d7f:
	load_base();
	push_word(0x340);
	sub();
	store_base();
	ret();

L02d86:
	load_base();
	push_word(0x318);
	add();
	store_base();
	push_base_offset(0x318);
	move_arg(0x2);
	push_string("data05xxx.arc");
	push_base_offset(0x318);
	load(0x2);
	sys1(0x34);
	push_base_offset(0x314);
	move_arg(0x2);
	push_base_offset(0x314);
	load(0x2);
	push_offset(L02df4);
	jc(0x0);
	push_byte(0x0);
	push_offset(L02df4);
	jc(0x1);
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x310);
	push_base_offset(0x318);
	load(0x2);
	push_byte(0x6);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x314);
	move_arg(0x2);
	push_base_offset(0x314);
	load(0x2);
	push_offset(L02df2);
	jc(0x0);
	push_base_offset(0x310);
	push_base_offset(0x318);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x314);
	move_arg(0x2);

L02df2:
	sys1(0x41);

L02df4:
	push_base_offset(0x314);
	load(0x2);
	load_base();
	push_word(0x318);
	sub();
	store_base();
	ret();
	load_base();
	push_word(0x320);
	add();
	store_base();
	push_base_offset(0x318);
	move_arg(0x2);
	push_base_offset(0x31c);
	move_arg(0x2);
	push_base_offset(0x320);
	move_arg(0x2);
	push_base_offset(0x314);
	push_byte(0x0);
	move(0x2);
	push_string("data03xxx.arc");
	push_base_offset(0x31c);
	load(0x2);
	sys1(0x34);
	push_offset(L02e8a);
	jc(0x0);
	push_byte(0x0);
	push_offset(L02ea7);
	jc(0x1);
	push_base_offset(0x318);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02e58);
	jc(0x1);
	push_base_offset(0x310);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x318);
	load(0x2);
	call();
	push_offset(L02e8a);
	jc(0x0);
	push_offset(L02ea7);
	jmp();

L02e58:
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x310);
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x314);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x314);
	load(0x2);
	push_offset(L02e8a);
	jc(0x0);
	push_offset(L02ea7);
	jmp();

L02e8a:
	push_base_offset(0x320);
	load(0x2);
	push_string("data03xxx.arc");
	push_base_offset(0x31c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x10);
	shl();
	snd1(0x21);
	push_base_offset(0x314);
	push_byte(0x1);
	move(0x2);

L02ea7:
	push_base_offset(0x314);
	load(0x2);
	load_base();
	push_word(0x320);
	sub();
	store_base();
	ret();

L02eb3:
	load_base();
	push_word(0x330);
	add();
	store_base();
	push_base_offset(0x324);
	move_arg(0x2);
	push_base_offset(0x328);
	move_arg(0x2);
	push_base_offset(0x32c);
	move_arg(0x2);
	push_base_offset(0x330);
	move_arg(0x2);
	push_base_offset(0x320);
	push_byte(0x0);
	move(0x2);
	push_string("data04xxx.arc");
	push_base_offset(0x32c);
	load(0x2);
	sys1(0x34);
	push_offset(L02f42);
	jc(0x0);
	push_byte(0x0);
	push_offset(L02fd7);
	jc(0x1);
	push_base_offset(0x328);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L02f10);
	jc(0x1);
	push_base_offset(0x31c);
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x328);
	load(0x2);
	call();
	push_offset(L02f42);
	jc(0x0);
	push_offset(L02fd7);
	jmp();

L02f10:
	push_string("sysprg.arc");
	push_string("builddata._bp");
	sys1(0x40);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x31c);
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x5);
	push_base_offset(0x10);
	load(0x2);
	call();
	push_base_offset(0x320);
	move_arg(0x2);
	sys1(0x41);
	push_base_offset(0x320);
	load(0x2);
	push_offset(L02f42);
	jc(0x0);
	push_offset(L02fd7);
	jmp();

L02f42:
	push_base_offset(0x330);
	load(0x2);
	push_string("data04xxx.arc");
	push_base_offset(0x32c);
	load(0x2);
	push_byte(0x1);
	push_byte(0x1);
	push_byte(0x10);
	shl();
	snd1(0x21);
	push_base_offset(0xc);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x324);
	load(0x2);
	push_offset(L02f7b);
	jc(0x1);
	push_base_offset(0x32c);
	load(0x2);
	push_offset(L03711);
	call();
	push_base_offset(0xc);
	move_arg(0x2);

L02f7b:
	push_base_offset(0x8);
	push_byte(0x20);
	push_base_offset(0xc);
	load(0x2);
	push_offset(L035dd);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x330);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	snd1(0x9);
	push_base_offset(0x330);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x330);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x4a4);
	load(0x2);
	ternary();
	push_word(0x4a4);
	move_arg(0x2);
	push_base_offset(0x320);
	push_byte(0x1);
	move(0x2);

L02fd7:
	push_base_offset(0x320);
	load(0x2);
	load_base();
	push_word(0x330);
	sub();
	store_base();
	ret();

L02fe3:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L03007);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L03023);
	jmp();

L03007:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L03023);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L03023:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L03033:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x1f4);
	add();
	move(0x2);

L0304d:
	sys1(0x4);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	geq();
	push_offset(L03074);
	jc(0x0);
	push_word(0x450);
	load(0x2);
	push_offset(L03074);
	jc(0x0);
	sys1(0x5f);
	push_offset(L0304d);
	jmp();

L03074:
	sys1(0x5f);
	push_word(0x450);
	load(0x2);
	push_offset(L03074);
	jc(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L03086:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x7);
	add();
	eq();
	push_offset(L033dc);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x6);
	add();
	eq();
	push_offset(L033dc);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x16);
	add();
	eq();
	push_offset(L033dc);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L033dc);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x8);
	add();
	eq();
	push_offset(L03235);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x0);
	add();
	eq();
	push_offset(L031a8);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x3);
	add();
	eq();
	push_offset(L03206);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xc);
	add();
	eq();
	push_offset(L031d7);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0xf);
	add();
	eq();
	push_offset(L03264);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x12);
	add();
	eq();
	push_offset(L03293);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x17);
	add();
	eq();
	push_offset(L032c2);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1b);
	add();
	eq();
	push_offset(L032f1);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x1e);
	add();
	eq();
	push_offset(L03320);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x21);
	add();
	eq();
	push_offset(L0334f);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x24);
	add();
	eq();
	push_offset(L0337e);
	jc(0x0);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	push_byte(0x27);
	add();
	eq();
	push_offset(L033ad);
	jc(0x0);
	push_offset(L0344c);
	jmp();
	push_offset(L033dc);
	jmp();

L031a8:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x51c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x51c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x51c);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L031d7:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x520);
	load(0x2);
	add();
	move(0x2);
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x520);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x520);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L03206:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x524);
	load(0x2);
	add();
	move(0x2);
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x524);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x524);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L03235:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x528);
	load(0x2);
	add();
	move(0x2);
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x528);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x528);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L03264:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x52c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x52c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x52c);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L03293:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x530);
	load(0x2);
	add();
	move(0x2);
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x530);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x530);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L032c2:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x534);
	load(0x2);
	add();
	move(0x2);
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x534);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x534);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L032f1:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x538);
	load(0x2);
	add();
	move(0x2);
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x538);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x538);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L03320:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x53c);
	load(0x2);
	add();
	move(0x2);
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x53c);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x53c);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L0334f:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x540);
	load(0x2);
	add();
	move(0x2);
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x540);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x540);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L0337e:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x544);
	load(0x2);
	add();
	move(0x2);
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x3);
	lt();
	push_word(0x544);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x544);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L033ad:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_word(0x548);
	load(0x2);
	add();
	move(0x2);
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x4);
	lt();
	push_word(0x548);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x0);
	ternary();
	push_word(0x548);
	move_arg(0x2);
	push_offset(L033dc);
	jmp();

L033dc:
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L03417);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	geq();
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_offset(L03417);
	jc(0x1);
	push_word(0x49c);
	load(0x2);
	push_byte(0x32);
	snd1(0x26);

L03417:
	push_base_offset(0x8);
	load(0x2);
	push_word(0x80);
	push_byte(0x40);
	snd1(0x24);
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	geq();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x32);
	push_byte(0xc);
	add();
	lt();
	bool_and();
	push_base_offset(0x8);
	load(0x2);
	push_word(0x49c);
	load(0x2);
	ternary();
	push_word(0x49c);
	move_arg(0x2);

L0344c:
	push_base_offset(0x4);
	load(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L03457:
	load_base();
	push_word(0x110);
	add();
	store_base();
	push_base_offset(0x10c);
	push_word(0x1c0);
	push_byte(0x63);
	push_byte(0x3);
	sar();
	add();
	move(0x2);
	push_base_offset(0x110);
	push_base_offset(0x10c);
	load(0x2);
	load(0x0);
	push_byte(0x1);
	push_byte(0x63);
	push_byte(0x7);
	and();
	shl();
	and();
	push_byte(0x0);
	neq();
	move(0x2);
	push_base_offset(0x110);
	load(0x2);
	push_string("＋α");
	push_string("");
	ternary();
	push_base_offset(0x108);
	move_arg(0x2);
	push_byte(0x0);
	push_string(" 2017/10/28");
	push_string("");
	ternary();
	push_base_offset(0x104);
	move_arg(0x2);
	push_base_offset(0x104);
	load(0x2);
	push_base_offset(0x108);
	load(0x2);
	push_dword(0x483b4);
	push_dword(0x48334);
	push_base_offset(0x100);
	push_string("%s%s%s%s");
	cmd_6f();
	push_base_offset(0x100);
	sys1(0x66);
	load_base();
	push_word(0x110);
	sub();
	store_base();
	ret();

L034c9:
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x0);
	gt();
	push_byte(0x32);
	push_base_offset(0x38);
	load(0x2);
	push_byte(0x1);
	add();
	push_byte(0x1);
	sar();
	add();
	push_byte(0x0);
	ternary();
	push_base_offset(0x38);
	move_arg(0x2);
	push_base_offset(0x8);
	push_base_offset(0x38);
	load(0x2);
	push_word(0x80);
	mul();
	push_byte(0x65);
	push_byte(0x1);
	sub();
	div();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x10);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x22);
	add();
	load(0x1);
	push_offset(L034c9);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x32);
	add();
	load(0x1);
	push_offset(L034c9);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0x8e);
	add();
	load(0x1);
	push_base_offset(0xc);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0xc);
	move_arg(0x2);
	push_byte(0x20);
	push_word(0x90);
	add();
	load(0x1);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x4);
	push_word(0x80);
	push_base_offset(0xc);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_word(0x80);
	div();
	push_base_offset(0x4);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x10);
	load(0x2);
	push_byte(0x0);
	ternary();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x10);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_offset(L03900);
	call();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L035dd);
	call();
	load_base();
	push_byte(0x10);
	sub();
	store_base();
	ret();

L035dd:
	load_base();
	push_byte(0x24);
	add();
	store_base();
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x24);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x22);
	add();
	load(0x1);
	push_offset(L034c9);
	call();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x28);
	add();
	load(0x1);
	push_offset(L034c9);
	call();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x8e);
	add();
	load(0x1);
	push_base_offset(0x20);
	load(0x2);
	push_word(0x94);
	add();
	load(0x1);
	bool_and();
	push_base_offset(0xc);
	load(0x2);
	push_word(0x80);
	push_base_offset(0x10);
	load(0x2);
	sub();
	sub();
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x0);
	lt();
	push_offset(L036f3);
	jc(0x0);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x48);
	add();
	push_base_offset(0x1c);
	load(0x2);
	push_byte(0x2);
	mul();
	add();
	load(0x1);
	push_offset(L034c9);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_offset(L036ce);
	jc(0x1);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	mul();
	push_word(0x80);
	div();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	lt();
	push_byte(0x0);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);

L036ce:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_base_offset(0x20);
	load(0x2);
	push_byte(0x34);
	add();
	push_base_offset(0x1c);
	load(0x2);
	add();
	load(0x0);
	move(0x2);
	push_offset(L03706);
	jmp();

L036f3:
	push_base_offset(0x24);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x18);
	push_byte(0x1);
	move(0x2);

L03706:
	push_base_offset(0x18);
	load(0x2);
	load_base();
	push_byte(0x24);
	sub();
	store_base();
	ret();

L03711:
	load_base();
	push_word(0x1a0);
	add();
	store_base();
	push_base_offset(0x1a0);
	move_arg(0x2);
	push_base_offset(0x180);
	push_string("AK");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x178);
	push_string("SA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x170);
	push_string("RE");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x168);
	push_string("KA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x160);
	push_string("MA");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x158);
	push_string("KZ");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x150);
	push_string("AR");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x148);
	push_string("SY");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x140);
	push_string("HI");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x138);
	push_string("BE");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x130);
	push_string("KK");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x128);
	push_string("W");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x120);
	push_string("M");
	push_byte(0x0);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x118);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x110);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x108);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x100);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xf8);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xf0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe8);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xe0);
	push_byte(0x0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0xd8);
	push_byte(0x0);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x180);
	push_base_offset(0x178);
	push_base_offset(0x170);
	push_base_offset(0x168);
	push_base_offset(0x160);
	push_base_offset(0x158);
	push_base_offset(0x150);
	push_base_offset(0x148);
	push_base_offset(0x140);
	push_base_offset(0x138);
	cmd_0c(0x2, 0xa);
	push_base_offset(0xd8);
	push_byte(0xa);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0x130);
	push_base_offset(0x128);
	push_base_offset(0x120);
	push_base_offset(0x118);
	push_base_offset(0x110);
	push_base_offset(0x108);
	push_base_offset(0x100);
	push_base_offset(0xf8);
	push_base_offset(0xf0);
	push_base_offset(0xe8);
	cmd_0c(0x2, 0xa);
	push_base_offset(0xd8);
	push_byte(0x14);
	push_byte(0x2);
	shl();
	add();
	push_base_offset(0xe0);
	cmd_0c(0x2, 0x1);
	push_base_offset(0x84);
	push_base_offset(0x1a0);
	load(0x2);
	cmd_6a();
	push_base_offset(0x84);
	cmd_6d();
	push_base_offset(0x194);
	push_byte(0x0);
	move(0x2);

L03862:
	push_base_offset(0x4);
	push_base_offset(0xd8);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);

L03875:
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L038cf);
	jc(0x1);
	push_base_offset(0x190);
	push_base_offset(0x4);
	load(0x2);
	load(0x2);
	cmd_6a();
	push_base_offset(0x190);
	cmd_6d();
	push_base_offset(0x190);
	cmd_68();
	push_base_offset(0x198);
	move_arg(0x2);
	push_base_offset(0x84);
	push_base_offset(0x190);
	push_base_offset(0x198);
	load(0x2);
	memcmp();
	push_offset(L038c1);
	jc(0x0);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x2);
	shl();
	add();
	move(0x2);
	push_offset(L03875);
	jmp();

L038c1:
	push_base_offset(0x19c);
	push_base_offset(0x194);
	load(0x2);
	move(0x2);
	push_offset(L038f4);
	jmp();

L038cf:
	push_base_offset(0x194);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x194);
	load(0x2);
	push_byte(0xd);
	lt();
	push_offset(L03862);
	jc(0x0);
	push_base_offset(0x19c);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);

L038f4:
	push_base_offset(0x19c);
	load(0x2);
	load_base();
	push_word(0x1a0);
	sub();
	store_base();
	ret();

L03900:
	load_base();
	push_byte(0x5c);
	add();
	store_base();
	push_base_offset(0x5c);
	move_arg(0x2);
	push_base_offset(0x5c);
	load(0x2);
	push_offset(L03711);
	call();
	push_base_offset(0x58);
	move_arg(0x2);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x0);
	geq();
	push_base_offset(0x58);
	load(0x2);
	push_byte(0xd);
	lt();
	bool_and();
	push_offset(L03973);
	jc(0x1);
	push_base_offset(0x54);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	push_byte(0x1);
	push_byte(0x2);
	push_byte(0x3);
	push_byte(0x4);
	push_byte(0x5);
	push_byte(0x6);
	push_byte(0x7);
	push_byte(0x8);
	push_byte(0x9);
	cmd_0c(0x2, 0xa);
	push_base_offset(0x54);
	push_byte(0xa);
	push_byte(0x4);
	mul();
	add();
	push_byte(0xa);
	push_byte(0xb);
	push_byte(0xc);
	cmd_0c(0x2, 0x3);
	push_base_offset(0x58);
	push_base_offset(0x54);
	push_base_offset(0x58);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);

L03973:
	push_base_offset(0x58);
	load(0x2);
	load_base();
	push_byte(0x5c);
	sub();
	store_base();
	ret();
