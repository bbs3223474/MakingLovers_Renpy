	load_base();
	push_byte(0x44);
	add();
	store_base();
	push_base_offset(0x44);
	move_arg(0x2);
	push_base_offset(0x40);
	push_offset(L0003a);
	push_offset(L0004f);
	push_offset(L000ba);
	push_offset(L00282);
	push_offset(L00376);
	push_offset(L005de);
	push_offset(L01138);
	cmd_0c(0x2, 0x7);
	push_base_offset(0x40);
	push_base_offset(0x44);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	call();
	load_base();
	push_byte(0x44);
	sub();
	store_base();
	ret();

L0003a:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L0004f:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x7e8);
	push_byte(0x1);
	move(0x2);
	push_word(0xb3c);
	load(0x2);
	push_offset(L0009f);
	jc(0x1);
	push_word(0x7e4);
	push_byte(0x1);
	move(0x2);
	push_dword(0x42764);
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x4c);

L00085:
	push_word(0x4f4);
	load(0x2);
	push_offset(L000ad);
	jc(0x0);
	push_word(0xb40);
	load(0x2);
	push_offset(L0009f);
	jc(0x1);
	sys1(0x5f);
	push_offset(L00085);
	jmp();

L0009f:
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L000ba);
	call();

L000ad:
	push_word(0x7e8);
	push_byte(0x0);
	move(0x2);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L000ba:
	load_base();
	push_word(0x90);
	add();
	store_base();
	push_base_offset(0x8c);
	move_arg(0x2);
	push_base_offset(0x90);
	move_arg(0x2);
	push_string("sysprg.arc");
	push_string("bitmap._bp");
	sys1(0x40);
	push_base_offset(0x84);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e4);
	add();
	load(0x2);
	push_byte(0x14);
	push_base_offset(0x84);
	load(0x2);
	call();
	push_dword(0x9fab8);
	push_dword(0x2217c);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22180);
	add();
	load(0x2);
	push_byte(0x15);
	push_base_offset(0x84);
	load(0x2);
	call();
	sys1(0x41);
	push_string("sysprg.arc");
	push_string("msgwndctrl._bp");
	sys1(0x40);
	push_base_offset(0x84);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x220e4);
	add();
	load(0x2);
	push_byte(0x20);
	push_byte(0x70);
	add();
	load(0x1);
	push_dword(0x9fab8);
	push_dword(0x2212c);
	add();
	load(0x2);
	push_byte(0x1);
	push_byte(0x0);
	push_base_offset(0x84);
	load(0x2);
	call();
	push_word(0x7e0);
	load(0x2);
	push_offset(L00174);
	jc(0x0);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x84);
	load(0x2);
	call();

L00174:
	push_word(0x7e0);
	push_byte(0x0);
	move(0x2);
	sys1(0x41);
	push_word(0x900);
	push_byte(0x1);
	move(0x2);
	push_word(0x904);
	push_byte(0x1);
	move(0x2);
	push_word(0x908);
	push_byte(0x1);
	move(0x2);
	push_word(0x100);
	push_offset(L014be);
	call();
	push_word(0x900);
	push_byte(0x0);
	move(0x2);
	push_word(0x904);
	push_byte(0x0);
	move(0x2);
	push_word(0x908);
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x80);
	push_offset(L00376);
	call();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x80);
	push_byte(0x1);
	push_offset(L005de);
	call();
	push_base_offset(0x8c);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x80);
	push_byte(0x1);
	push_offset(L01138);
	call();
	push_word(0xbac);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_byte(0x1);
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_word(0xbbc);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x22120);
	add();
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_byte(0x0);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	ternary();
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0xc);
	add();
	move_arg(0x2);
	push_dword(0x42aa0);
	load(0x2);
	push_base_offset(0x90);
	load(0x2);
	grp1(0xb7);
	push_dword(0x42aa8);
	load(0x2);
	push_base_offset(0x8c);
	load(0x2);
	grp1(0xb7);
	push_base_offset(0x90);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	load_base();
	push_word(0x90);
	sub();
	store_base();
	ret();

L00282:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_byte(0x20);
	push_byte(0xa);
	add();
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	bool_zero();
	move(0x1);
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	bool_zero();
	bool_and();
	push_offset(L01abb);
	call();
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L00370);
	jc(0x0);
	push_string("sysprg.arc");
	push_string("environ._bp");
	sys1(0x40);
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x74);
	add();
	load(0x1);
	push_byte(0xa);
	push_byte(0x1);
	sub();
	push_byte(0x20);
	push_byte(0x12);
	add();
	load(0x1);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0xb48);
	load(0x2);
	push_byte(0xa);
	push_byte(0x1);
	sub();
	push_base_offset(0x8);
	load(0x2);
	ternary();
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	push_base_offset(0x4);
	load(0x2);
	call();
	push_base_offset(0x8);
	move_arg(0x2);
	push_dword(0x9fab8);
	push_word(0x100);
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	push_word(0xbac);
	load(0x2);
	bool_or();
	push_dword(0x9fab8);
	push_word(0xf4);
	add();
	load(0x2);
	bool_zero();
	bool_and();
	bool_or();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	push_base_offset(0x4);
	load(0x2);
	call();
	sys1(0x41);

L00370:
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();

L00376:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0xe0);
	add();
	load(0x2);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_word(0xb04);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0xdc);
	add();
	load(0x2);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	bool_zero();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	push_word(0xba4);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1a);
	push_byte(0x4);
	mul();
	add();
	push_word(0xab8);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x20);
	push_byte(0xc);
	add();
	load(0x1);
	push_word(0xba8);
	load(0x2);
	bool_or();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0xe0);
	add();
	load(0x2);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_word(0xb04);
	load(0x2);
	bool_zero();
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_word(0xdc);
	add();
	load(0x2);
	push_word(0x420);
	load(0x2);
	push_byte(0x0);
	eq();
	bool_and();
	push_word(0xbe8);
	load(0x2);
	bool_and();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xd);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xe);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xf);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_dword(0x21458);
	add();
	push_byte(0x0);
	add();
	load(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x11);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x12);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x13);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x14);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x15);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x16);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x17);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x18);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x19);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fab8);
	push_dword(0x8540);
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1b);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1c);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fa50);
	load(0x2);
	push_byte(0x0);
	gt();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1d);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x9fa50);
	load(0x2);
	push_dword(0x9fab8);
	push_dword(0x25e04);
	add();
	load(0x2);
	push_byte(0x1);
	sub();
	lt();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1e);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	move(0x2);
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L005de:
	load_base();
	push_word(0x138);
	add();
	store_base();
	push_base_offset(0x130);
	move_arg(0x2);
	push_base_offset(0x134);
	move_arg(0x2);
	push_base_offset(0x138);
	move_arg(0x2);
	push_base_offset(0x12c);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x12c);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x12c);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x12c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x120);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0x12c);
	push_byte(0xc);
	memcpy();
	push_base_offset(0x120);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1414);
	push_word(0x125);
	push_word(0x175);
	push_word(0x1c5);
	push_word(0x215);
	push_byte(0x0);
	push_word(0x265);
	push_word(0x2b5);
	push_word(0x305);
	push_word(0x355);
	push_word(0x3a5);
	cmd_0c(0x2, 0xa);
	push_word(0x143c);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	push_word(0x2b8);
	cmd_0c(0x2, 0xa);
	push_base_offset(0x54);
	push_byte(0x0);
	move(0x2);

L00705:
	push_word(0x1414);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1414);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x125);
	sub();
	move(0x2);
	push_word(0x143c);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x143c);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x2b8);
	sub();
	move(0x2);
	push_base_offset(0x50);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1414);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x1668);
	push_byte(0x8);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x28);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x143c);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x1668);
	push_byte(0xc);
	add();
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x54);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x54);
	load(0x2);
	push_byte(0xa);
	lt();
	push_offset(L00705);
	jc(0x0);
	push_offset(L007ad);
	jmp();

L007ad:
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x14);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x5);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x6);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x18);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x6);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	push_word(0xbb4);
	load(0x2);
	bool_or();
	push_dword(0x48424);
	load(0x2);
	push_dword(0x48428);
	load(0x2);
	bool_and();
	bool_or();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_byte(0x2);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	push_word(0xbb4);
	load(0x2);
	bool_or();
	push_dword(0x48424);
	load(0x2);
	push_dword(0x48428);
	load(0x2);
	bool_and();
	bool_or();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_byte(0x2);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_byte(0x1);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0xa);
	add();
	load(0x1);
	push_word(0xbb4);
	load(0x2);
	bool_or();
	push_dword(0x48424);
	load(0x2);
	push_dword(0x48428);
	load(0x2);
	bool_and();
	bool_or();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_byte(0x2);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x4);
	add();
	push_byte(0x2);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x9);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x24);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x24);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x24);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x9);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_offset(L00c5f);
	jc(0x1);
	push_word(0xbc4);
	load(0x2);
	push_offset(L00c0d);
	jc(0x0);
	push_dword(0x48424);
	load(0x2);
	push_dword(0x4842c);
	load(0x2);
	bool_and();
	push_offset(L00c0d);
	jc(0x0);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x2);
	add();
	move(0x2);
	push_offset(L00ca4);
	jmp();

L00c0d:
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x2);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	push_byte(0x2);
	add();
	move(0x2);
	push_offset(L00ca4);
	jmp();

L00c5f:
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x0);
	add();
	move(0x2);

L00ca4:
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0xc);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x3);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x8);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x20);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x8);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x5);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x8);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x2);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_base_offset(0x130);
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x7);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0xf);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0xf);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x1c);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x7);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	push_base_offset(0x120);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x8);
	add();
	push_base_offset(0x50);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0xc);
	add();
	push_base_offset(0x28);
	push_byte(0x4);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	move(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x1b);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x130);
	load(0x2);
	push_base_offset(0x134);
	load(0x2);
	push_byte(0x1b);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x0);
	add();
	push_byte(0x10);
	add();
	ternary();
	push_base_offset(0x120);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0x120);
	push_byte(0x30);
	add();
	push_byte(0x2);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x138);
	load(0x2);
	push_byte(0x4);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0x120);
	push_word(0xc4);
	memcpy();
	load_base();
	push_word(0x138);
	sub();
	store_base();
	ret();

L01138:
	load_base();
	push_word(0xf8);
	add();
	store_base();
	push_base_offset(0xf0);
	move_arg(0x2);
	push_base_offset(0xf4);
	move_arg(0x2);
	push_base_offset(0xf8);
	move_arg(0x2);
	push_base_offset(0xec);
	push_byte(0x0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xec);
	push_byte(0x4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xec);
	push_byte(0x8);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x10);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x14);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x18);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x1c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x3);
	push_byte(0x4);
	mul();
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x34);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x38);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_word(0x9c);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_word(0xa0);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_word(0xa4);
	add();
	push_byte(0x0);
	move(0x2);
	push_base_offset(0xe0);
	push_word(0xa8);
	add();
	push_byte(0x0);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0xec);
	push_byte(0xc);
	memcpy();
	push_base_offset(0xe0);
	push_word(0xa8);
	add();
	push_byte(0x1);
	push_byte(0xc);
	mul();
	add();
	push_base_offset(0xec);
	push_byte(0xc);
	memcpy();
	push_base_offset(0xe0);
	push_word(0xc0);
	add();
	push_byte(0x0);
	move(0x2);
	push_word(0x1658);
	push_word(0x4b7);
	push_word(0x4da);
	cmd_0c(0x2, 0x2);
	push_word(0x1660);
	push_byte(0x4);
	push_byte(0x4);
	cmd_0c(0x2, 0x2);
	push_base_offset(0x14);
	push_byte(0x0);
	move(0x2);

L0122e:
	push_word(0x1658);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1658);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_word(0x3c0);
	sub();
	move(0x2);
	push_word(0x1660);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1660);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	sub();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1658);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x8);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	push_word(0x1660);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x2);
	lt();
	push_offset(L0122e);
	jc(0x0);
	push_base_offset(0xe0);
	push_byte(0x0);
	add();
	push_base_offset(0xf0);
	load(0x2);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x8);
	add();
	push_base_offset(0x10);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0xc);
	add();
	push_base_offset(0x8);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x5d);
	add();
	move(0x2);
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xf4);
	load(0x2);
	push_byte(0x1d);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x5d);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x5d);
	add();
	ternary();
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xf4);
	load(0x2);
	push_byte(0x1d);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x5d);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x5d);
	add();
	ternary();
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xe0);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xf8);
	load(0x2);
	push_byte(0x0);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0xe0);
	push_word(0xc4);
	memcpy();
	push_base_offset(0xe0);
	push_byte(0x0);
	add();
	push_base_offset(0xf0);
	load(0x2);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x4);
	add();
	push_byte(0x1);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x8);
	add();
	push_base_offset(0x10);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0xc);
	add();
	push_base_offset(0x8);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	push_word(0x400);
	push_byte(0x5b);
	add();
	move(0x2);
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xf4);
	load(0x2);
	push_byte(0x1c);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x5b);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x5b);
	add();
	ternary();
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xf0);
	load(0x2);
	push_base_offset(0xf4);
	load(0x2);
	push_byte(0x1c);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	bool_and();
	push_word(0x400);
	push_byte(0x5b);
	add();
	push_byte(0x1);
	add();
	push_word(0x400);
	push_byte(0x5b);
	add();
	ternary();
	push_base_offset(0xe0);
	push_byte(0x20);
	add();
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	move_arg(0x2);
	push_base_offset(0xe0);
	push_byte(0x30);
	add();
	push_byte(0x1);
	not();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0xf8);
	load(0x2);
	push_byte(0x1);
	push_word(0xc4);
	mul();
	add();
	push_base_offset(0xe0);
	push_word(0xc4);
	memcpy();
	load_base();
	push_word(0xf8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x0);
	eq();
	push_offset(L01492);
	jc(0x1);
	push_base_offset(0x4);
	push_byte(0x0);
	move(0x2);
	push_offset(L014ae);
	jmp();

L01492:
	push_byte(0x20);
	push_byte(0x18);
	add();
	load(0x1);
	push_byte(0x1);
	eq();
	push_offset(L014ae);
	jc(0x1);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x1);
	sar();
	move(0x2);

L014ae:
	push_byte(0x0);
	push_byte(0x0);
	push_base_offset(0x4);
	load(0x2);
	ternary();
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();

L014be:
	load_base();
	push_byte(0x8);
	add();
	store_base();
	push_base_offset(0x8);
	move_arg(0x2);
	push_word(0x900);
	load(0x2);
	push_offset(L01657);
	jc(0x1);
	push_word(0x8f8);
	load(0x2);
	push_offset(L0155d);
	jc(0x1);
	push_dword(0x42abc);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);
	push_word(0x4fc);
	load(0x2);
	bool_zero();
	push_word(0x8fc);
	load(0x2);
	bool_and();
	push_offset(L01515);
	jc(0x1);
	push_dword(0x42ab0);
	push_byte(0x0);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L01515:
	push_word(0x9b4);
	push_base_offset(0x8);
	load(0x2);
	move(0x2);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L0155d);
	jc(0x1);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L0155d);
	jc(0x1);
	push_word(0x9c0);
	push_byte(0x0);
	push_byte(0x4c);
	mul();
	add();
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L0155d:
	push_dword(0x42aa8);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);
	push_word(0xb0c);
	load(0x2);
	push_offset(L015d6);
	jc(0x0);
	push_word(0xb74);
	load(0x2);
	push_offset(L015d6);
	jc(0x0);
	push_dword(0x42a80);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L015d6);
	jc(0x1);
	push_dword(0x42a80);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);
	push_dword(0x42a84);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L015b9);
	jc(0x1);
	push_dword(0x42a84);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L015b9:
	push_dword(0x42a88);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L015d6);
	jc(0x1);
	push_dword(0x42a88);
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L015d6:
	push_word(0x8f8);
	load(0x2);
	push_offset(L01657);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x3f);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01609);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x3f);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L01609:
	push_dword(0x45f14);
	load(0x2);
	push_byte(0x0);
	geq();
	push_offset(L01657);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x45f14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01657);
	jc(0x1);
	push_dword(0x42868);
	push_byte(0x20);
	push_byte(0x4);
	mul();
	add();
	push_dword(0x45f14);
	load(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L01657:
	push_word(0x904);
	load(0x2);
	push_offset(L01675);
	jc(0x1);
	push_dword(0x42abc);
	push_byte(0x1);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L01675:
	push_word(0x908);
	load(0x2);
	push_offset(L01693);
	jc(0x1);
	push_dword(0x42abc);
	push_byte(0x2);
	push_byte(0x4);
	mul();
	add();
	load(0x2);
	push_base_offset(0x8);
	load(0x2);
	grp1(0x34);

L01693:
	push_byte(0x0);
	grp1(0x0);
	load_base();
	push_byte(0x8);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x38);
	add();
	store_base();
	push_base_offset(0x2c);
	move_arg(0x2);
	push_base_offset(0x30);
	move_arg(0x2);
	push_base_offset(0x34);
	move_arg(0x2);
	push_base_offset(0x38);
	move_arg(0x2);
	push_word(0x710);
	sys1(0x18);
	push_base_offset(0x24);
	push_byte(0x1);
	push_word(0x80);
	or();
	push_word(0x100);
	or();
	push_word(0x2000);
	or();
	move(0x2);
	push_base_offset(0x24);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x20);
	move_arg(0x2);
	push_base_offset(0x1c);
	push_base_offset(0x34);
	load(0x2);
	push_base_offset(0x38);
	load(0x2);
	sub();
	move(0x2);
	push_base_offset(0x18);
	push_word(0x3e8);
	push_word(0xfa);
	div();
	move(0x2);
	push_base_offset(0x14);
	push_base_offset(0x30);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	div();
	move(0x2);
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x0);
	gt();
	push_base_offset(0x14);
	load(0x2);
	push_byte(0x1);
	ternary();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x10);
	push_byte(0x0);
	move(0x2);
	sys1(0x4);
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x4);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	add();
	move(0x2);

L01739:
	sys1(0x5f);
	push_word(0x4f4);
	load(0x2);
	push_offset(L01819);
	jc(0x0);
	push_base_offset(0x24);
	load(0x2);
	sys1(0x1c);
	push_base_offset(0x28);
	move_arg(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x20);
	load(0x2);
	neq();
	push_base_offset(0x2c);
	load(0x2);
	bool_and();
	push_offset(L01803);
	jc(0x0);
	sys1(0x4);
	push_base_offset(0x8);
	move_arg(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	lt();
	push_offset(L01739);
	jc(0x0);
	push_base_offset(0x28);
	push_base_offset(0x8);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	sub();
	push_base_offset(0x18);
	load(0x2);
	div();
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x4);
	push_base_offset(0x4);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	mul();
	add();
	move(0x2);
	push_base_offset(0x10);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x28);
	load(0x2);
	add();
	move(0x2);
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	leq();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	ternary();
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x38);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x10);
	load(0x2);
	mul();
	push_base_offset(0x14);
	load(0x2);
	div();
	add();
	push_offset(L014be);
	call();
	push_base_offset(0x10);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	lt();
	push_offset(L01739);
	jc(0x0);

L01803:
	push_base_offset(0x34);
	load(0x2);
	push_offset(L014be);
	call();
	push_word(0x3e8);
	push_word(0x3e8);
	div();
	push_byte(0x0);
	push_byte(0x0);
	sys1(0x5c);

L01819:
	push_word(0x710);
	sys1(0x19);
	load_base();
	push_byte(0x38);
	sub();
	store_base();
	ret();

L01824:
	load_base();
	push_byte(0x20);
	add();
	store_base();
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x18);
	move_arg(0x2);
	push_base_offset(0x1c);
	move_arg(0x2);
	push_base_offset(0x20);
	move_arg(0x2);
	push_dword(0x42768);
	push_byte(0xc);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x0);
	add();
	load(0x2);
	push_offset(L01883);
	jc(0x1);
	push_base_offset(0x10);
	push_base_offset(0x20);
	load(0x2);
	push_base_offset(0x1c);
	load(0x2);
	push_base_offset(0x18);
	load(0x2);
	push_base_offset(0x14);
	load(0x2);
	cmd_0c(0x2, 0x4);
	push_dword(0x42768);
	push_byte(0xc);
	push_byte(0x10);
	mul();
	add();
	push_byte(0x4);
	add();
	load(0x2);
	push_byte(0x4);
	push_base_offset(0x10);
	sys1(0x4a);

L01883:
	load_base();
	push_byte(0x20);
	sub();
	store_base();
	ret();

L01889:
	load_base();
	push_byte(0x14);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x10);
	move_arg(0x2);
	push_base_offset(0x14);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L018a4:
	push_base_offset(0x4);
	push_word(0x930);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_offset(L01901);
	jc(0x0);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x14);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	push_base_offset(0x10);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	push_base_offset(0xc);
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	push_byte(0x1);
	move(0x2);
	push_offset(L0191b);
	jmp();

L01901:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L018a4);
	jc(0x0);

L0191b:
	load_base();
	push_byte(0x14);
	sub();
	store_base();
	ret();

L01921:
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01932:
	push_base_offset(0x4);
	push_word(0x930);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x10);
	mul();
	add();
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0xc);
	add();
	load(0x2);
	push_offset(L01981);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	add();
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x4);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_offset(L01824);
	call();
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x10);
	memclr();

L01981:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x8);
	lt();
	push_offset(L01932);
	jc(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();

L019a1:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9b8);
	load(0x2);
	push_offset(L019e0);
	jc(0x0);
	push_byte(0x0);
	push_byte(0x2);
	push_dword(-0x3);
	push_offset(L01889);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01921);
	call();
	push_word(0x9b8);
	push_byte(0x1);
	move(0x2);

L019e0:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L019e6:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9bc);
	load(0x2);
	push_offset(L01a25);
	jc(0x0);
	push_byte(0x1);
	push_byte(0x3);
	push_dword(-0x3);
	push_offset(L01889);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01921);
	call();
	push_word(0x9bc);
	push_byte(0x1);
	move(0x2);

L01a25:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01a2b:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9b8);
	load(0x2);
	push_offset(L01a6d);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x2);
	push_dword(-0x3);
	push_offset(L01889);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01921);
	call();
	push_word(0x9b8);
	push_byte(0x0);
	move(0x2);

L01a6d:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01a73:
	load_base();
	push_byte(0x0);
	add();
	store_base();
	push_word(0x9bc);
	load(0x2);
	push_offset(L01ab5);
	jc(0x1);
	push_dword(-0x1);
	push_byte(0x3);
	push_dword(-0x3);
	push_offset(L01889);
	call();
	push_dword(0x9fab8);
	push_word(0xcc);
	add();
	load(0x2);
	bool_zero();
	push_dword(0x9fab8);
	push_word(0xd0);
	add();
	load(0x2);
	bool_or();
	push_offset(L01921);
	call();
	push_word(0x9bc);
	push_byte(0x0);
	move(0x2);

L01ab5:
	load_base();
	push_byte(0x0);
	sub();
	store_base();
	ret();

L01abb:
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01ad7);
	jc(0x1);
	push_offset(L019a1);
	call();
	push_offset(L01adb);
	jmp();

L01ad7:
	push_offset(L01a2b);
	call();

L01adb:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0x4);
	add();
	store_base();
	push_base_offset(0x4);
	move_arg(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_offset(L01afd);
	jc(0x1);
	push_offset(L019e6);
	call();
	push_offset(L01b01);
	jmp();

L01afd:
	push_offset(L01a73);
	call();

L01b01:
	load_base();
	push_byte(0x4);
	sub();
	store_base();
	ret();
	load_base();
	push_byte(0xc);
	add();
	store_base();
	push_base_offset(0xc);
	move_arg(0x2);
	push_base_offset(0x8);
	push_byte(0x0);
	move(0x2);

L01b18:
	push_base_offset(0x4);
	push_word(0x92c);
	load(0x2);
	push_byte(0x0);
	add();
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x2);
	shl();
	add();
	load(0x2);
	move(0x2);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01b60);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_byte(0x0);
	neq();
	push_offset(L01b60);
	jc(0x1);
	push_base_offset(0x4);
	load(0x2);
	push_byte(0x8);
	add();
	load(0x2);
	push_base_offset(0xc);
	load(0x2);
	grp2(0x31);

L01b60:
	push_base_offset(0x8);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x1);
	add();
	move(0x2);
	push_base_offset(0x8);
	load(0x2);
	push_byte(0x20);
	lt();
	push_offset(L01b18);
	jc(0x0);
	load_base();
	push_byte(0xc);
	sub();
	store_base();
	ret();
